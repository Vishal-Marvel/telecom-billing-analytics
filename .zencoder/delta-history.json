{"snapshots":{"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/models/Customer.java":{"filePath":"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/models/Customer.java","baseContent":"package com.telecom.models;\n\npublic class Customer {\n    private Long id;\n    private String name;\n    private String email;\n    private Long referredBy;\n    private boolean creditBlocked;\n\n    public Customer(Long id, String name, String email, Long referredBy, boolean creditBlocked) {\n        this.id = id;\n        this.name = name;\n        this.email = email;\n        this.referredBy = referredBy;\n        this.creditBlocked = creditBlocked;\n    }\n\n    // Getters and Setters\n    public Long getId() { return id; }\n    public void setId(Long id) { this.id = id; }\n    public String getName() { return name; }\n    public void setName(String name) { this.name = name; }\n    public String getEmail() { return email; }\n    public void setEmail(String email) { this.email = email; }\n    public Long getReferredBy() { return referredBy; }\n    public void setReferredBy(Long referredBy) { this.referredBy = referredBy; }\n    public boolean isCreditBlocked() { return creditBlocked; }\n    public void setCreditBlocked(boolean creditBlocked) { this.creditBlocked = creditBlocked; }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Customer customer = (Customer) o;\n        return Objects.equals(id, customer.id);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(id);\n    }\n}","baseTimestamp":1756464377953,"deltas":[{"timestamp":1756464398725,"changes":[{"type":"INSERT","lineNumber":2,"content":"import java.util.Objects;"},{"type":"INSERT","lineNumber":3,"content":""}]},{"timestamp":1756464658341,"changes":[{"type":"DELETE","lineNumber":3,"oldContent":"public class Customer {"},{"type":"INSERT","lineNumber":4,"content":"@D"},{"type":"INSERT","lineNumber":5,"content":"public class Customer {"}]},{"timestamp":1756464662484,"changes":[{"type":"INSERT","lineNumber":2,"content":"import lombok.Data;"},{"type":"INSERT","lineNumber":3,"content":""},{"type":"DELETE","lineNumber":3,"oldContent":"@D"},{"type":"INSERT","lineNumber":6,"content":"@Data"}]},{"timestamp":1756464694895,"changes":[{"type":"INSERT","lineNumber":3,"content":""},{"type":"DELETE","lineNumber":5,"oldContent":""},{"type":"MODIFY","lineNumber":7,"content":"public class Customer {","oldContent":"public class Customer {"},{"type":"DELETE","lineNumber":14,"oldContent":"    public Customer(Long id, String name, String email, Long referredBy, boolean creditBlocked) {"},{"type":"DELETE","lineNumber":15,"oldContent":"        this.id = id;"},{"type":"DELETE","lineNumber":16,"oldContent":"        this.name = name;"},{"type":"DELETE","lineNumber":17,"oldContent":"        this.email = email;"},{"type":"DELETE","lineNumber":18,"oldContent":"        this.referredBy = referredBy;"},{"type":"DELETE","lineNumber":19,"oldContent":"        this.creditBlocked = creditBlocked;"},{"type":"DELETE","lineNumber":20,"oldContent":"    }"},{"type":"DELETE","lineNumber":21,"oldContent":""},{"type":"DELETE","lineNumber":22,"oldContent":"    // Getters and Setters"},{"type":"DELETE","lineNumber":23,"oldContent":"    public Long getId() { return id; }"},{"type":"DELETE","lineNumber":24,"oldContent":"    public void setId(Long id) { this.id = id; }"},{"type":"DELETE","lineNumber":25,"oldContent":"    public String getName() { return name; }"},{"type":"DELETE","lineNumber":26,"oldContent":"    public void setName(String name) { this.name = name; }"},{"type":"DELETE","lineNumber":27,"oldContent":"    public String getEmail() { return email; }"},{"type":"DELETE","lineNumber":28,"oldContent":"    public void setEmail(String email) { this.email = email; }"},{"type":"DELETE","lineNumber":29,"oldContent":"    public Long getReferredBy() { return referredBy; }"},{"type":"DELETE","lineNumber":30,"oldContent":"    public void setReferredBy(Long referredBy) { this.referredBy = referredBy; }"},{"type":"DELETE","lineNumber":31,"oldContent":"    public boolean isCreditBlocked() { return creditBlocked; }"},{"type":"DELETE","lineNumber":32,"oldContent":"    public void setCreditBlocked(boolean creditBlocked) { this.creditBlocked = creditBlocked; }"},{"type":"DELETE","lineNumber":33,"oldContent":""},{"type":"DELETE","lineNumber":34,"oldContent":"    @Override"},{"type":"DELETE","lineNumber":35,"oldContent":"    public boolean equals(Object o) {"},{"type":"DELETE","lineNumber":36,"oldContent":"        if (this == o) return true;"},{"type":"DELETE","lineNumber":37,"oldContent":"        if (o == null || getClass() != o.getClass()) return false;"},{"type":"DELETE","lineNumber":38,"oldContent":"        Customer customer = (Customer) o;"},{"type":"DELETE","lineNumber":39,"oldContent":"        return Objects.equals(id, customer.id);"},{"type":"DELETE","lineNumber":40,"oldContent":"    }"},{"type":"DELETE","lineNumber":41,"oldContent":""},{"type":"DELETE","lineNumber":42,"oldContent":"    @Override"},{"type":"DELETE","lineNumber":43,"oldContent":"    public int hashCode() {"},{"type":"DELETE","lineNumber":44,"oldContent":"        return Objects.hash(id);"},{"type":"DELETE","lineNumber":45,"oldContent":"    }"},{"type":"INSERT","lineNumber":14,"content":"  "}]},{"timestamp":1756464697918,"changes":[{"type":"INSERT","lineNumber":6,"content":"@Data"},{"type":"INSERT","lineNumber":7,"content":"@"},{"type":"DELETE","lineNumber":7,"oldContent":"public class Customer {"}]},{"timestamp":1756464705610,"changes":[{"type":"INSERT","lineNumber":3,"content":"import lombok.NoArgsConstructor;"},{"type":"DELETE","lineNumber":7,"oldContent":"public class Customer {"},{"type":"INSERT","lineNumber":8,"content":"@NoArgsConstructor"},{"type":"INSERT","lineNumber":10,"content":"public class Customer {"}]},{"timestamp":1756464711404,"changes":[{"type":"INSERT","lineNumber":2,"content":"import lombok.AllArgsConstructor;"},{"type":"INSERT","lineNumber":10,"content":"@AllArgsConstructor"},{"type":"DELETE","lineNumber":10,"oldContent":"    private Long id;"},{"type":"INSERT","lineNumber":13,"content":"    private Long id;"}]},{"timestamp":1756464715426,"changes":[{"type":"INSERT","lineNumber":4,"content":"import lombok.EqualsAndHashCode;"},{"type":"DELETE","lineNumber":10,"oldContent":"@"},{"type":"INSERT","lineNumber":12,"content":"@EqualsAndHashCode"},{"type":"DELETE","lineNumber":13,"oldContent":"    private String name;"},{"type":"INSERT","lineNumber":15,"content":"    private String name;"}]},{"timestamp":1756464719912,"changes":[{"type":"MODIFY","lineNumber":20,"content":"","oldContent":"  "}]},{"timestamp":1756486988009,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"import lombok.AllArgsConstructor;"},{"type":"DELETE","lineNumber":3,"oldContent":"import lombok.Data;"},{"type":"DELETE","lineNumber":4,"oldContent":"import lombok.EqualsAndHashCode;"},{"type":"DELETE","lineNumber":5,"oldContent":"import lombok.NoArgsConstructor;"},{"type":"INSERT","lineNumber":2,"content":"import lombok.*;"},{"type":"INSERT","lineNumber":9,"content":"@Builder"},{"type":"DELETE","lineNumber":14,"oldContent":"    private Long id;"},{"type":"INSERT","lineNumber":12,"content":"    private String id;"},{"type":"DELETE","lineNumber":17,"oldContent":"    private Long referredBy;"},{"type":"INSERT","lineNumber":15,"content":"    private String referredBy;    // Customer ID of referrer"},{"type":"DELETE","lineNumber":19,"oldContent":""},{"type":"DELETE","lineNumber":20,"oldContent":""}]},{"timestamp":1756655703005,"changes":[{"type":"DELETE","lineNumber":4,"oldContent":"import java.util.Objects;"},{"type":"DELETE","lineNumber":6,"oldContent":"@Builder"},{"type":"DELETE","lineNumber":10,"oldContent":"    private String id;"},{"type":"INSERT","lineNumber":8,"content":"@Builder"},{"type":"DELETE","lineNumber":13,"oldContent":"    private String referredBy;    // Customer ID of referrer"},{"type":"INSERT","lineNumber":11,"content":"    private String id;"},{"type":"INSERT","lineNumber":14,"content":"    private String referredBy;    // Customer ID of referrer"},{"type":"INSERT","lineNumber":16,"content":""}]},{"timestamp":1756661151463,"changes":[{"type":"DELETE","lineNumber":6,"oldContent":"@Builder"},{"type":"DELETE","lineNumber":9,"oldContent":"    private String id;"},{"type":"INSERT","lineNumber":8,"content":"@Builder"},{"type":"MODIFY","lineNumber":11,"content":"    private String id;","oldContent":"    private String referredBy;    // Customer ID of referrer"},{"type":"DELETE","lineNumber":15,"oldContent":""},{"type":"INSERT","lineNumber":14,"content":"    private String referredBy;    "},{"type":"INSERT","lineNumber":16,"content":""}]}]},"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/models/Plan.java":{"filePath":"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/models/Plan.java","baseContent":"package com.telecom.models;\n\npublic class Plan {\n    private Long id;\n    private String name;\n    private double monthlyRental;\n    private double dataAllowanceGb;\n    private double voiceAllowanceMinutes;\n    private int smsAllowanceCount;\n    private boolean isFamilyShare;\n    private double overageRateGb = 10.0;\n    private double overageRateVoice = 0.5;\n    private double overageRateSms = 0.2;\n    private boolean weekendFreeVoice;\n    private double familyShareCap = 0.60;\n}\n","baseTimestamp":1756464806183,"deltas":[{"timestamp":1756464819382,"changes":[{"type":"INSERT","lineNumber":2,"content":""},{"type":"INSERT","lineNumber":3,"content":""}]},{"timestamp":1756464832652,"changes":[{"type":"MODIFY","lineNumber":3,"content":"import lombok.AllArgsConstructor;","oldContent":"public class Plan {"},{"type":"INSERT","lineNumber":4,"content":"import lombok.Data;"},{"type":"INSERT","lineNumber":5,"content":"import lombok.EqualsAndHashCode;"},{"type":"INSERT","lineNumber":6,"content":"import lombok.NoArgsConstructor;"},{"type":"INSERT","lineNumber":8,"content":"@Data"},{"type":"INSERT","lineNumber":9,"content":"@NoArgsConstructor"},{"type":"INSERT","lineNumber":10,"content":"@AllArgsConstructor"},{"type":"INSERT","lineNumber":11,"content":"@EqualsAndHashCode"},{"type":"INSERT","lineNumber":12,"content":"public class Plan {"}]},{"timestamp":1756466435332,"changes":[{"type":"DELETE","lineNumber":3,"oldContent":"import lombok.AllArgsConstructor;"},{"type":"MODIFY","lineNumber":3,"content":"import lombok.*;","oldContent":"import lombok.Data;"},{"type":"DELETE","lineNumber":6,"oldContent":"import lombok.EqualsAndHashCode;"},{"type":"DELETE","lineNumber":7,"oldContent":"    private Long id;"},{"type":"DELETE","lineNumber":8,"oldContent":"import lombok.NoArgsConstructor;"},{"type":"DELETE","lineNumber":9,"oldContent":"    private String name;"},{"type":"DELETE","lineNumber":10,"oldContent":"    private double monthlyRental;"},{"type":"DELETE","lineNumber":12,"oldContent":"    private double dataAllowanceGb;"},{"type":"INSERT","lineNumber":6,"content":"@Builder"},{"type":"DELETE","lineNumber":14,"oldContent":"    private double voiceAllowanceMinutes;"},{"type":"DELETE","lineNumber":16,"oldContent":"    private int smsAllowanceCount;"},{"type":"DELETE","lineNumber":17,"oldContent":"@EqualsAndHashCode"},{"type":"DELETE","lineNumber":18,"oldContent":"    private boolean isFamilyShare;"},{"type":"DELETE","lineNumber":20,"oldContent":"    private double overageRateGb = 10.0;"},{"type":"DELETE","lineNumber":21,"oldContent":"    private double overageRateVoice = 0.5;"},{"type":"DELETE","lineNumber":22,"oldContent":"    private double overageRateSms = 0.2;"},{"type":"INSERT","lineNumber":10,"content":"    private String id;"},{"type":"INSERT","lineNumber":11,"content":"    private String name;"},{"type":"INSERT","lineNumber":12,"content":"    private double monthlyRental;"},{"type":"INSERT","lineNumber":13,"content":"    private int validity;"},{"type":"INSERT","lineNumber":14,"content":""},{"type":"INSERT","lineNumber":15,"content":"    // Allowances"},{"type":"INSERT","lineNumber":16,"content":"    private double dataAllowanceMb;"},{"type":"INSERT","lineNumber":17,"content":"    private int voiceAllowanceMin;"},{"type":"INSERT","lineNumber":18,"content":"    private int smsAllowance;"},{"type":"INSERT","lineNumber":19,"content":""},{"type":"INSERT","lineNumber":20,"content":"    // Overage rates"},{"type":"INSERT","lineNumber":21,"content":"    private double dataOverageRate;    // per MB"},{"type":"INSERT","lineNumber":22,"content":"    private double voiceOverageRate;   // per min"},{"type":"INSERT","lineNumber":23,"content":"    private double smsOverageRate;     // per SMS"},{"type":"INSERT","lineNumber":24,"content":""},{"type":"INSERT","lineNumber":25,"content":"    // Special rules"},{"type":"DELETE","lineNumber":24,"oldContent":"    private double familyShareCap = 0.60;"},{"type":"INSERT","lineNumber":27,"content":"    private boolean rolloverAllowed;"},{"type":"INSERT","lineNumber":28,"content":"    private double familyShareCap;     // % of pooled data a single member can use"}]},{"timestamp":1756627439470,"changes":[{"type":"INSERT","lineNumber":5,"content":"@Data"},{"type":"INSERT","lineNumber":7,"content":"@NoArgsConstructor"},{"type":"INSERT","lineNumber":8,"content":"@AllArgsConstructor"},{"type":"INSERT","lineNumber":9,"content":"public class Plan {"},{"type":"DELETE","lineNumber":8,"oldContent":"@Data"},{"type":"DELETE","lineNumber":11,"oldContent":"@NoArgsConstructor"},{"type":"DELETE","lineNumber":14,"oldContent":"@AllArgsConstructor"},{"type":"DELETE","lineNumber":19,"oldContent":"public class Plan {"},{"type":"DELETE","lineNumber":24,"oldContent":"    private boolean weekendFreeVoice;"},{"type":"INSERT","lineNumber":26,"content":"    private boolean weekendFreeVoice;"},{"type":"INSERT","lineNumber":27,"content":"    private boolean rolloverAllowed;"},{"type":"INSERT","lineNumber":28,"content":"    private double familyShareCap;// % of pooled data a single member can use"},{"type":"INSERT","lineNumber":29,"content":""},{"type":"INSERT","lineNumber":30,"content":"    public Plan() {"},{"type":"INSERT","lineNumber":31,"content":"    }"},{"type":"INSERT","lineNumber":32,"content":""},{"type":"INSERT","lineNumber":33,"content":"    public Plan(String id, String name, double monthlyRental, int validity, double dataAllowanceMb, int voiceAllowanceMin, int smsAllowance, double dataOverageRate, double voiceOverageRate, double smsOverageRate, double familyShareCap, boolean rolloverAllowed, boolean weekendFreeVoice) {"},{"type":"INSERT","lineNumber":34,"content":"        this.id = id;"},{"type":"INSERT","lineNumber":35,"content":"        this.name = name;"},{"type":"INSERT","lineNumber":36,"content":"        this.monthlyRental = monthlyRental;"},{"type":"INSERT","lineNumber":37,"content":"        this.validity = validity;"},{"type":"INSERT","lineNumber":38,"content":"        this.dataAllowanceMb = dataAllowanceMb;"},{"type":"INSERT","lineNumber":39,"content":"        this.voiceAllowanceMin = voiceAllowanceMin;"},{"type":"INSERT","lineNumber":40,"content":"        this.smsAllowance = smsAllowance;"},{"type":"INSERT","lineNumber":41,"content":"        this.dataOverageRate = dataOverageRate;"},{"type":"INSERT","lineNumber":42,"content":"        this.voiceOverageRate = voiceOverageRate;"},{"type":"INSERT","lineNumber":43,"content":"        this.smsOverageRate = smsOverageRate;"},{"type":"INSERT","lineNumber":44,"content":"        this.familyShareCap = familyShareCap;"},{"type":"INSERT","lineNumber":45,"content":"        this.rolloverAllowed = rolloverAllowed;"},{"type":"INSERT","lineNumber":46,"content":"        this.weekendFreeVoice = weekendFreeVoice;"},{"type":"INSERT","lineNumber":47,"content":"    }"},{"type":"INSERT","lineNumber":48,"content":""},{"type":"INSERT","lineNumber":49,"content":"    public String getId() {"},{"type":"INSERT","lineNumber":50,"content":"        return id;"},{"type":"INSERT","lineNumber":51,"content":"    }"},{"type":"INSERT","lineNumber":52,"content":""},{"type":"INSERT","lineNumber":53,"content":"    public void setId(String id) {"},{"type":"INSERT","lineNumber":54,"content":"        this.id = id;"},{"type":"INSERT","lineNumber":55,"content":"    }"},{"type":"INSERT","lineNumber":56,"content":""},{"type":"INSERT","lineNumber":57,"content":"    public String getName() {"},{"type":"INSERT","lineNumber":58,"content":"        return name;"},{"type":"INSERT","lineNumber":59,"content":"    }"},{"type":"INSERT","lineNumber":60,"content":""},{"type":"INSERT","lineNumber":61,"content":"    public void setName(String name) {"},{"type":"INSERT","lineNumber":62,"content":"        this.name = name;"},{"type":"INSERT","lineNumber":63,"content":"    }"},{"type":"INSERT","lineNumber":64,"content":""},{"type":"INSERT","lineNumber":65,"content":"    public double getMonthlyRental() {"},{"type":"INSERT","lineNumber":66,"content":"        return monthlyRental;"},{"type":"INSERT","lineNumber":67,"content":"    }"},{"type":"INSERT","lineNumber":68,"content":""},{"type":"INSERT","lineNumber":69,"content":"    public void setMonthlyRental(double monthlyRental) {"},{"type":"INSERT","lineNumber":70,"content":"        this.monthlyRental = monthlyRental;"},{"type":"INSERT","lineNumber":71,"content":"    }"},{"type":"INSERT","lineNumber":72,"content":""},{"type":"INSERT","lineNumber":73,"content":"    public int getValidity() {"},{"type":"INSERT","lineNumber":74,"content":"        return validity;"},{"type":"INSERT","lineNumber":75,"content":"    }"},{"type":"INSERT","lineNumber":76,"content":""},{"type":"INSERT","lineNumber":77,"content":"    public void setValidity(int validity) {"},{"type":"INSERT","lineNumber":78,"content":"        this.validity = validity;"},{"type":"INSERT","lineNumber":79,"content":"    }"},{"type":"INSERT","lineNumber":80,"content":""},{"type":"INSERT","lineNumber":81,"content":"    public double getDataAllowanceMb() {"},{"type":"INSERT","lineNumber":82,"content":"        return dataAllowanceMb;"},{"type":"INSERT","lineNumber":83,"content":"    }"},{"type":"INSERT","lineNumber":84,"content":""},{"type":"INSERT","lineNumber":85,"content":"    public void setDataAllowanceMb(double dataAllowanceMb) {"},{"type":"INSERT","lineNumber":86,"content":"        this.dataAllowanceMb = dataAllowanceMb;"},{"type":"INSERT","lineNumber":87,"content":"    }"},{"type":"INSERT","lineNumber":88,"content":""},{"type":"INSERT","lineNumber":89,"content":"    public int getVoiceAllowanceMin() {"},{"type":"INSERT","lineNumber":90,"content":"        return voiceAllowanceMin;"},{"type":"INSERT","lineNumber":91,"content":"    }"},{"type":"INSERT","lineNumber":92,"content":""},{"type":"INSERT","lineNumber":93,"content":"    public void setVoiceAllowanceMin(int voiceAllowanceMin) {"},{"type":"INSERT","lineNumber":94,"content":"        this.voiceAllowanceMin = voiceAllowanceMin;"},{"type":"INSERT","lineNumber":95,"content":"    }"},{"type":"INSERT","lineNumber":96,"content":""},{"type":"INSERT","lineNumber":97,"content":"    public int getSmsAllowance() {"},{"type":"INSERT","lineNumber":98,"content":"        return smsAllowance;"},{"type":"INSERT","lineNumber":99,"content":"    }"},{"type":"INSERT","lineNumber":100,"content":""},{"type":"INSERT","lineNumber":101,"content":"    public void setSmsAllowance(int smsAllowance) {"},{"type":"INSERT","lineNumber":102,"content":"        this.smsAllowance = smsAllowance;"},{"type":"INSERT","lineNumber":103,"content":"    }"},{"type":"INSERT","lineNumber":104,"content":""},{"type":"INSERT","lineNumber":105,"content":"    public double getDataOverageRate() {"},{"type":"INSERT","lineNumber":106,"content":"        return dataOverageRate;"},{"type":"INSERT","lineNumber":107,"content":"    }"},{"type":"INSERT","lineNumber":108,"content":""},{"type":"INSERT","lineNumber":109,"content":"    public void setDataOverageRate(double dataOverageRate) {"},{"type":"INSERT","lineNumber":110,"content":"        this.dataOverageRate = dataOverageRate;"},{"type":"INSERT","lineNumber":111,"content":"    }"},{"type":"INSERT","lineNumber":112,"content":""},{"type":"INSERT","lineNumber":113,"content":"    public double getVoiceOverageRate() {"},{"type":"INSERT","lineNumber":114,"content":"        return voiceOverageRate;"},{"type":"INSERT","lineNumber":115,"content":"    }"},{"type":"INSERT","lineNumber":116,"content":""},{"type":"INSERT","lineNumber":117,"content":"    public void setVoiceOverageRate(double voiceOverageRate) {"},{"type":"INSERT","lineNumber":118,"content":"        this.voiceOverageRate = voiceOverageRate;"},{"type":"INSERT","lineNumber":119,"content":"    }"},{"type":"INSERT","lineNumber":120,"content":""},{"type":"INSERT","lineNumber":121,"content":"    public double getSmsOverageRate() {"},{"type":"INSERT","lineNumber":122,"content":"        return smsOverageRate;"},{"type":"INSERT","lineNumber":123,"content":"    }"},{"type":"INSERT","lineNumber":124,"content":""},{"type":"INSERT","lineNumber":125,"content":"    public void setSmsOverageRate(double smsOverageRate) {"},{"type":"INSERT","lineNumber":126,"content":"        this.smsOverageRate = smsOverageRate;"},{"type":"INSERT","lineNumber":127,"content":"    }"},{"type":"INSERT","lineNumber":128,"content":""},{"type":"INSERT","lineNumber":129,"content":"    public boolean isWeekendFreeVoice() {"},{"type":"INSERT","lineNumber":130,"content":"        return weekendFreeVoice;"},{"type":"INSERT","lineNumber":131,"content":"    }"},{"type":"INSERT","lineNumber":132,"content":""},{"type":"INSERT","lineNumber":133,"content":"    public void setWeekendFreeVoice(boolean weekendFreeVoice) {"},{"type":"INSERT","lineNumber":134,"content":"        this.weekendFreeVoice = weekendFreeVoice;"},{"type":"INSERT","lineNumber":135,"content":"    }"},{"type":"INSERT","lineNumber":136,"content":""},{"type":"INSERT","lineNumber":137,"content":"    public boolean isRolloverAllowed() {"},{"type":"INSERT","lineNumber":138,"content":"        return rolloverAllowed;"},{"type":"INSERT","lineNumber":139,"content":"    }"},{"type":"INSERT","lineNumber":140,"content":""},{"type":"INSERT","lineNumber":141,"content":"    public void setRolloverAllowed(boolean rolloverAllowed) {"},{"type":"INSERT","lineNumber":142,"content":"        this.rolloverAllowed = rolloverAllowed;"},{"type":"INSERT","lineNumber":143,"content":"    }"},{"type":"INSERT","lineNumber":144,"content":""},{"type":"INSERT","lineNumber":145,"content":"    public double getFamilyShareCap() {"},{"type":"INSERT","lineNumber":146,"content":"        return familyShareCap;"},{"type":"INSERT","lineNumber":147,"content":"    }"},{"type":"INSERT","lineNumber":148,"content":""},{"type":"INSERT","lineNumber":149,"content":"    public void setFamilyShareCap(double familyShareCap) {"},{"type":"INSERT","lineNumber":150,"content":"        this.familyShareCap = familyShareCap;"},{"type":"INSERT","lineNumber":151,"content":"    }"},{"type":"DELETE","lineNumber":29,"oldContent":"    private boolean rolloverAllowed;"},{"type":"DELETE","lineNumber":30,"oldContent":"    private double familyShareCap;     // % of pooled data a single member can use"}]},{"timestamp":1756655703005,"changes":[{"type":"DELETE","lineNumber":7,"oldContent":"    private String id;"},{"type":"MODIFY","lineNumber":10,"content":"    private String id;","oldContent":"    private String name;"},{"type":"INSERT","lineNumber":11,"content":"    private String name;"},{"type":"MODIFY","lineNumber":26,"content":"    private boolean weekendFreeVoice;","oldContent":"    private boolean weekendFreeVoice;"},{"type":"MODIFY","lineNumber":29,"content":"}","oldContent":"}"},{"type":"DELETE","lineNumber":31,"oldContent":""},{"type":"DELETE","lineNumber":32,"oldContent":"    public Plan() {"},{"type":"DELETE","lineNumber":33,"oldContent":"    }"},{"type":"DELETE","lineNumber":34,"oldContent":"    }"},{"type":"DELETE","lineNumber":35,"oldContent":""},{"type":"DELETE","lineNumber":36,"oldContent":"        this.familyShareCap = familyShareCap;"},{"type":"DELETE","lineNumber":37,"oldContent":"    public Plan(String id, String name, double monthlyRental, int validity, double dataAllowanceMb, int voiceAllowanceMin, int smsAllowance, double dataOverageRate, double voiceOverageRate, double smsOverageRate, double familyShareCap, boolean rolloverAllowed, boolean weekendFreeVoice) {"},{"type":"DELETE","lineNumber":38,"oldContent":"    public void setFamilyShareCap(double familyShareCap) {"},{"type":"DELETE","lineNumber":39,"oldContent":"        this.id = id;"},{"type":"DELETE","lineNumber":40,"oldContent":""},{"type":"DELETE","lineNumber":41,"oldContent":"        this.name = name;"},{"type":"DELETE","lineNumber":42,"oldContent":"    }"},{"type":"DELETE","lineNumber":43,"oldContent":"        this.monthlyRental = monthlyRental;"},{"type":"DELETE","lineNumber":44,"oldContent":"        return familyShareCap;"},{"type":"DELETE","lineNumber":45,"oldContent":"        this.validity = validity;"},{"type":"DELETE","lineNumber":46,"oldContent":"    public double getFamilyShareCap() {"},{"type":"DELETE","lineNumber":47,"oldContent":"        this.dataAllowanceMb = dataAllowanceMb;"},{"type":"DELETE","lineNumber":48,"oldContent":""},{"type":"DELETE","lineNumber":49,"oldContent":"        this.voiceAllowanceMin = voiceAllowanceMin;"},{"type":"DELETE","lineNumber":50,"oldContent":"    }"},{"type":"DELETE","lineNumber":51,"oldContent":"        this.smsAllowance = smsAllowance;"},{"type":"DELETE","lineNumber":52,"oldContent":"        this.rolloverAllowed = rolloverAllowed;"},{"type":"DELETE","lineNumber":53,"oldContent":"        this.dataOverageRate = dataOverageRate;"},{"type":"DELETE","lineNumber":54,"oldContent":"    public void setRolloverAllowed(boolean rolloverAllowed) {"},{"type":"DELETE","lineNumber":55,"oldContent":"        this.voiceOverageRate = voiceOverageRate;"},{"type":"DELETE","lineNumber":56,"oldContent":""},{"type":"DELETE","lineNumber":57,"oldContent":"        this.smsOverageRate = smsOverageRate;"},{"type":"DELETE","lineNumber":58,"oldContent":"    }"},{"type":"DELETE","lineNumber":59,"oldContent":"        this.familyShareCap = familyShareCap;"},{"type":"DELETE","lineNumber":60,"oldContent":"        return rolloverAllowed;"},{"type":"DELETE","lineNumber":61,"oldContent":"        this.rolloverAllowed = rolloverAllowed;"},{"type":"DELETE","lineNumber":62,"oldContent":"    public boolean isRolloverAllowed() {"},{"type":"DELETE","lineNumber":63,"oldContent":"        this.weekendFreeVoice = weekendFreeVoice;"},{"type":"DELETE","lineNumber":64,"oldContent":""},{"type":"DELETE","lineNumber":65,"oldContent":"    }"},{"type":"DELETE","lineNumber":66,"oldContent":"    }"},{"type":"DELETE","lineNumber":67,"oldContent":""},{"type":"DELETE","lineNumber":68,"oldContent":"        this.weekendFreeVoice = weekendFreeVoice;"},{"type":"DELETE","lineNumber":69,"oldContent":"    public String getId() {"},{"type":"DELETE","lineNumber":70,"oldContent":"    public void setWeekendFreeVoice(boolean weekendFreeVoice) {"},{"type":"DELETE","lineNumber":71,"oldContent":"        return id;"},{"type":"DELETE","lineNumber":72,"oldContent":""},{"type":"DELETE","lineNumber":73,"oldContent":"    }"},{"type":"DELETE","lineNumber":74,"oldContent":"    }"},{"type":"DELETE","lineNumber":75,"oldContent":""},{"type":"DELETE","lineNumber":76,"oldContent":"        return weekendFreeVoice;"},{"type":"DELETE","lineNumber":77,"oldContent":"    public void setId(String id) {"},{"type":"DELETE","lineNumber":78,"oldContent":"    public boolean isWeekendFreeVoice() {"},{"type":"DELETE","lineNumber":79,"oldContent":"        this.id = id;"},{"type":"DELETE","lineNumber":80,"oldContent":""},{"type":"DELETE","lineNumber":81,"oldContent":"    }"},{"type":"DELETE","lineNumber":82,"oldContent":"    }"},{"type":"DELETE","lineNumber":83,"oldContent":""},{"type":"DELETE","lineNumber":84,"oldContent":"        this.smsOverageRate = smsOverageRate;"},{"type":"DELETE","lineNumber":85,"oldContent":"    public String getName() {"},{"type":"DELETE","lineNumber":86,"oldContent":"    public void setSmsOverageRate(double smsOverageRate) {"},{"type":"DELETE","lineNumber":87,"oldContent":"        return name;"},{"type":"DELETE","lineNumber":88,"oldContent":""},{"type":"DELETE","lineNumber":89,"oldContent":"    }"},{"type":"DELETE","lineNumber":90,"oldContent":"    }"},{"type":"DELETE","lineNumber":91,"oldContent":""},{"type":"DELETE","lineNumber":92,"oldContent":"        return smsOverageRate;"},{"type":"DELETE","lineNumber":93,"oldContent":"    public void setName(String name) {"},{"type":"DELETE","lineNumber":94,"oldContent":"    public double getSmsOverageRate() {"},{"type":"DELETE","lineNumber":95,"oldContent":"        this.name = name;"},{"type":"DELETE","lineNumber":96,"oldContent":""},{"type":"DELETE","lineNumber":97,"oldContent":"    }"},{"type":"DELETE","lineNumber":98,"oldContent":"    }"},{"type":"DELETE","lineNumber":99,"oldContent":""},{"type":"DELETE","lineNumber":100,"oldContent":"        this.voiceOverageRate = voiceOverageRate;"},{"type":"DELETE","lineNumber":101,"oldContent":"    public double getMonthlyRental() {"},{"type":"DELETE","lineNumber":102,"oldContent":"    public void setVoiceOverageRate(double voiceOverageRate) {"},{"type":"DELETE","lineNumber":103,"oldContent":"        return monthlyRental;"},{"type":"DELETE","lineNumber":104,"oldContent":""},{"type":"DELETE","lineNumber":105,"oldContent":"    }"},{"type":"DELETE","lineNumber":106,"oldContent":"    }"},{"type":"DELETE","lineNumber":107,"oldContent":""},{"type":"DELETE","lineNumber":108,"oldContent":"        return voiceOverageRate;"},{"type":"DELETE","lineNumber":109,"oldContent":"    public void setMonthlyRental(double monthlyRental) {"},{"type":"DELETE","lineNumber":110,"oldContent":"    public double getVoiceOverageRate() {"},{"type":"DELETE","lineNumber":111,"oldContent":"        this.monthlyRental = monthlyRental;"},{"type":"DELETE","lineNumber":112,"oldContent":""},{"type":"DELETE","lineNumber":113,"oldContent":"    }"},{"type":"DELETE","lineNumber":114,"oldContent":"    }"},{"type":"DELETE","lineNumber":115,"oldContent":""},{"type":"DELETE","lineNumber":116,"oldContent":"        this.dataOverageRate = dataOverageRate;"},{"type":"DELETE","lineNumber":117,"oldContent":"    public int getValidity() {"},{"type":"DELETE","lineNumber":118,"oldContent":"    public void setDataOverageRate(double dataOverageRate) {"},{"type":"DELETE","lineNumber":119,"oldContent":"        return validity;"},{"type":"DELETE","lineNumber":120,"oldContent":""},{"type":"DELETE","lineNumber":121,"oldContent":"    }"},{"type":"DELETE","lineNumber":122,"oldContent":"    }"},{"type":"DELETE","lineNumber":123,"oldContent":""},{"type":"DELETE","lineNumber":124,"oldContent":"        return dataOverageRate;"},{"type":"DELETE","lineNumber":125,"oldContent":"    public void setValidity(int validity) {"},{"type":"DELETE","lineNumber":126,"oldContent":"    public double getDataOverageRate() {"},{"type":"DELETE","lineNumber":127,"oldContent":"        this.validity = validity;"},{"type":"DELETE","lineNumber":128,"oldContent":""},{"type":"DELETE","lineNumber":129,"oldContent":"    }"},{"type":"DELETE","lineNumber":130,"oldContent":"    }"},{"type":"DELETE","lineNumber":131,"oldContent":""},{"type":"DELETE","lineNumber":132,"oldContent":"        this.smsAllowance = smsAllowance;"},{"type":"DELETE","lineNumber":133,"oldContent":"    public double getDataAllowanceMb() {"},{"type":"DELETE","lineNumber":134,"oldContent":"    public void setSmsAllowance(int smsAllowance) {"},{"type":"DELETE","lineNumber":135,"oldContent":"        return dataAllowanceMb;"},{"type":"DELETE","lineNumber":136,"oldContent":""},{"type":"DELETE","lineNumber":137,"oldContent":"    }"},{"type":"DELETE","lineNumber":138,"oldContent":"    }"},{"type":"DELETE","lineNumber":139,"oldContent":""},{"type":"DELETE","lineNumber":140,"oldContent":"        return smsAllowance;"},{"type":"DELETE","lineNumber":141,"oldContent":"    public void setDataAllowanceMb(double dataAllowanceMb) {"},{"type":"DELETE","lineNumber":142,"oldContent":"    public int getSmsAllowance() {"},{"type":"DELETE","lineNumber":143,"oldContent":"        this.dataAllowanceMb = dataAllowanceMb;"},{"type":"DELETE","lineNumber":144,"oldContent":""},{"type":"DELETE","lineNumber":145,"oldContent":"    }"},{"type":"DELETE","lineNumber":146,"oldContent":"    }"},{"type":"DELETE","lineNumber":147,"oldContent":""},{"type":"DELETE","lineNumber":148,"oldContent":"        this.voiceAllowanceMin = voiceAllowanceMin;"},{"type":"DELETE","lineNumber":149,"oldContent":"    public int getVoiceAllowanceMin() {"},{"type":"DELETE","lineNumber":150,"oldContent":"    public void setVoiceAllowanceMin(int voiceAllowanceMin) {"},{"type":"DELETE","lineNumber":151,"oldContent":"        return voiceAllowanceMin;"},{"type":"DELETE","lineNumber":152,"oldContent":""},{"type":"DELETE","lineNumber":153,"oldContent":"    }"}]}]},"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/models/Subscription.java":{"filePath":"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/models/Subscription.java","baseContent":"package com.telecom.models;\n\npublic class Subscription {\n    \n}\n","baseTimestamp":1756464912663,"deltas":[{"timestamp":1756464995751,"changes":[{"type":"MODIFY","lineNumber":3,"content":"    private Long id;","oldContent":"    "},{"type":"INSERT","lineNumber":4,"content":"    private String name;"},{"type":"INSERT","lineNumber":5,"content":"    private double monthlyRental;"},{"type":"INSERT","lineNumber":6,"content":"    private double dataAllowanceGb;"},{"type":"INSERT","lineNumber":7,"content":"    private double voiceAllowanceMinutes;"},{"type":"INSERT","lineNumber":8,"content":"    private int smsAllowanceCount;"},{"type":"INSERT","lineNumber":9,"content":"    private boolean isFamilyShare;"},{"type":"INSERT","lineNumber":10,"content":"    private double overageRateGb = 10.0;"},{"type":"INSERT","lineNumber":11,"content":"    private double overageRateVoice = 0.5;"},{"type":"INSERT","lineNumber":12,"content":"    private double overageRateSms = 0.2;"},{"type":"INSERT","lineNumber":13,"content":"    private boolean weekendFreeVoice;"},{"type":"INSERT","lineNumber":14,"content":"    private double familyShareCap = 0.60;"}]},{"timestamp":1756465013764,"changes":[{"type":"INSERT","lineNumber":2,"content":"import lombok.AllArgsConstructor;"},{"type":"INSERT","lineNumber":3,"content":"import lombok.Data;"},{"type":"INSERT","lineNumber":4,"content":"import lombok.EqualsAndHashCode;"},{"type":"INSERT","lineNumber":5,"content":"import lombok.NoArgsConstructor;"},{"type":"INSERT","lineNumber":6,"content":""},{"type":"INSERT","lineNumber":7,"content":"@Data"},{"type":"INSERT","lineNumber":8,"content":"@NoArgsConstructor"},{"type":"INSERT","lineNumber":9,"content":"@AllArgsConstructor"},{"type":"INSERT","lineNumber":10,"content":"@EqualsAndHashCode"},{"type":"DELETE","lineNumber":5,"oldContent":"}"},{"type":"DELETE","lineNumber":7,"oldContent":""},{"type":"DELETE","lineNumber":9,"oldContent":"    private double familyShareCap = 0.60;"},{"type":"DELETE","lineNumber":11,"oldContent":"    private boolean weekendFreeVoice;"},{"type":"DELETE","lineNumber":13,"oldContent":"    private double overageRateSms = 0.2;"},{"type":"DELETE","lineNumber":15,"oldContent":"    private double overageRateVoice = 0.5;"},{"type":"INSERT","lineNumber":20,"content":"    private double overageRateVoice = 0.5;"},{"type":"INSERT","lineNumber":21,"content":"    private double overageRateSms = 0.2;"},{"type":"INSERT","lineNumber":22,"content":"    private boolean weekendFreeVoice;"},{"type":"INSERT","lineNumber":23,"content":"    private double familyShareCap = 0.60;"},{"type":"INSERT","lineNumber":24,"content":"}"},{"type":"INSERT","lineNumber":25,"content":""}]},{"timestamp":1756655703000,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"import lombok.AllArgsConstructor;"},{"type":"DELETE","lineNumber":3,"oldContent":"public class Subscription {"},{"type":"DELETE","lineNumber":4,"oldContent":"import lombok.Data;"},{"type":"DELETE","lineNumber":5,"oldContent":"    private Long id;"},{"type":"DELETE","lineNumber":6,"oldContent":"import lombok.EqualsAndHashCode;"},{"type":"DELETE","lineNumber":7,"oldContent":"    private String name;"},{"type":"DELETE","lineNumber":8,"oldContent":"import lombok.NoArgsConstructor;"},{"type":"INSERT","lineNumber":2,"content":"import lombok.*;"},{"type":"DELETE","lineNumber":10,"oldContent":"    private double monthlyRental;"},{"type":"INSERT","lineNumber":4,"content":"import java.time.LocalDate;"},{"type":"INSERT","lineNumber":5,"content":""},{"type":"INSERT","lineNumber":7,"content":"@Builder"},{"type":"DELETE","lineNumber":13,"oldContent":"    private double dataAllowanceGb;"},{"type":"DELETE","lineNumber":15,"oldContent":"@EqualsAndHashCode"},{"type":"DELETE","lineNumber":16,"oldContent":"    private double voiceAllowanceMinutes;"},{"type":"DELETE","lineNumber":17,"oldContent":"    private int smsAllowanceCount;"},{"type":"DELETE","lineNumber":18,"oldContent":"    private boolean isFamilyShare;"},{"type":"DELETE","lineNumber":19,"oldContent":"    private double overageRateGb = 10.0;"},{"type":"INSERT","lineNumber":10,"content":"public class Subscription {"},{"type":"INSERT","lineNumber":11,"content":"    private static String id;"},{"type":"INSERT","lineNumber":12,"content":"    private String customerId;"},{"type":"INSERT","lineNumber":13,"content":"    private String phoneNumber;"},{"type":"INSERT","lineNumber":14,"content":"    private String planId;"},{"type":"INSERT","lineNumber":15,"content":"    private LocalDate startDate;"},{"type":"INSERT","lineNumber":16,"content":"    private LocalDate endDate;"},{"type":"INSERT","lineNumber":18,"content":"    // Family group support"},{"type":"INSERT","lineNumber":19,"content":"    private String familyId;"},{"type":"INSERT","lineNumber":20,"content":""},{"type":"INSERT","lineNumber":21,"content":"    // MNP handling"},{"type":"INSERT","lineNumber":22,"content":"    private boolean mnpPending;"},{"type":"INSERT","lineNumber":23,"content":"    private LocalDate mnpRequestDate;"},{"type":"INSERT","lineNumber":24,"content":"    private String targetOperator;"},{"type":"DELETE","lineNumber":22,"oldContent":"    private double familyShareCap = 0.60;"},{"type":"DELETE","lineNumber":23,"oldContent":"    private double overageRateVoice = 0.5;"},{"type":"DELETE","lineNumber":24,"oldContent":"    private boolean weekendFreeVoice;"},{"type":"DELETE","lineNumber":25,"oldContent":"    private double overageRateSms = 0.2;"},{"type":"INSERT","lineNumber":26,"content":""}]}]},"/Dummy.txt":{"filePath":"/Dummy.txt","baseContent":"Subscription added","baseTimestamp":1756465033992,"deltas":[{"timestamp":1756716332187,"changes":[{"type":"MODIFY","lineNumber":0,"content":"phone number auth fixed","oldContent":"Subscription added"}]}]},"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/models/Invoice.java":{"filePath":"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/models/Invoice.java","baseContent":"package com.telecom.models;\n\npublic class Invoice {\n    private Long id;\n    private Long subscriptionId;\n    private String billingMonth;\n    private double totalCharges;\n    private double monthlyRental;\n    private double overageCharges;\n    private double roamingSurcharges;\n    private double referralDiscounts;\n    private double familyFairnessSurcharge;\n    private double tax;\n    private boolean isPaid;\n    private LocalDate dueDate;\n    private int daysUnpaid;\n}\n","baseTimestamp":1756465327610,"deltas":[{"timestamp":1756465331305,"changes":[{"type":"INSERT","lineNumber":2,"content":"import java.time.LocalDate;"},{"type":"INSERT","lineNumber":3,"content":""}]},{"timestamp":1756465344843,"changes":[{"type":"INSERT","lineNumber":2,"content":"import lombok.AllArgsConstructor;"},{"type":"INSERT","lineNumber":3,"content":"import lombok.Data;"},{"type":"INSERT","lineNumber":4,"content":"import lombok.NoArgsConstructor;"},{"type":"INSERT","lineNumber":5,"content":""},{"type":"INSERT","lineNumber":7,"content":"@Data"},{"type":"INSERT","lineNumber":8,"content":"@NoArgsConstructor"},{"type":"INSERT","lineNumber":9,"content":"@AllArgsConstructor"},{"type":"INSERT","lineNumber":10,"content":"@"},{"type":"DELETE","lineNumber":4,"oldContent":""}]},{"timestamp":1756465398318,"changes":[{"type":"DELETE","lineNumber":3,"oldContent":"import java.time.LocalDate;"},{"type":"DELETE","lineNumber":5,"oldContent":"public class Invoice {"},{"type":"INSERT","lineNumber":4,"content":"import lombok.EqualsAndHashCode;"},{"type":"INSERT","lineNumber":7,"content":"import java.time.LocalDate;"},{"type":"INSERT","lineNumber":8,"content":"@Data"},{"type":"INSERT","lineNumber":9,"content":"@NoArgsConstructor"},{"type":"INSERT","lineNumber":10,"content":"@AllArgsConstructor"},{"type":"INSERT","lineNumber":11,"content":"@EqualsAndHashCode"},{"type":"INSERT","lineNumber":12,"content":"public class Invoice {"},{"type":"DELETE","lineNumber":10,"oldContent":"@Data"},{"type":"DELETE","lineNumber":12,"oldContent":"@NoArgsConstructor"},{"type":"DELETE","lineNumber":14,"oldContent":"@AllArgsConstructor"},{"type":"DELETE","lineNumber":16,"oldContent":"@"}]},{"timestamp":1756466387554,"changes":[{"type":"INSERT","lineNumber":2,"content":"<<<<<<< HEAD"},{"type":"DELETE","lineNumber":3,"oldContent":"import lombok.EqualsAndHashCode;"},{"type":"INSERT","lineNumber":5,"content":"import lombok.EqualsAndHashCode;"},{"type":"DELETE","lineNumber":6,"oldContent":"import java.time.LocalDate;"},{"type":"INSERT","lineNumber":8,"content":"import java.time.LocalDate;"},{"type":"DELETE","lineNumber":9,"oldContent":"    private Long id;"},{"type":"DELETE","lineNumber":11,"oldContent":"    private Long subscriptionId;"},{"type":"MODIFY","lineNumber":14,"content":"    private Long id;","oldContent":"    private String billingMonth;"},{"type":"INSERT","lineNumber":15,"content":"    private Long subscriptionId;"},{"type":"INSERT","lineNumber":16,"content":"    private String billingMonth;"},{"type":"INSERT","lineNumber":27,"content":"======="},{"type":"INSERT","lineNumber":28,"content":"import lombok.*;"},{"type":"INSERT","lineNumber":29,"content":""},{"type":"INSERT","lineNumber":30,"content":"import java.time.YearMonth;"},{"type":"INSERT","lineNumber":31,"content":""},{"type":"INSERT","lineNumber":32,"content":"@Data"},{"type":"INSERT","lineNumber":33,"content":"@Builder"},{"type":"INSERT","lineNumber":34,"content":"@NoArgsConstructor"},{"type":"INSERT","lineNumber":35,"content":"@AllArgsConstructor"},{"type":"INSERT","lineNumber":36,"content":"public class Invoice {"},{"type":"INSERT","lineNumber":37,"content":"    private String id;"},{"type":"INSERT","lineNumber":38,"content":"    private String subscriptionId;"},{"type":"INSERT","lineNumber":39,"content":"    private YearMonth billingCycle;"},{"type":"INSERT","lineNumber":40,"content":""},{"type":"INSERT","lineNumber":41,"content":"    private double baseRental;"},{"type":"INSERT","lineNumber":42,"content":"    private double overageCharges;"},{"type":"INSERT","lineNumber":43,"content":"    private double roamingCharges;"},{"type":"INSERT","lineNumber":44,"content":"    private double discounts;"},{"type":"INSERT","lineNumber":45,"content":"    private double taxes;"},{"type":"INSERT","lineNumber":46,"content":"    private double totalAmount;"},{"type":"INSERT","lineNumber":47,"content":""},{"type":"INSERT","lineNumber":48,"content":"    private boolean paid;"},{"type":"INSERT","lineNumber":49,"content":"    private String notes;   // e.g., credit control, fairness surcharge info"},{"type":"INSERT","lineNumber":50,"content":">>>>>>> origin/main"}]},{"timestamp":1756466396221,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"<<<<<<< HEAD"},{"type":"DELETE","lineNumber":3,"oldContent":"import lombok.AllArgsConstructor;"},{"type":"DELETE","lineNumber":4,"oldContent":"import lombok.Data;"},{"type":"DELETE","lineNumber":5,"oldContent":"import lombok.EqualsAndHashCode;"},{"type":"DELETE","lineNumber":6,"oldContent":"import lombok.NoArgsConstructor;"},{"type":"DELETE","lineNumber":8,"oldContent":"import java.time.LocalDate;"},{"type":"DELETE","lineNumber":12,"oldContent":"@EqualsAndHashCode"},{"type":"DELETE","lineNumber":13,"oldContent":"    private Long id;"},{"type":"DELETE","lineNumber":14,"oldContent":"    private Long subscriptionId;"},{"type":"DELETE","lineNumber":16,"oldContent":"    private String billingMonth;"},{"type":"DELETE","lineNumber":17,"oldContent":"    private double totalCharges;"},{"type":"DELETE","lineNumber":18,"oldContent":"    private double monthlyRental;"},{"type":"DELETE","lineNumber":20,"oldContent":"    private double roamingSurcharges;"},{"type":"DELETE","lineNumber":21,"oldContent":"    private double referralDiscounts;"},{"type":"DELETE","lineNumber":22,"oldContent":"    private double familyFairnessSurcharge;"},{"type":"DELETE","lineNumber":23,"oldContent":"    private double tax;"},{"type":"DELETE","lineNumber":24,"oldContent":"    private boolean isPaid;"},{"type":"DELETE","lineNumber":25,"oldContent":"    private LocalDate dueDate;"},{"type":"DELETE","lineNumber":26,"oldContent":"    private int daysUnpaid;"},{"type":"DELETE","lineNumber":28,"oldContent":"======="},{"type":"DELETE","lineNumber":30,"oldContent":"import lombok.*;"},{"type":"DELETE","lineNumber":31,"oldContent":">>>>>>> origin/main"},{"type":"DELETE","lineNumber":32,"oldContent":""},{"type":"DELETE","lineNumber":33,"oldContent":"    private String notes;   // e.g., credit control, fairness surcharge info"},{"type":"DELETE","lineNumber":34,"oldContent":"import java.time.YearMonth;"},{"type":"DELETE","lineNumber":35,"oldContent":"    private boolean paid;"},{"type":"DELETE","lineNumber":36,"oldContent":""},{"type":"DELETE","lineNumber":37,"oldContent":""},{"type":"DELETE","lineNumber":38,"oldContent":"@Data"},{"type":"DELETE","lineNumber":39,"oldContent":"    private double totalAmount;"},{"type":"DELETE","lineNumber":40,"oldContent":"@Builder"},{"type":"DELETE","lineNumber":41,"oldContent":"    private double taxes;"},{"type":"DELETE","lineNumber":42,"oldContent":"@NoArgsConstructor"},{"type":"DELETE","lineNumber":43,"oldContent":"    private double discounts;"},{"type":"DELETE","lineNumber":44,"oldContent":"@AllArgsConstructor"},{"type":"DELETE","lineNumber":45,"oldContent":"    private double roamingCharges;"},{"type":"DELETE","lineNumber":46,"oldContent":"public class Invoice {"},{"type":"DELETE","lineNumber":47,"oldContent":"    private double overageCharges;"},{"type":"DELETE","lineNumber":48,"oldContent":"    private String id;"},{"type":"DELETE","lineNumber":49,"oldContent":"    private double baseRental;"},{"type":"DELETE","lineNumber":50,"oldContent":"    private String subscriptionId;"},{"type":"DELETE","lineNumber":51,"oldContent":""},{"type":"DELETE","lineNumber":52,"oldContent":"    private YearMonth billingCycle;"}]},{"timestamp":1756467039374,"changes":[{"type":"INSERT","lineNumber":2,"content":"import lombok.*;"},{"type":"INSERT","lineNumber":4,"content":"import java.time.YearMonth;"},{"type":"INSERT","lineNumber":5,"content":""},{"type":"INSERT","lineNumber":7,"content":"@Builder"},{"type":"INSERT","lineNumber":11,"content":"    private String id;"},{"type":"INSERT","lineNumber":12,"content":"    private String subscriptionId;"},{"type":"INSERT","lineNumber":13,"content":"    private YearMonth billingCycle;"},{"type":"INSERT","lineNumber":14,"content":""},{"type":"INSERT","lineNumber":15,"content":"    private double baseRental;"},{"type":"INSERT","lineNumber":17,"content":"    private double roamingCharges;"},{"type":"INSERT","lineNumber":18,"content":"    private double discounts;"},{"type":"INSERT","lineNumber":19,"content":"    private double taxes;"},{"type":"INSERT","lineNumber":20,"content":"    private double totalAmount;"},{"type":"INSERT","lineNumber":21,"content":""},{"type":"INSERT","lineNumber":22,"content":"    private boolean paid;"}]},{"timestamp":1756655703114,"changes":[{"type":"DELETE","lineNumber":4,"oldContent":"@Data"},{"type":"MODIFY","lineNumber":6,"content":"@Data","oldContent":"@NoArgsConstructor"},{"type":"INSERT","lineNumber":7,"content":"@Builder"},{"type":"INSERT","lineNumber":8,"content":"@NoArgsConstructor"},{"type":"DELETE","lineNumber":10,"oldContent":"@Builder"},{"type":"DELETE","lineNumber":11,"oldContent":"    private double overageCharges;"},{"type":"DELETE","lineNumber":12,"oldContent":"}"},{"type":"DELETE","lineNumber":13,"oldContent":""},{"type":"DELETE","lineNumber":14,"oldContent":"    private boolean paid;"},{"type":"DELETE","lineNumber":16,"oldContent":""},{"type":"DELETE","lineNumber":18,"oldContent":"    private double totalAmount;"},{"type":"DELETE","lineNumber":20,"oldContent":"    private double taxes;"},{"type":"DELETE","lineNumber":22,"oldContent":"    private double discounts;"},{"type":"INSERT","lineNumber":16,"content":"    private double overageCharges;"},{"type":"INSERT","lineNumber":18,"content":"    private double discounts;"},{"type":"INSERT","lineNumber":19,"content":"    private double taxes;"},{"type":"INSERT","lineNumber":20,"content":"    private double totalAmount;"},{"type":"INSERT","lineNumber":21,"content":""},{"type":"INSERT","lineNumber":22,"content":"    private boolean paid;"},{"type":"INSERT","lineNumber":23,"content":"}"},{"type":"INSERT","lineNumber":24,"content":""}]}]},"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/models/UsageRecord.java":{"filePath":"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/models/UsageRecord.java","baseContent":"package com.telecom.models;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport lombok.NoArgsConstructor;\n\nimport java.time.LocalDateTime;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@EqualsAndHashCode\n\npublic class UsageRecord {\n    private String subscriptionId;\n    private LocalDateTime timestamp;\n    private double data;\n    private int voiceMinutes;\n    private int smsCount;\n\n    private boolean roaming;\n    private boolean international;\n    private boolean nightTime;   // true if between 00:00–06:00\n}","baseTimestamp":1756466435370,"deltas":[{"timestamp":1756627439470,"changes":[{"type":"MODIFY","lineNumber":23,"content":"    private boolean nightTime;// true if between 00:00–06:00","oldContent":"    private boolean nightTime;   // true if between 00:00–06:00"},{"type":"INSERT","lineNumber":24,"content":""},{"type":"INSERT","lineNumber":25,"content":"    public UsageRecord() {"},{"type":"INSERT","lineNumber":26,"content":"    }"},{"type":"INSERT","lineNumber":27,"content":""},{"type":"INSERT","lineNumber":28,"content":"    public UsageRecord(String subscriptionId, LocalDateTime timestamp, double data, int voiceMinutes, int smsCount, boolean roaming, boolean international, boolean nightTime) {"},{"type":"INSERT","lineNumber":29,"content":"        this.subscriptionId = subscriptionId;"},{"type":"INSERT","lineNumber":30,"content":"        this.timestamp = timestamp;"},{"type":"INSERT","lineNumber":31,"content":"        this.data = data;"},{"type":"INSERT","lineNumber":32,"content":"        this.voiceMinutes = voiceMinutes;"},{"type":"INSERT","lineNumber":33,"content":"        this.smsCount = smsCount;"},{"type":"INSERT","lineNumber":34,"content":"        this.roaming = roaming;"},{"type":"INSERT","lineNumber":35,"content":"        this.international = international;"},{"type":"INSERT","lineNumber":36,"content":"        this.nightTime = nightTime;"},{"type":"INSERT","lineNumber":37,"content":"    }"},{"type":"INSERT","lineNumber":38,"content":""},{"type":"INSERT","lineNumber":39,"content":"    public String getSubscriptionId() {"},{"type":"INSERT","lineNumber":40,"content":"        return subscriptionId;"},{"type":"INSERT","lineNumber":41,"content":"    }"},{"type":"INSERT","lineNumber":42,"content":""},{"type":"INSERT","lineNumber":43,"content":"    public void setSubscriptionId(String subscriptionId) {"},{"type":"INSERT","lineNumber":44,"content":"        this.subscriptionId = subscriptionId;"},{"type":"INSERT","lineNumber":45,"content":"    }"},{"type":"INSERT","lineNumber":46,"content":""},{"type":"INSERT","lineNumber":47,"content":"    public LocalDateTime getTimestamp() {"},{"type":"INSERT","lineNumber":48,"content":"        return timestamp;"},{"type":"INSERT","lineNumber":49,"content":"    }"},{"type":"INSERT","lineNumber":50,"content":""},{"type":"INSERT","lineNumber":51,"content":"    public void setTimestamp(LocalDateTime timestamp) {"},{"type":"INSERT","lineNumber":52,"content":"        this.timestamp = timestamp;"},{"type":"INSERT","lineNumber":53,"content":"    }"},{"type":"INSERT","lineNumber":54,"content":""},{"type":"INSERT","lineNumber":55,"content":"    public double getData() {"},{"type":"INSERT","lineNumber":56,"content":"        return data;"},{"type":"INSERT","lineNumber":57,"content":"    }"},{"type":"INSERT","lineNumber":58,"content":""},{"type":"INSERT","lineNumber":59,"content":"    public void setData(double data) {"},{"type":"INSERT","lineNumber":60,"content":"        this.data = data;"},{"type":"INSERT","lineNumber":61,"content":"    }"},{"type":"INSERT","lineNumber":62,"content":""},{"type":"INSERT","lineNumber":63,"content":"    public int getVoiceMinutes() {"},{"type":"INSERT","lineNumber":64,"content":"        return voiceMinutes;"},{"type":"INSERT","lineNumber":65,"content":"    }"},{"type":"INSERT","lineNumber":66,"content":""},{"type":"INSERT","lineNumber":67,"content":"    public void setVoiceMinutes(int voiceMinutes) {"},{"type":"INSERT","lineNumber":68,"content":"        this.voiceMinutes = voiceMinutes;"},{"type":"INSERT","lineNumber":69,"content":"    }"},{"type":"INSERT","lineNumber":70,"content":""},{"type":"INSERT","lineNumber":71,"content":"    public int getSmsCount() {"},{"type":"INSERT","lineNumber":72,"content":"        return smsCount;"},{"type":"INSERT","lineNumber":73,"content":"    }"},{"type":"INSERT","lineNumber":74,"content":""},{"type":"INSERT","lineNumber":75,"content":"    public void setSmsCount(int smsCount) {"},{"type":"INSERT","lineNumber":76,"content":"        this.smsCount = smsCount;"},{"type":"INSERT","lineNumber":77,"content":"    }"},{"type":"INSERT","lineNumber":78,"content":""},{"type":"INSERT","lineNumber":79,"content":"    public boolean isRoaming() {"},{"type":"INSERT","lineNumber":80,"content":"        return roaming;"},{"type":"INSERT","lineNumber":81,"content":"    }"},{"type":"INSERT","lineNumber":82,"content":""},{"type":"INSERT","lineNumber":83,"content":"    public void setRoaming(boolean roaming) {"},{"type":"INSERT","lineNumber":84,"content":"        this.roaming = roaming;"},{"type":"INSERT","lineNumber":85,"content":"    }"},{"type":"INSERT","lineNumber":86,"content":""},{"type":"INSERT","lineNumber":87,"content":"    public boolean isNightTime() {"},{"type":"INSERT","lineNumber":88,"content":"        return nightTime;"},{"type":"INSERT","lineNumber":89,"content":"    }"},{"type":"INSERT","lineNumber":90,"content":""},{"type":"INSERT","lineNumber":91,"content":"    public void setNightTime(boolean nightTime) {"},{"type":"INSERT","lineNumber":92,"content":"        this.nightTime = nightTime;"},{"type":"INSERT","lineNumber":93,"content":"    }"},{"type":"INSERT","lineNumber":94,"content":""},{"type":"INSERT","lineNumber":95,"content":"    public boolean isInternational() {"},{"type":"INSERT","lineNumber":96,"content":"        return international;"},{"type":"INSERT","lineNumber":97,"content":"    }"},{"type":"INSERT","lineNumber":98,"content":""},{"type":"INSERT","lineNumber":99,"content":"    public void setInternational(boolean international) {"},{"type":"INSERT","lineNumber":100,"content":"        this.international = international;"},{"type":"INSERT","lineNumber":101,"content":"    }"}]},{"timestamp":1756643145863,"changes":[{"type":"MODIFY","lineNumber":17,"content":"    private double dataGB;","oldContent":"    private double data;"},{"type":"DELETE","lineNumber":25,"oldContent":"}"},{"type":"DELETE","lineNumber":28,"oldContent":"    }"},{"type":"DELETE","lineNumber":29,"oldContent":"        this.international = international;"},{"type":"DELETE","lineNumber":31,"oldContent":"    public void setInternational(boolean international) {"},{"type":"DELETE","lineNumber":33,"oldContent":""},{"type":"DELETE","lineNumber":35,"oldContent":"    }"},{"type":"DELETE","lineNumber":37,"oldContent":"        return international;"},{"type":"DELETE","lineNumber":39,"oldContent":"    public boolean isInternational() {"},{"type":"DELETE","lineNumber":41,"oldContent":""},{"type":"DELETE","lineNumber":43,"oldContent":"    }"},{"type":"DELETE","lineNumber":45,"oldContent":"        this.nightTime = nightTime;"},{"type":"DELETE","lineNumber":47,"oldContent":"    public void setNightTime(boolean nightTime) {"},{"type":"DELETE","lineNumber":49,"oldContent":""},{"type":"DELETE","lineNumber":51,"oldContent":"    }"},{"type":"DELETE","lineNumber":53,"oldContent":"        return nightTime;"},{"type":"DELETE","lineNumber":55,"oldContent":"    public boolean isNightTime() {"},{"type":"DELETE","lineNumber":57,"oldContent":""},{"type":"DELETE","lineNumber":59,"oldContent":"    }"},{"type":"DELETE","lineNumber":61,"oldContent":"        this.roaming = roaming;"},{"type":"DELETE","lineNumber":63,"oldContent":"    public void setRoaming(boolean roaming) {"},{"type":"DELETE","lineNumber":65,"oldContent":""},{"type":"DELETE","lineNumber":67,"oldContent":"    }"},{"type":"DELETE","lineNumber":69,"oldContent":"        return roaming;"},{"type":"DELETE","lineNumber":71,"oldContent":"    public boolean isRoaming() {"},{"type":"DELETE","lineNumber":73,"oldContent":""},{"type":"DELETE","lineNumber":75,"oldContent":"    }"},{"type":"DELETE","lineNumber":77,"oldContent":"        this.smsCount = smsCount;"},{"type":"DELETE","lineNumber":79,"oldContent":"    public void setSmsCount(int smsCount) {"},{"type":"DELETE","lineNumber":81,"oldContent":""},{"type":"DELETE","lineNumber":83,"oldContent":"    }"},{"type":"DELETE","lineNumber":85,"oldContent":"        return smsCount;"},{"type":"DELETE","lineNumber":87,"oldContent":"    public int getSmsCount() {"},{"type":"INSERT","lineNumber":57,"content":"    }"},{"type":"INSERT","lineNumber":59,"content":"    public void setData(double data) {"},{"type":"INSERT","lineNumber":60,"content":"        this.data = data;"},{"type":"INSERT","lineNumber":62,"content":""},{"type":"INSERT","lineNumber":63,"content":"    public int getVoiceMinutes() {"},{"type":"INSERT","lineNumber":64,"content":"        return voiceMinutes;"},{"type":"DELETE","lineNumber":93,"oldContent":"        this.voiceMinutes = voiceMinutes;"},{"type":"DELETE","lineNumber":94,"oldContent":"    public void setData(double data) {"},{"type":"DELETE","lineNumber":96,"oldContent":"        this.data = data;"},{"type":"INSERT","lineNumber":68,"content":"        this.voiceMinutes = voiceMinutes;"},{"type":"INSERT","lineNumber":69,"content":"    }"},{"type":"INSERT","lineNumber":71,"content":"    public int getSmsCount() {"},{"type":"INSERT","lineNumber":72,"content":"        return smsCount;"},{"type":"INSERT","lineNumber":74,"content":""},{"type":"INSERT","lineNumber":75,"content":"    public void setSmsCount(int smsCount) {"},{"type":"INSERT","lineNumber":76,"content":"        this.smsCount = smsCount;"},{"type":"DELETE","lineNumber":101,"oldContent":"        return voiceMinutes;"},{"type":"DELETE","lineNumber":102,"oldContent":"    public int getVoiceMinutes() {"},{"type":"INSERT","lineNumber":79,"content":"    public boolean isRoaming() {"},{"type":"INSERT","lineNumber":80,"content":"        return roaming;"},{"type":"INSERT","lineNumber":81,"content":"    }"},{"type":"INSERT","lineNumber":82,"content":""},{"type":"INSERT","lineNumber":83,"content":"    public void setRoaming(boolean roaming) {"},{"type":"INSERT","lineNumber":84,"content":"        this.roaming = roaming;"},{"type":"INSERT","lineNumber":85,"content":"    }"},{"type":"INSERT","lineNumber":86,"content":""},{"type":"INSERT","lineNumber":87,"content":"    public boolean isNightTime() {"},{"type":"INSERT","lineNumber":88,"content":"        return nightTime;"},{"type":"INSERT","lineNumber":89,"content":"    }"},{"type":"INSERT","lineNumber":90,"content":""},{"type":"INSERT","lineNumber":91,"content":"    public void setNightTime(boolean nightTime) {"},{"type":"INSERT","lineNumber":92,"content":"        this.nightTime = nightTime;"},{"type":"INSERT","lineNumber":93,"content":"    }"},{"type":"INSERT","lineNumber":94,"content":""},{"type":"INSERT","lineNumber":95,"content":"    public boolean isInternational() {"},{"type":"INSERT","lineNumber":96,"content":"        return international;"},{"type":"INSERT","lineNumber":97,"content":"    }"},{"type":"INSERT","lineNumber":98,"content":""},{"type":"INSERT","lineNumber":99,"content":"    public void setInternational(boolean international) {"},{"type":"INSERT","lineNumber":100,"content":"        this.international = international;"},{"type":"INSERT","lineNumber":101,"content":"    }"},{"type":"INSERT","lineNumber":102,"content":"}"}]},{"timestamp":1756643177251,"changes":[{"type":"MODIFY","lineNumber":17,"content":"    private double data;","oldContent":"    private double dataGB;"},{"type":"INSERT","lineNumber":42,"content":""},{"type":"INSERT","lineNumber":43,"content":"    public void setSubscriptionId(String subscriptionId) {"},{"type":"INSERT","lineNumber":44,"content":"        this.subscriptionId = subscriptionId;"},{"type":"INSERT","lineNumber":46,"content":""},{"type":"INSERT","lineNumber":47,"content":"    public LocalDateTime getTimestamp() {"},{"type":"INSERT","lineNumber":48,"content":"        return timestamp;"},{"type":"INSERT","lineNumber":49,"content":"    }"},{"type":"INSERT","lineNumber":50,"content":""},{"type":"INSERT","lineNumber":51,"content":"    public void setTimestamp(LocalDateTime timestamp) {"},{"type":"INSERT","lineNumber":52,"content":"        this.timestamp = timestamp;"},{"type":"INSERT","lineNumber":53,"content":"    }"},{"type":"INSERT","lineNumber":54,"content":""},{"type":"INSERT","lineNumber":55,"content":"    public double getData() {"},{"type":"INSERT","lineNumber":56,"content":"        return data;"},{"type":"INSERT","lineNumber":57,"content":"    }"},{"type":"INSERT","lineNumber":58,"content":""},{"type":"INSERT","lineNumber":61,"content":"    }"},{"type":"DELETE","lineNumber":46,"oldContent":""},{"type":"DELETE","lineNumber":47,"oldContent":"    public void setSubscriptionId(String subscriptionId) {"},{"type":"DELETE","lineNumber":50,"oldContent":"        this.subscriptionId = subscriptionId;"},{"type":"DELETE","lineNumber":52,"oldContent":"        this.voiceMinutes = voiceMinutes;"},{"type":"INSERT","lineNumber":67,"content":"    public void setVoiceMinutes(int voiceMinutes) {"},{"type":"INSERT","lineNumber":68,"content":"        this.voiceMinutes = voiceMinutes;"},{"type":"DELETE","lineNumber":55,"oldContent":"    public LocalDateTime getTimestamp() {"},{"type":"INSERT","lineNumber":70,"content":""},{"type":"DELETE","lineNumber":58,"oldContent":"        return timestamp;"},{"type":"DELETE","lineNumber":59,"oldContent":""},{"type":"INSERT","lineNumber":74,"content":""},{"type":"INSERT","lineNumber":77,"content":"    }"},{"type":"DELETE","lineNumber":64,"oldContent":"    public void setTimestamp(LocalDateTime timestamp) {"},{"type":"DELETE","lineNumber":67,"oldContent":"        this.timestamp = timestamp;"},{"type":"DELETE","lineNumber":70,"oldContent":"    }"},{"type":"DELETE","lineNumber":73,"oldContent":""},{"type":"DELETE","lineNumber":76,"oldContent":"    public double getData() {"},{"type":"DELETE","lineNumber":79,"oldContent":"        return data;"},{"type":"DELETE","lineNumber":82,"oldContent":""},{"type":"DELETE","lineNumber":83,"oldContent":"    }"},{"type":"DELETE","lineNumber":85,"oldContent":"    }"},{"type":"DELETE","lineNumber":87,"oldContent":""},{"type":"DELETE","lineNumber":91,"oldContent":"    public void setVoiceMinutes(int voiceMinutes) {"},{"type":"DELETE","lineNumber":95,"oldContent":""},{"type":"DELETE","lineNumber":96,"oldContent":"    }"},{"type":"DELETE","lineNumber":98,"oldContent":"    }"},{"type":"DELETE","lineNumber":100,"oldContent":""}]},{"timestamp":1756655703007,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"import lombok.AllArgsConstructor;"},{"type":"DELETE","lineNumber":3,"oldContent":"import lombok.Data;"},{"type":"DELETE","lineNumber":4,"oldContent":"import lombok.EqualsAndHashCode;"},{"type":"DELETE","lineNumber":5,"oldContent":"import lombok.NoArgsConstructor;"},{"type":"INSERT","lineNumber":2,"content":"import lombok.*;"},{"type":"DELETE","lineNumber":13,"oldContent":""},{"type":"INSERT","lineNumber":10,"content":"@Builder"},{"type":"DELETE","lineNumber":24,"oldContent":""},{"type":"DELETE","lineNumber":25,"oldContent":"    public UsageRecord() {"},{"type":"DELETE","lineNumber":26,"oldContent":"    }"},{"type":"DELETE","lineNumber":27,"oldContent":""},{"type":"DELETE","lineNumber":28,"oldContent":"    public UsageRecord(String subscriptionId, LocalDateTime timestamp, double data, int voiceMinutes, int smsCount, boolean roaming, boolean international, boolean nightTime) {"},{"type":"DELETE","lineNumber":29,"oldContent":"        this.subscriptionId = subscriptionId;"},{"type":"DELETE","lineNumber":30,"oldContent":"        this.timestamp = timestamp;"},{"type":"DELETE","lineNumber":31,"oldContent":"        this.data = data;"},{"type":"DELETE","lineNumber":32,"oldContent":"        this.voiceMinutes = voiceMinutes;"},{"type":"DELETE","lineNumber":33,"oldContent":"        this.smsCount = smsCount;"},{"type":"DELETE","lineNumber":34,"oldContent":"        this.roaming = roaming;"},{"type":"DELETE","lineNumber":35,"oldContent":"        this.international = international;"},{"type":"DELETE","lineNumber":36,"oldContent":"        this.nightTime = nightTime;"},{"type":"DELETE","lineNumber":37,"oldContent":"    }"},{"type":"DELETE","lineNumber":38,"oldContent":""},{"type":"DELETE","lineNumber":39,"oldContent":"    public String getSubscriptionId() {"},{"type":"DELETE","lineNumber":40,"oldContent":"        return subscriptionId;"},{"type":"DELETE","lineNumber":41,"oldContent":"    }"},{"type":"DELETE","lineNumber":42,"oldContent":""},{"type":"DELETE","lineNumber":43,"oldContent":"    }"},{"type":"DELETE","lineNumber":44,"oldContent":"    public void setSubscriptionId(String subscriptionId) {"},{"type":"DELETE","lineNumber":45,"oldContent":"    public void setData(double data) {"},{"type":"DELETE","lineNumber":46,"oldContent":"        this.subscriptionId = subscriptionId;"},{"type":"DELETE","lineNumber":47,"oldContent":"        this.data = data;"},{"type":"DELETE","lineNumber":48,"oldContent":""},{"type":"DELETE","lineNumber":49,"oldContent":""},{"type":"DELETE","lineNumber":50,"oldContent":"    public LocalDateTime getTimestamp() {"},{"type":"DELETE","lineNumber":51,"oldContent":"        return timestamp;"},{"type":"DELETE","lineNumber":52,"oldContent":"    public int getVoiceMinutes() {"},{"type":"DELETE","lineNumber":53,"oldContent":"    }"},{"type":"DELETE","lineNumber":54,"oldContent":"        return voiceMinutes;"},{"type":"DELETE","lineNumber":55,"oldContent":""},{"type":"DELETE","lineNumber":56,"oldContent":"    public void setTimestamp(LocalDateTime timestamp) {"},{"type":"DELETE","lineNumber":57,"oldContent":"    }"},{"type":"DELETE","lineNumber":58,"oldContent":"        this.timestamp = timestamp;"},{"type":"DELETE","lineNumber":59,"oldContent":"    }"},{"type":"DELETE","lineNumber":60,"oldContent":""},{"type":"DELETE","lineNumber":61,"oldContent":""},{"type":"DELETE","lineNumber":62,"oldContent":"    }"},{"type":"DELETE","lineNumber":63,"oldContent":"    public double getData() {"},{"type":"DELETE","lineNumber":64,"oldContent":"        return data;"},{"type":"DELETE","lineNumber":65,"oldContent":"    public int getSmsCount() {"},{"type":"DELETE","lineNumber":66,"oldContent":"    }"},{"type":"DELETE","lineNumber":67,"oldContent":"        return smsCount;"},{"type":"DELETE","lineNumber":68,"oldContent":""},{"type":"DELETE","lineNumber":69,"oldContent":"    }"},{"type":"DELETE","lineNumber":70,"oldContent":"    }"},{"type":"DELETE","lineNumber":71,"oldContent":"    public void setSmsCount(int smsCount) {"},{"type":"DELETE","lineNumber":72,"oldContent":"        this.smsCount = smsCount;"},{"type":"DELETE","lineNumber":73,"oldContent":""},{"type":"DELETE","lineNumber":74,"oldContent":"    public boolean isRoaming() {"},{"type":"DELETE","lineNumber":75,"oldContent":"        return roaming;"},{"type":"DELETE","lineNumber":76,"oldContent":"    public void setVoiceMinutes(int voiceMinutes) {"},{"type":"DELETE","lineNumber":77,"oldContent":"        this.voiceMinutes = voiceMinutes;"},{"type":"DELETE","lineNumber":78,"oldContent":"    }"},{"type":"DELETE","lineNumber":79,"oldContent":""},{"type":"DELETE","lineNumber":80,"oldContent":""},{"type":"DELETE","lineNumber":81,"oldContent":"    public void setRoaming(boolean roaming) {"},{"type":"DELETE","lineNumber":82,"oldContent":"        this.roaming = roaming;"},{"type":"DELETE","lineNumber":83,"oldContent":""},{"type":"DELETE","lineNumber":84,"oldContent":"    }"},{"type":"DELETE","lineNumber":85,"oldContent":""},{"type":"DELETE","lineNumber":86,"oldContent":"    }"},{"type":"DELETE","lineNumber":87,"oldContent":"    public boolean isNightTime() {"},{"type":"DELETE","lineNumber":88,"oldContent":"        return nightTime;"},{"type":"DELETE","lineNumber":89,"oldContent":"    }"},{"type":"DELETE","lineNumber":90,"oldContent":""},{"type":"DELETE","lineNumber":91,"oldContent":"    public void setNightTime(boolean nightTime) {"},{"type":"DELETE","lineNumber":92,"oldContent":"        this.nightTime = nightTime;"},{"type":"DELETE","lineNumber":93,"oldContent":"    }"},{"type":"DELETE","lineNumber":94,"oldContent":""},{"type":"DELETE","lineNumber":95,"oldContent":"    public boolean isInternational() {"},{"type":"DELETE","lineNumber":96,"oldContent":"        return international;"},{"type":"DELETE","lineNumber":97,"oldContent":"    }"},{"type":"DELETE","lineNumber":98,"oldContent":""},{"type":"DELETE","lineNumber":99,"oldContent":"    public void setInternational(boolean international) {"},{"type":"DELETE","lineNumber":100,"oldContent":"        this.international = international;"},{"type":"DELETE","lineNumber":101,"oldContent":"    }"}]},{"timestamp":1756661151427,"changes":[{"type":"DELETE","lineNumber":7,"oldContent":"@Builder"},{"type":"INSERT","lineNumber":10,"content":"@Builder"},{"type":"INSERT","lineNumber":13,"content":"    private String familyId; // To link usage to a family group"}]}]},"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/service/interfaces/BillingService.java":{"filePath":"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/service/interfaces/BillingService.java","baseContent":"package com.telecom.service.interfaces;\n\nimport com.telecom.models.Invoice;\nimport com.telecom.models.Plan;\nimport com.telecom.models.Subscription;\nimport com.telecom.models.UsageRecord;\n\nimport java.util.List;\n\n    public interface BillingService {\n        Invoice generateInvoice(Subscription subscription, Plan plan, List<UsageRecord> usageRecords);\n\n        double rateUsage(UsageRecord usage, Plan plan);\n\n        double calculateVoiceCharge(UsageRecord usage, Plan plan);\n\n        double applyNightDiscount(double amount, UsageRecord usage);\n    }\n","baseTimestamp":1756627439470,"deltas":[{"timestamp":1756661151737,"changes":[{"type":"DELETE","lineNumber":9,"oldContent":"    public interface BillingService {"},{"type":"DELETE","lineNumber":10,"oldContent":"        Invoice generateInvoice(Subscription subscription, Plan plan, List<UsageRecord> usageRecords);"},{"type":"INSERT","lineNumber":9,"content":"public interface BillingService {"},{"type":"INSERT","lineNumber":10,"content":"    Invoice generateInvoice(Subscription subscription, Plan plan, List<UsageRecord> memberUsage, List<UsageRecord> allUsage);"},{"type":"MODIFY","lineNumber":12,"content":"    double rateUsage(UsageRecord usage, Plan plan);","oldContent":"        double rateUsage(UsageRecord usage, Plan plan);"},{"type":"MODIFY","lineNumber":14,"content":"    double calculateVoiceCharge(UsageRecord usage, Plan plan);","oldContent":"        double calculateVoiceCharge(UsageRecord usage, Plan plan);"},{"type":"DELETE","lineNumber":16,"oldContent":"        double applyNightDiscount(double amount, UsageRecord usage);"},{"type":"DELETE","lineNumber":17,"oldContent":"    }"},{"type":"INSERT","lineNumber":16,"content":"    double applyNightDiscount(double amount, UsageRecord usage);"},{"type":"INSERT","lineNumber":18,"content":"    void payInvoice(String invoiceId);"},{"type":"INSERT","lineNumber":19,"content":"}"},{"type":"INSERT","lineNumber":20,"content":""}]}]},"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/service/impl/BillingServiceImpl.java":{"filePath":"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/service/impl/BillingServiceImpl.java","baseContent":"package com.telecom.service.impl;\n\nimport com.telecom.models.*;\nimport com.telecom.service.interfaces.BillingService;\nimport com.telecom.utils.TaxUtils;\n\nimport java.time.DayOfWeek;\nimport java.util.List;\n\npublic class BillingServiceImpl implements BillingService {\n\n    @Override\n    public Invoice generateInvoice(Subscription subscription, Plan plan, List<UsageRecord> usageRecords) {\n        double baseRental = plan.getMonthlyRental();\n        double usageCharges = 0.0;\n        double discounts = 0.0;\n\n        for (UsageRecord record : usageRecords) {\n            double recordCharge = rateUsage(record, plan);\n\n            // Apply night discount if applicable\n            recordCharge = applyNightDiscount(recordCharge, record);\n\n            usageCharges += recordCharge;\n        }\n\n        // Taxes\n        double taxes = TaxUtils.applyGST(baseRental + usageCharges);\n\n        Invoice invoice = new Invoice();\n        invoice.setSubscriptionId(subscription.getId());   // use instance, not class\n        invoice.setBaseRental(baseRental);\n        invoice.setOverageCharges(usageCharges);\n        invoice.setDiscounts(discounts);\n        invoice.setTaxes(taxes);\n        invoice.setTotalAmount(baseRental + usageCharges + taxes - discounts);\n        invoice.setPaid(false);\n\n        return invoice;\n\n    }\n\n    @Override\n    public double rateUsage(UsageRecord usage, Plan plan) {\n        double total = 0.0;\n\n        // DATA\n        if (usage.getData() > plan.getDataAllowanceMb()) {\n            double extraData = usage.getData() - plan.getDataAllowanceMb();\n            total += extraData * plan.getDataOverageRate();\n        }\n\n        // VOICE\n        total += calculateVoiceCharge(usage, plan);\n\n        // SMS\n        if (usage.getSmsCount() > plan.getSmsAllowance()) {\n            int extraSms = usage.getSmsCount() - plan.getSmsAllowance();\n            total += extraSms * plan.getSmsOverageRate();\n        }\n\n        // Roaming / International surcharge\n        if (usage.isRoaming()) {\n            total *= 1.5;\n        }\n        if (usage.isInternational()) {\n            total *= 3.0;\n        }\n\n        return total;\n    }\n\n    @Override\n    public double calculateVoiceCharge(UsageRecord usage, Plan plan) {\n        int usedMinutes = usage.getVoiceMinutes();\n\n        // Weekend free minutes\n        boolean isWeekend = usage.getTimestamp().getDayOfWeek() == DayOfWeek.SATURDAY ||\n                usage.getTimestamp().getDayOfWeek() == DayOfWeek.SUNDAY;\n\n        if (plan.isWeekendFreeVoice() && isWeekend) {\n            return 0.0;\n        }\n\n        // Normal allowance check\n        if (usedMinutes > plan.getVoiceAllowanceMin()) {\n            int extraMinutes = usedMinutes - plan.getVoiceAllowanceMin();\n            return extraMinutes * plan.getVoiceOverageRate();\n        }\n        return 0.0;\n    }\n\n    @Override\n    public double applyNightDiscount(double amount, UsageRecord usage) {\n        if (usage.isNightTime()) {\n            return amount * 0.5;\n        }\n        return amount;\n    }\n}\n\n","baseTimestamp":1756627439465,"deltas":[{"timestamp":1756661151675,"changes":[{"type":"INSERT","lineNumber":3,"content":"import com.telecom.repository.interfaces.InvoiceRepo;"},{"type":"INSERT","lineNumber":6,"content":"import lombok.RequiredArgsConstructor;"},{"type":"INSERT","lineNumber":10,"content":"import java.util.stream.Collectors;"},{"type":"INSERT","lineNumber":12,"content":"@RequiredArgsConstructor"},{"type":"INSERT","lineNumber":15,"content":"    private final InvoiceRepo invoiceRepo;"},{"type":"INSERT","lineNumber":16,"content":""},{"type":"INSERT","lineNumber":17,"content":"    private static final double FAMILY_FAIRNESS_SURCHARGE = 50.0;"},{"type":"INSERT","lineNumber":18,"content":"    private static final double FAMILY_SHARE_CAP_THRESHOLD = 0.6; // 60%"},{"type":"INSERT","lineNumber":19,"content":""},{"type":"DELETE","lineNumber":12,"oldContent":"    public Invoice generateInvoice(Subscription subscription, Plan plan, List<UsageRecord> usageRecords) {"},{"type":"INSERT","lineNumber":21,"content":"    public Invoice generateInvoice(Subscription subscription, Plan plan, List<UsageRecord> memberUsage, List<UsageRecord> allUsage) {"},{"type":"INSERT","lineNumber":22,"content":"        if (plan.isFamilyPlan()) {"},{"type":"INSERT","lineNumber":23,"content":"            return generateFamilyInvoice(subscription, plan, memberUsage, allUsage);"},{"type":"INSERT","lineNumber":24,"content":"        } else {"},{"type":"INSERT","lineNumber":25,"content":"            return generateIndividualInvoice(subscription, plan, memberUsage);"},{"type":"INSERT","lineNumber":26,"content":"        }"},{"type":"INSERT","lineNumber":27,"content":"    }"},{"type":"INSERT","lineNumber":28,"content":""},{"type":"INSERT","lineNumber":29,"content":"    private Invoice generateIndividualInvoice(Subscription subscription, Plan plan, List<UsageRecord> usageRecords) {"},{"type":"DELETE","lineNumber":19,"oldContent":""},{"type":"DELETE","lineNumber":20,"oldContent":"            // Apply night discount if applicable"},{"type":"DELETE","lineNumber":22,"oldContent":""},{"type":"DELETE","lineNumber":26,"oldContent":"        // Taxes"},{"type":"DELETE","lineNumber":30,"oldContent":"        invoice.setSubscriptionId(subscription.getId());   // use instance, not class"},{"type":"INSERT","lineNumber":43,"content":"        invoice.setSubscriptionId(subscription.getId());"},{"type":"DELETE","lineNumber":38,"oldContent":"        return invoice;"},{"type":"INSERT","lineNumber":51,"content":"        return invoiceRepo.save(invoice);"},{"type":"INSERT","lineNumber":52,"content":"    }"},{"type":"INSERT","lineNumber":54,"content":"    private Invoice generateFamilyInvoice(Subscription subscription, Plan plan, List<UsageRecord> memberUsage, List<UsageRecord> allUsage) {"},{"type":"INSERT","lineNumber":55,"content":"        double baseRental = plan.getMonthlyRental();"},{"type":"INSERT","lineNumber":56,"content":"        double overageCharges = 0.0;"},{"type":"INSERT","lineNumber":57,"content":"        double fairnessSurcharge = 0.0;"},{"type":"INSERT","lineNumber":58,"content":""},{"type":"INSERT","lineNumber":59,"content":"        // --- Data Overage Calculation (Pooled) ---"},{"type":"INSERT","lineNumber":60,"content":"        List<UsageRecord> familyUsage = allUsage.stream()"},{"type":"INSERT","lineNumber":61,"content":"                .filter(u -> subscription.getFamilyId().equals(u.getFamilyId()))"},{"type":"INSERT","lineNumber":62,"content":"                .collect(Collectors.toList());"},{"type":"INSERT","lineNumber":63,"content":""},{"type":"INSERT","lineNumber":64,"content":"        double totalFamilyDataUsage = familyUsage.stream().mapToDouble(UsageRecord::getData).sum();"},{"type":"INSERT","lineNumber":65,"content":"        double familyDataAllowance = plan.getDataAllowanceMb();"},{"type":"INSERT","lineNumber":66,"content":""},{"type":"INSERT","lineNumber":67,"content":"        if (totalFamilyDataUsage > familyDataAllowance) {"},{"type":"INSERT","lineNumber":68,"content":"            double overageData = totalFamilyDataUsage - familyDataAllowance;"},{"type":"INSERT","lineNumber":69,"content":"            // Distribute overage charge based on individual's contribution to total usage"},{"type":"INSERT","lineNumber":70,"content":"            double memberDataUsage = memberUsage.stream().mapToDouble(UsageRecord::getData).sum();"},{"type":"INSERT","lineNumber":71,"content":"            double memberContributionRatio = memberDataUsage / totalFamilyDataUsage;"},{"type":"INSERT","lineNumber":72,"content":"            overageCharges += (overageData * plan.getDataOverageRate()) * memberContributionRatio;"},{"type":"INSERT","lineNumber":73,"content":"        }"},{"type":"INSERT","lineNumber":74,"content":""},{"type":"INSERT","lineNumber":75,"content":"        // --- Family Fairness Surcharge ---"},{"type":"INSERT","lineNumber":76,"content":"        double memberDataUsage = memberUsage.stream().mapToDouble(UsageRecord::getData).sum();"},{"type":"INSERT","lineNumber":77,"content":"        if (memberDataUsage > (familyDataAllowance * FAMILY_SHARE_CAP_THRESHOLD)) {"},{"type":"INSERT","lineNumber":78,"content":"            fairnessSurcharge = FAMILY_FAIRNESS_SURCHARGE;"},{"type":"INSERT","lineNumber":79,"content":"        }"},{"type":"INSERT","lineNumber":80,"content":""},{"type":"INSERT","lineNumber":81,"content":"        // --- Voice and SMS Overage (Individual) ---"},{"type":"INSERT","lineNumber":82,"content":"        double voiceAndSmsOverage = 0.0;"},{"type":"INSERT","lineNumber":83,"content":"        for (UsageRecord record : memberUsage) {"},{"type":"INSERT","lineNumber":84,"content":"            // Don't double-count data charges, just calculate voice/sms"},{"type":"INSERT","lineNumber":85,"content":"            voiceAndSmsOverage += calculateVoiceCharge(record, plan);"},{"type":"INSERT","lineNumber":86,"content":"            if (record.getSmsCount() > plan.getSmsAllowance()) {"},{"type":"INSERT","lineNumber":87,"content":"                int extraSms = record.getSmsCount() - plan.getSmsAllowance();"},{"type":"INSERT","lineNumber":88,"content":"                voiceAndSmsOverage += extraSms * plan.getSmsOverageRate();"},{"type":"INSERT","lineNumber":89,"content":"            }"},{"type":"INSERT","lineNumber":90,"content":"        }"},{"type":"INSERT","lineNumber":91,"content":""},{"type":"INSERT","lineNumber":92,"content":"        double totalCharges = baseRental + overageCharges + fairnessSurcharge + voiceAndSmsOverage;"},{"type":"INSERT","lineNumber":93,"content":"        double taxes = TaxUtils.applyGST(totalCharges);"},{"type":"INSERT","lineNumber":94,"content":""},{"type":"INSERT","lineNumber":95,"content":"        Invoice invoice = new Invoice();"},{"type":"INSERT","lineNumber":96,"content":"        invoice.setSubscriptionId(subscription.getId());"},{"type":"INSERT","lineNumber":97,"content":"        invoice.setBaseRental(baseRental);"},{"type":"INSERT","lineNumber":98,"content":"        invoice.setOverageCharges(overageCharges + voiceAndSmsOverage);"},{"type":"INSERT","lineNumber":99,"content":"        // Add fairness surcharge to discounts field for now for visibility"},{"type":"INSERT","lineNumber":100,"content":"        invoice.setDiscounts(-fairnessSurcharge); // Negative discount is a charge"},{"type":"INSERT","lineNumber":101,"content":"        invoice.setTaxes(taxes);"},{"type":"INSERT","lineNumber":102,"content":"        invoice.setTotalAmount(totalCharges + taxes);"},{"type":"INSERT","lineNumber":103,"content":"        invoice.setPaid(false);"},{"type":"INSERT","lineNumber":104,"content":""},{"type":"INSERT","lineNumber":105,"content":"        return invoiceRepo.save(invoice);"},{"type":"INSERT","lineNumber":108,"content":""},{"type":"INSERT","lineNumber":166,"content":""},{"type":"INSERT","lineNumber":167,"content":"    @Override"},{"type":"INSERT","lineNumber":168,"content":"    public void payInvoice(String invoiceId) {"},{"type":"INSERT","lineNumber":169,"content":"        Invoice invoice = invoiceRepo.findById(invoiceId)"},{"type":"INSERT","lineNumber":170,"content":"                .orElseThrow(() -> new RuntimeException(\"Invoice not found\"));"},{"type":"INSERT","lineNumber":171,"content":"        invoice.setPaid(true);"},{"type":"INSERT","lineNumber":172,"content":"        invoiceRepo.update(invoice);"},{"type":"INSERT","lineNumber":173,"content":"    }"},{"type":"DELETE","lineNumber":101,"oldContent":""}]},{"timestamp":1756707312297,"changes":[{"type":"INSERT","lineNumber":2,"content":"import com.telecom.exceptions.BillingException;"},{"type":"DELETE","lineNumber":6,"oldContent":""},{"type":"INSERT","lineNumber":8,"content":""},{"type":"INSERT","lineNumber":10,"content":"import java.time.LocalDate;"},{"type":"INSERT","lineNumber":11,"content":"import java.time.YearMonth;"},{"type":"DELETE","lineNumber":10,"oldContent":""},{"type":"DELETE","lineNumber":11,"oldContent":"public class BillingServiceImpl implements BillingService {"},{"type":"DELETE","lineNumber":14,"oldContent":"    @Override"},{"type":"DELETE","lineNumber":16,"oldContent":"        double baseRental = plan.getMonthlyRental();"},{"type":"DELETE","lineNumber":17,"oldContent":"        double usageCharges = 0.0;"},{"type":"INSERT","lineNumber":16,"content":"public class BillingServiceImpl implements BillingService {"},{"type":"INSERT","lineNumber":17,"content":""},{"type":"DELETE","lineNumber":19,"oldContent":"        double discounts = 0.0;"},{"type":"DELETE","lineNumber":21,"oldContent":""},{"type":"DELETE","lineNumber":23,"oldContent":"        for (UsageRecord record : usageRecords) {"},{"type":"DELETE","lineNumber":25,"oldContent":"            double recordCharge = rateUsage(record, plan);"},{"type":"INSERT","lineNumber":23,"content":"    @Override"},{"type":"DELETE","lineNumber":28,"oldContent":"            recordCharge = applyNightDiscount(recordCharge, record);"},{"type":"DELETE","lineNumber":31,"oldContent":"            usageCharges += recordCharge;"},{"type":"DELETE","lineNumber":33,"oldContent":"        }"},{"type":"DELETE","lineNumber":35,"oldContent":""},{"type":"DELETE","lineNumber":38,"oldContent":"        double taxes = TaxUtils.applyGST(baseRental + usageCharges);"},{"type":"DELETE","lineNumber":40,"oldContent":""},{"type":"INSERT","lineNumber":33,"content":"        double baseRental = plan.getMonthlyRental();"},{"type":"INSERT","lineNumber":34,"content":"        double usageCharges = 0.0;"},{"type":"INSERT","lineNumber":35,"content":"        double discounts = 0.0;"},{"type":"INSERT","lineNumber":36,"content":""},{"type":"INSERT","lineNumber":37,"content":"        for (UsageRecord record : usageRecords) {"},{"type":"INSERT","lineNumber":38,"content":"            double recordCharge = rateUsage(record, plan);"},{"type":"INSERT","lineNumber":39,"content":"            recordCharge = applyNightDiscount(recordCharge, record);"},{"type":"INSERT","lineNumber":40,"content":"            usageCharges += recordCharge;"},{"type":"INSERT","lineNumber":41,"content":"        }"},{"type":"INSERT","lineNumber":42,"content":""},{"type":"INSERT","lineNumber":43,"content":"        double taxes = TaxUtils.applyGST(baseRental + usageCharges);"},{"type":"INSERT","lineNumber":44,"content":""},{"type":"INSERT","lineNumber":46,"content":"        invoice.setSubscriptionId(subscription.getId());"},{"type":"INSERT","lineNumber":48,"content":"        invoice.setBillingCycle(YearMonth.of(LocalDate.now().getYear(), LocalDate.now().getMonth()));"},{"type":"INSERT","lineNumber":49,"content":""},{"type":"INSERT","lineNumber":56,"content":"        return invoiceRepo.save(invoice);"},{"type":"INSERT","lineNumber":57,"content":"    }"},{"type":"INSERT","lineNumber":59,"content":"    private Invoice generateFamilyInvoice(Subscription subscription, Plan plan, List<UsageRecord> memberUsage, List<UsageRecord> allUsage) {"},{"type":"INSERT","lineNumber":60,"content":"        double baseRental = plan.getMonthlyRental();"},{"type":"INSERT","lineNumber":61,"content":"        double overageCharges = 0.0;"},{"type":"INSERT","lineNumber":62,"content":"        double fairnessSurcharge = 0.0;"},{"type":"INSERT","lineNumber":63,"content":""},{"type":"INSERT","lineNumber":64,"content":"        // --- Data Overage Calculation (Pooled) ---"},{"type":"INSERT","lineNumber":65,"content":"        List<UsageRecord> familyUsage = allUsage.stream()"},{"type":"INSERT","lineNumber":66,"content":"                .filter(u -> subscription.getFamilyId().equals(u.getFamilyId()))"},{"type":"INSERT","lineNumber":67,"content":"                .toList();"},{"type":"INSERT","lineNumber":68,"content":""},{"type":"INSERT","lineNumber":69,"content":"        double totalFamilyDataUsage = familyUsage.stream().mapToDouble(UsageRecord::getData).sum();"},{"type":"INSERT","lineNumber":70,"content":"        double familyDataAllowance = plan.getDataAllowanceMb();"},{"type":"INSERT","lineNumber":71,"content":""},{"type":"INSERT","lineNumber":72,"content":"        if (totalFamilyDataUsage > familyDataAllowance) {"},{"type":"INSERT","lineNumber":73,"content":"            double overageData = totalFamilyDataUsage - familyDataAllowance;"},{"type":"INSERT","lineNumber":74,"content":"            // Distribute overage charge based on individual's contribution to total usage"},{"type":"INSERT","lineNumber":75,"content":"            double memberDataUsage = memberUsage.stream().mapToDouble(UsageRecord::getData).sum();"},{"type":"INSERT","lineNumber":76,"content":"            double memberContributionRatio = memberDataUsage / totalFamilyDataUsage;"},{"type":"INSERT","lineNumber":77,"content":"            overageCharges += (overageData * plan.getDataOverageRate()) * memberContributionRatio;"},{"type":"INSERT","lineNumber":78,"content":"        }"},{"type":"INSERT","lineNumber":79,"content":""},{"type":"INSERT","lineNumber":80,"content":"        // --- Family Fairness Surcharge ---"},{"type":"INSERT","lineNumber":81,"content":"        double memberDataUsage = memberUsage.stream().mapToDouble(UsageRecord::getData).sum();"},{"type":"INSERT","lineNumber":82,"content":"        if (memberDataUsage > (familyDataAllowance * FAMILY_SHARE_CAP_THRESHOLD)) {"},{"type":"INSERT","lineNumber":83,"content":"            fairnessSurcharge = FAMILY_FAIRNESS_SURCHARGE;"},{"type":"INSERT","lineNumber":84,"content":"        }"},{"type":"INSERT","lineNumber":85,"content":""},{"type":"INSERT","lineNumber":86,"content":"        // --- Voice and SMS Overage (Individual) ---"},{"type":"INSERT","lineNumber":87,"content":"        double voiceAndSmsOverage = 0.0;"},{"type":"INSERT","lineNumber":88,"content":"        for (UsageRecord record : memberUsage) {"},{"type":"INSERT","lineNumber":89,"content":"            // Don't double-count data charges, just calculate voice/sms"},{"type":"INSERT","lineNumber":90,"content":"            voiceAndSmsOverage += calculateVoiceCharge(record, plan);"},{"type":"INSERT","lineNumber":91,"content":"            if (record.getSmsCount() > plan.getSmsAllowance()) {"},{"type":"INSERT","lineNumber":92,"content":"                int extraSms = record.getSmsCount() - plan.getSmsAllowance();"},{"type":"INSERT","lineNumber":93,"content":"                voiceAndSmsOverage += extraSms * plan.getSmsOverageRate();"},{"type":"INSERT","lineNumber":94,"content":"            }"},{"type":"INSERT","lineNumber":95,"content":"        }"},{"type":"INSERT","lineNumber":96,"content":""},{"type":"INSERT","lineNumber":97,"content":"        double totalCharges = baseRental + overageCharges + fairnessSurcharge + voiceAndSmsOverage;"},{"type":"INSERT","lineNumber":98,"content":"        double taxes = TaxUtils.applyGST(totalCharges);"},{"type":"INSERT","lineNumber":99,"content":""},{"type":"INSERT","lineNumber":100,"content":"        Invoice invoice = new Invoice();"},{"type":"INSERT","lineNumber":101,"content":"        invoice.setSubscriptionId(subscription.getId());"},{"type":"INSERT","lineNumber":102,"content":"        invoice.setBaseRental(baseRental);"},{"type":"INSERT","lineNumber":103,"content":"        invoice.setOverageCharges(overageCharges + voiceAndSmsOverage);"},{"type":"INSERT","lineNumber":104,"content":"        invoice.setBillingCycle(YearMonth.of(LocalDate.now().getYear(), LocalDate.now().getMonth()));"},{"type":"INSERT","lineNumber":105,"content":"        // Add fairness surcharge to discounts field for now for visibility"},{"type":"INSERT","lineNumber":106,"content":"        invoice.setDiscounts(-fairnessSurcharge); // Negative discount is a charge"},{"type":"INSERT","lineNumber":107,"content":"        invoice.setTaxes(taxes);"},{"type":"INSERT","lineNumber":108,"content":"        invoice.setTotalAmount(totalCharges + taxes);"},{"type":"INSERT","lineNumber":109,"content":"        invoice.setPaid(false);"},{"type":"INSERT","lineNumber":110,"content":""},{"type":"INSERT","lineNumber":111,"content":"        return invoiceRepo.save(invoice);"},{"type":"INSERT","lineNumber":114,"content":""},{"type":"DELETE","lineNumber":54,"oldContent":"        invoice.setSubscriptionId(subscription.getId());"},{"type":"DELETE","lineNumber":63,"oldContent":"        return invoiceRepo.save(invoice);"},{"type":"DELETE","lineNumber":65,"oldContent":"    }"},{"type":"DELETE","lineNumber":68,"oldContent":"    private Invoice generateFamilyInvoice(Subscription subscription, Plan plan, List<UsageRecord> memberUsage, List<UsageRecord> allUsage) {"},{"type":"DELETE","lineNumber":70,"oldContent":"        double baseRental = plan.getMonthlyRental();"},{"type":"DELETE","lineNumber":72,"oldContent":"        double overageCharges = 0.0;"},{"type":"DELETE","lineNumber":74,"oldContent":"        double fairnessSurcharge = 0.0;"},{"type":"DELETE","lineNumber":76,"oldContent":""},{"type":"DELETE","lineNumber":78,"oldContent":"        // --- Data Overage Calculation (Pooled) ---"},{"type":"DELETE","lineNumber":80,"oldContent":"        List<UsageRecord> familyUsage = allUsage.stream()"},{"type":"DELETE","lineNumber":82,"oldContent":"                .filter(u -> subscription.getFamilyId().equals(u.getFamilyId()))"},{"type":"DELETE","lineNumber":84,"oldContent":"                .collect(Collectors.toList());"},{"type":"DELETE","lineNumber":86,"oldContent":""},{"type":"DELETE","lineNumber":88,"oldContent":"        double totalFamilyDataUsage = familyUsage.stream().mapToDouble(UsageRecord::getData).sum();"},{"type":"DELETE","lineNumber":90,"oldContent":"        double familyDataAllowance = plan.getDataAllowanceMb();"},{"type":"DELETE","lineNumber":92,"oldContent":""},{"type":"DELETE","lineNumber":94,"oldContent":"        if (totalFamilyDataUsage > familyDataAllowance) {"},{"type":"DELETE","lineNumber":96,"oldContent":"            double overageData = totalFamilyDataUsage - familyDataAllowance;"},{"type":"DELETE","lineNumber":98,"oldContent":"            // Distribute overage charge based on individual's contribution to total usage"},{"type":"DELETE","lineNumber":100,"oldContent":"            double memberDataUsage = memberUsage.stream().mapToDouble(UsageRecord::getData).sum();"},{"type":"DELETE","lineNumber":102,"oldContent":"            double memberContributionRatio = memberDataUsage / totalFamilyDataUsage;"},{"type":"DELETE","lineNumber":104,"oldContent":"            overageCharges += (overageData * plan.getDataOverageRate()) * memberContributionRatio;"},{"type":"DELETE","lineNumber":106,"oldContent":"        }"},{"type":"DELETE","lineNumber":108,"oldContent":""},{"type":"DELETE","lineNumber":110,"oldContent":"        // --- Family Fairness Surcharge ---"},{"type":"DELETE","lineNumber":112,"oldContent":"        double memberDataUsage = memberUsage.stream().mapToDouble(UsageRecord::getData).sum();"},{"type":"DELETE","lineNumber":114,"oldContent":"        if (memberDataUsage > (familyDataAllowance * FAMILY_SHARE_CAP_THRESHOLD)) {"},{"type":"DELETE","lineNumber":116,"oldContent":"            fairnessSurcharge = FAMILY_FAIRNESS_SURCHARGE;"},{"type":"DELETE","lineNumber":118,"oldContent":"        }"},{"type":"DELETE","lineNumber":120,"oldContent":""},{"type":"DELETE","lineNumber":122,"oldContent":"        // --- Voice and SMS Overage (Individual) ---"},{"type":"DELETE","lineNumber":124,"oldContent":"        double voiceAndSmsOverage = 0.0;"},{"type":"DELETE","lineNumber":126,"oldContent":"        for (UsageRecord record : memberUsage) {"},{"type":"DELETE","lineNumber":128,"oldContent":"            // Don't double-count data charges, just calculate voice/sms"},{"type":"DELETE","lineNumber":130,"oldContent":"            voiceAndSmsOverage += calculateVoiceCharge(record, plan);"},{"type":"DELETE","lineNumber":132,"oldContent":"            if (record.getSmsCount() > plan.getSmsAllowance()) {"},{"type":"DELETE","lineNumber":134,"oldContent":"                int extraSms = record.getSmsCount() - plan.getSmsAllowance();"},{"type":"DELETE","lineNumber":136,"oldContent":"                voiceAndSmsOverage += extraSms * plan.getSmsOverageRate();"},{"type":"DELETE","lineNumber":138,"oldContent":"            }"},{"type":"DELETE","lineNumber":140,"oldContent":"        }"},{"type":"DELETE","lineNumber":143,"oldContent":""},{"type":"DELETE","lineNumber":144,"oldContent":"        double totalCharges = baseRental + overageCharges + fairnessSurcharge + voiceAndSmsOverage;"},{"type":"DELETE","lineNumber":146,"oldContent":"        double taxes = TaxUtils.applyGST(totalCharges);"},{"type":"DELETE","lineNumber":148,"oldContent":""},{"type":"DELETE","lineNumber":150,"oldContent":"        Invoice invoice = new Invoice();"},{"type":"DELETE","lineNumber":152,"oldContent":"        invoice.setSubscriptionId(subscription.getId());"},{"type":"DELETE","lineNumber":154,"oldContent":"        invoice.setBaseRental(baseRental);"},{"type":"DELETE","lineNumber":156,"oldContent":"        invoice.setOverageCharges(overageCharges + voiceAndSmsOverage);"},{"type":"DELETE","lineNumber":158,"oldContent":"        // Add fairness surcharge to discounts field for now for visibility"},{"type":"DELETE","lineNumber":159,"oldContent":"}"},{"type":"DELETE","lineNumber":160,"oldContent":"        invoice.setDiscounts(-fairnessSurcharge); // Negative discount is a charge"},{"type":"DELETE","lineNumber":162,"oldContent":"        invoice.setTaxes(taxes);"},{"type":"DELETE","lineNumber":163,"oldContent":"        invoice.setTotalAmount(totalCharges + taxes);"},{"type":"DELETE","lineNumber":164,"oldContent":"    }"},{"type":"DELETE","lineNumber":165,"oldContent":"        invoice.setPaid(false);"},{"type":"INSERT","lineNumber":173,"content":"    @Override"},{"type":"INSERT","lineNumber":174,"content":"    public void payInvoice(String invoiceId) {"},{"type":"INSERT","lineNumber":175,"content":"        Invoice invoice = invoiceRepo.findById(invoiceId)"},{"type":"INSERT","lineNumber":176,"content":"                .orElseThrow(() -> new BillingException(\"Invoice not found\"));"},{"type":"INSERT","lineNumber":177,"content":"        invoice.setPaid(true);"},{"type":"INSERT","lineNumber":179,"content":"    }"},{"type":"INSERT","lineNumber":180,"content":"}"},{"type":"DELETE","lineNumber":168,"oldContent":"        invoice.setPaid(true);"},{"type":"DELETE","lineNumber":169,"oldContent":"        return invoiceRepo.save(invoice);"},{"type":"DELETE","lineNumber":170,"oldContent":"                .orElseThrow(() -> new RuntimeException(\"Invoice not found\"));"},{"type":"DELETE","lineNumber":171,"oldContent":"        Invoice invoice = invoiceRepo.findById(invoiceId)"},{"type":"DELETE","lineNumber":172,"oldContent":"    public void payInvoice(String invoiceId) {"},{"type":"DELETE","lineNumber":173,"oldContent":""},{"type":"DELETE","lineNumber":174,"oldContent":"    @Override"},{"type":"DELETE","lineNumber":175,"oldContent":""}]},{"timestamp":1756710368459,"changes":[{"type":"INSERT","lineNumber":6,"content":"import com.telecom.utils.Constants;"},{"type":"DELETE","lineNumber":10,"oldContent":"import java.util.List;"},{"type":"INSERT","lineNumber":13,"content":"import java.util.List;"},{"type":"DELETE","lineNumber":20,"oldContent":"    private static final double FAMILY_FAIRNESS_SURCHARGE = 50.0;"},{"type":"DELETE","lineNumber":21,"oldContent":"    @Override"},{"type":"MODIFY","lineNumber":22,"content":"    @Override","oldContent":"    private static final double FAMILY_SHARE_CAP_THRESHOLD = 0.6; // 60%"},{"type":"INSERT","lineNumber":27,"content":"            return generateIndividualInvoice(subscription, plan, memberUsage);"},{"type":"INSERT","lineNumber":28,"content":"        }"},{"type":"INSERT","lineNumber":29,"content":"    }"},{"type":"INSERT","lineNumber":30,"content":""},{"type":"INSERT","lineNumber":31,"content":"    private Invoice generateIndividualInvoice(Subscription subscription, Plan plan, List<UsageRecord> usageRecords) {"},{"type":"DELETE","lineNumber":30,"oldContent":"            return generateIndividualInvoice(subscription, plan, memberUsage);"},{"type":"DELETE","lineNumber":33,"oldContent":"        }"},{"type":"DELETE","lineNumber":35,"oldContent":"    }"},{"type":"DELETE","lineNumber":38,"oldContent":""},{"type":"DELETE","lineNumber":41,"oldContent":"    private Invoice generateIndividualInvoice(Subscription subscription, Plan plan, List<UsageRecord> usageRecords) {"},{"type":"MODIFY","lineNumber":43,"content":"","oldContent":"        Invoice invoice = new Invoice();"},{"type":"INSERT","lineNumber":44,"content":"        Invoice invoice = new Invoice();"},{"type":"INSERT","lineNumber":45,"content":"        invoice.setSubscriptionId(subscription.getId());"},{"type":"INSERT","lineNumber":47,"content":"        invoice.setBillingCycle(YearMonth.of(LocalDate.now().getYear(), LocalDate.now().getMonth()));"},{"type":"DELETE","lineNumber":49,"oldContent":"        invoice.setSubscriptionId(subscription.getId());"},{"type":"DELETE","lineNumber":52,"oldContent":"        invoice.setBillingCycle(YearMonth.of(LocalDate.now().getYear(), LocalDate.now().getMonth()));"},{"type":"DELETE","lineNumber":55,"oldContent":""},{"type":"DELETE","lineNumber":56,"oldContent":""},{"type":"DELETE","lineNumber":57,"oldContent":"    }"},{"type":"DELETE","lineNumber":58,"oldContent":""},{"type":"DELETE","lineNumber":59,"oldContent":"    @Override"},{"type":"DELETE","lineNumber":60,"oldContent":"    public double rateUsage(UsageRecord usage, Plan plan) {"},{"type":"DELETE","lineNumber":62,"oldContent":"        double total = 0.0;"},{"type":"DELETE","lineNumber":65,"oldContent":"        // DATA"},{"type":"DELETE","lineNumber":67,"oldContent":"        if (usage.getData() > plan.getDataAllowanceMb()) {"},{"type":"DELETE","lineNumber":69,"oldContent":"            double extraData = usage.getData() - plan.getDataAllowanceMb();"},{"type":"DELETE","lineNumber":71,"oldContent":"            total += extraData * plan.getDataOverageRate();"},{"type":"DELETE","lineNumber":73,"oldContent":"        }"},{"type":"DELETE","lineNumber":76,"oldContent":""},{"type":"DELETE","lineNumber":79,"oldContent":"        // VOICE"},{"type":"DELETE","lineNumber":81,"oldContent":"        total += calculateVoiceCharge(usage, plan);"},{"type":"DELETE","lineNumber":84,"oldContent":""},{"type":"DELETE","lineNumber":87,"oldContent":"        // SMS"},{"type":"DELETE","lineNumber":90,"oldContent":"        if (usage.getSmsCount() > plan.getSmsAllowance()) {"},{"type":"DELETE","lineNumber":93,"oldContent":"            int extraSms = usage.getSmsCount() - plan.getSmsAllowance();"},{"type":"DELETE","lineNumber":96,"oldContent":"            total += extraSms * plan.getSmsOverageRate();"},{"type":"DELETE","lineNumber":99,"oldContent":"        }"},{"type":"DELETE","lineNumber":102,"oldContent":""},{"type":"DELETE","lineNumber":103,"oldContent":"        if (memberDataUsage > (familyDataAllowance * FAMILY_SHARE_CAP_THRESHOLD)) {"},{"type":"DELETE","lineNumber":104,"oldContent":"            fairnessSurcharge = FAMILY_FAIRNESS_SURCHARGE;"},{"type":"DELETE","lineNumber":105,"oldContent":"        // Roaming / International surcharge"},{"type":"INSERT","lineNumber":81,"content":"        if (memberDataUsage > (familyDataAllowance * Constants.FAMILY_SHARE_CAP_THRESHOLD)) {"},{"type":"INSERT","lineNumber":82,"content":"            fairnessSurcharge = Constants.FAMILY_FAIRNESS_SURCHARGE;"},{"type":"DELETE","lineNumber":108,"oldContent":"        if (usage.isRoaming()) {"},{"type":"DELETE","lineNumber":111,"oldContent":"            total *= 1.5;"},{"type":"DELETE","lineNumber":114,"oldContent":"        }"},{"type":"DELETE","lineNumber":117,"oldContent":"        if (usage.isInternational()) {"},{"type":"DELETE","lineNumber":120,"oldContent":"            total *= 3.0;"},{"type":"DELETE","lineNumber":123,"oldContent":"        }"},{"type":"DELETE","lineNumber":126,"oldContent":""},{"type":"DELETE","lineNumber":129,"oldContent":"        return total;"},{"type":"DELETE","lineNumber":132,"oldContent":"    }"},{"type":"DELETE","lineNumber":135,"oldContent":""},{"type":"DELETE","lineNumber":138,"oldContent":"    @Override"},{"type":"DELETE","lineNumber":141,"oldContent":"    public double calculateVoiceCharge(UsageRecord usage, Plan plan) {"},{"type":"DELETE","lineNumber":144,"oldContent":"        int usedMinutes = usage.getVoiceMinutes();"},{"type":"INSERT","lineNumber":111,"content":"    }"},{"type":"DELETE","lineNumber":148,"oldContent":"        // Weekend free minutes"},{"type":"INSERT","lineNumber":114,"content":"    @Override"},{"type":"INSERT","lineNumber":115,"content":"    public double rateUsage(UsageRecord usage, Plan plan) {"},{"type":"INSERT","lineNumber":116,"content":"        double total = 0.0;"},{"type":"INSERT","lineNumber":117,"content":""},{"type":"INSERT","lineNumber":118,"content":"        // DATA"},{"type":"INSERT","lineNumber":119,"content":"        if (usage.getData() > plan.getDataAllowanceMb()) {"},{"type":"INSERT","lineNumber":120,"content":"            double extraData = usage.getData() - plan.getDataAllowanceMb();"},{"type":"INSERT","lineNumber":121,"content":"            total += extraData * plan.getDataOverageRate();"},{"type":"INSERT","lineNumber":122,"content":"        }"},{"type":"INSERT","lineNumber":123,"content":""},{"type":"INSERT","lineNumber":124,"content":"        // VOICE"},{"type":"INSERT","lineNumber":125,"content":"        total += calculateVoiceCharge(usage, plan);"},{"type":"INSERT","lineNumber":126,"content":""},{"type":"INSERT","lineNumber":127,"content":"        // SMS"},{"type":"INSERT","lineNumber":128,"content":"        if (usage.getSmsCount() > plan.getSmsAllowance()) {"},{"type":"INSERT","lineNumber":129,"content":"            int extraSms = usage.getSmsCount() - plan.getSmsAllowance();"},{"type":"INSERT","lineNumber":130,"content":"            total += extraSms * plan.getSmsOverageRate();"},{"type":"INSERT","lineNumber":131,"content":"        }"},{"type":"INSERT","lineNumber":132,"content":""},{"type":"INSERT","lineNumber":133,"content":"        // Roaming / International surcharge"},{"type":"INSERT","lineNumber":134,"content":"        if (usage.isRoaming()) {"},{"type":"INSERT","lineNumber":135,"content":"            total *= 1.5;"},{"type":"INSERT","lineNumber":136,"content":"        }"},{"type":"INSERT","lineNumber":137,"content":"        if (usage.isInternational()) {"},{"type":"INSERT","lineNumber":138,"content":"            total *= 3.0;"},{"type":"INSERT","lineNumber":139,"content":"        }"},{"type":"INSERT","lineNumber":140,"content":""},{"type":"INSERT","lineNumber":141,"content":"        return total;"},{"type":"INSERT","lineNumber":142,"content":"    }"},{"type":"INSERT","lineNumber":143,"content":""},{"type":"INSERT","lineNumber":144,"content":"    @Override"},{"type":"INSERT","lineNumber":145,"content":"    public double calculateVoiceCharge(UsageRecord usage, Plan plan) {"},{"type":"INSERT","lineNumber":146,"content":"        int usedMinutes = usage.getVoiceMinutes();"},{"type":"INSERT","lineNumber":147,"content":""},{"type":"INSERT","lineNumber":148,"content":"        // Weekend free minutes"},{"type":"DELETE","lineNumber":173,"oldContent":"        invoiceRepo.update(invoice);"},{"type":"DELETE","lineNumber":174,"oldContent":""},{"type":"DELETE","lineNumber":179,"oldContent":"}"},{"type":"INSERT","lineNumber":177,"content":"        invoiceRepo.update(invoice);"},{"type":"INSERT","lineNumber":179,"content":"}"},{"type":"INSERT","lineNumber":180,"content":""}]}]},"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/utils/TaxUtils.java":{"filePath":"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/utils/TaxUtils.java","baseContent":"package com.telecom.utils;\n\npublic class TaxUtils {\n    private static final double GST_RATE = 0.18; // 18% GST\n\n    public static double applyGST(double amount) {\n        return amount * GST_RATE;\n        }\n}\n\n\n","baseTimestamp":1756627439474,"deltas":[{"timestamp":1756710369192,"changes":[{"type":"DELETE","lineNumber":3,"oldContent":"    private static final double GST_RATE = 0.18; // 18% GST"},{"type":"DELETE","lineNumber":6,"oldContent":"        return amount * GST_RATE;"},{"type":"DELETE","lineNumber":7,"oldContent":"        }"},{"type":"INSERT","lineNumber":5,"content":"        return amount * Constants.GST_RATE;"},{"type":"INSERT","lineNumber":6,"content":"    }"}]}]},"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/service/interfaces/AnalyticsService.java":{"filePath":"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/service/interfaces/AnalyticsService.java","baseContent":"package com.telecom.service.interfaces;\n\nimport com.telecom.models.Customer;\nimport com.telecom.models.Plan;\n\nimport java.time.LocalDate;\nimport java.util.List;\nimport java.util.Map;\n\npublic interface AnalyticsService {\n\n    List<Customer> getTopNDataUsers(LocalDate start, LocalDate end, int n);\n\n    Map<Long, Double> getARPUByPlan(LocalDate start, LocalDate end);\n\n    Map<Long, OverageStats> getOverageDistribution(LocalDate start, LocalDate end);\n\n    List<Customer> getCreditRiskCustomers();\n\n    Map<Long, Plan> recommendHigherPlans(int overageThreshold, int months);\n\n    class OverageStats {\n        public final int count;\n        public final double total;\n        public final double average;\n        public OverageStats(int count, double total, double average) {\n            this.count = count;\n            this.total = total;\n            this.average = average;\n        }\n    }\n}","baseTimestamp":1756641487244,"deltas":[{"timestamp":1756644485272,"changes":[{"type":"DELETE","lineNumber":11,"oldContent":"    List<Customer> getTopNDataUsers(LocalDate start, LocalDate end, int n);"},{"type":"DELETE","lineNumber":12,"oldContent":""},{"type":"DELETE","lineNumber":13,"oldContent":"    Map<Long, Double> getARPUByPlan(LocalDate start, LocalDate end);"},{"type":"DELETE","lineNumber":14,"oldContent":""},{"type":"DELETE","lineNumber":15,"oldContent":"    Map<Long, OverageStats> getOverageDistribution(LocalDate start, LocalDate end);"},{"type":"DELETE","lineNumber":16,"oldContent":""},{"type":"DELETE","lineNumber":17,"oldContent":"    List<Customer> getCreditRiskCustomers();"},{"type":"DELETE","lineNumber":18,"oldContent":""},{"type":"DELETE","lineNumber":19,"oldContent":"    Map<Long, Plan> recommendHigherPlans(int overageThreshold, int months);"},{"type":"DELETE","lineNumber":20,"oldContent":""},{"type":"DELETE","lineNumber":21,"oldContent":"    class OverageStats {"},{"type":"DELETE","lineNumber":22,"oldContent":"        public final int count;"},{"type":"DELETE","lineNumber":23,"oldContent":"        public final double total;"},{"type":"DELETE","lineNumber":24,"oldContent":"        public final double average;"},{"type":"DELETE","lineNumber":25,"oldContent":"        public OverageStats(int count, double total, double average) {"},{"type":"DELETE","lineNumber":26,"oldContent":"            this.count = count;"},{"type":"DELETE","lineNumber":27,"oldContent":"            this.total = total;"},{"type":"DELETE","lineNumber":28,"oldContent":"            this.average = average;"},{"type":"DELETE","lineNumber":29,"oldContent":"        }"},{"type":"DELETE","lineNumber":30,"oldContent":"    }"},{"type":"INSERT","lineNumber":11,"content":"    List<Customer> topDataUsers(List<UsageRecord> usage, int n);"},{"type":"INSERT","lineNumber":12,"content":"    Map<String, Double> arpuByPlan(List<Invoice> invoices);"},{"type":"INSERT","lineNumber":13,"content":"    Map<String, Object> overageDistribution(List<Invoice> invoices);"},{"type":"INSERT","lineNumber":14,"content":"    List<Customer> detectCreditRisk(List<Invoice> invoices, List<Customer> customers);"},{"type":"INSERT","lineNumber":15,"content":"    Map<String, String> recommendPlans(List<Invoice> invoices, List<Plan> plans);"}]},{"timestamp":1756644489620,"changes":[{"type":"INSERT","lineNumber":4,"content":"import com.telecom.models.UsageRecord;"}]},{"timestamp":1756644491715,"changes":[{"type":"INSERT","lineNumber":3,"content":"import com.telecom.models.Invoice;"}]}]},"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/service/impl/AnalyticsServiceImpl.java":{"filePath":"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/service/impl/AnalyticsServiceImpl.java","baseContent":"java\n        package com.telecom.service.impl;\n\nimport com.telecom.models.*;\nimport com.telecom.repository.interfaces.*;\nimport com.telecom.service.interfaces.AnalyticsService;\n\nimport java.time.LocalDate;\nimport java.time.temporal.ChronoUnit;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\npublic class AnalyticsServiceImpl implements AnalyticsService {\n\n    private final UsageRecordRepo usageRecordRepo;\n    private final InvoiceRepo invoiceRepo;\n    private final CustomerRepo customerRepo;\n    private final PlanRepo planRepo;\n    private final SubscriptionRepo subscriptionRepo;\n\n    public AnalyticsServiceImpl(\n            UsageRecordRepo usageRecordRepo,\n            InvoiceRepo invoiceRepo,\n            CustomerRepo customerRepo,\n            PlanRepo planRepo,\n            SubscriptionRepo subscriptionRepo) {\n        this.usageRecordRepo = usageRecordRepo;\n        this.invoiceRepo = invoiceRepo;\n        this.customerRepo = customerRepo;\n        this.planRepo = planRepo;\n        this.subscriptionRepo = subscriptionRepo;\n    }\n\n    // 1. Top N data users in a billing cycle\n    @Override\n    public List<Customer> getTopNDataUsers(LocalDate start, LocalDate end, int n) {\n        // Group by subscriptionId, sum data, map to customerId\n        Map<String, Double> dataBySub = usageRecordRepo.findByDateRange(start, end).stream()\n                .collect(Collectors.groupingBy(\n                        UsageRecord::getSubscriptionId,\n                        Collectors.summingDouble(UsageRecord::getData)\n                ));\n\n        // Map subscriptionId to customerId, sum if customer has multiple subscriptions\n        Map<Long, Double> dataByCustomer = new HashMap<>();\n        for (Map.Entry<String, Double> entry : dataBySub.entrySet()) {\n            Subscription sub = subscriptionRepo.findById(entry.getKey());\n            if (sub != null) {\n                dataByCustomer.merge(sub.getCustomerId(), entry.getValue(), Double::sum);\n            }\n        }\n\n        return dataByCustomer.entrySet().stream()\n                .sorted(Map.Entry.<Long, Double>comparingByValue().reversed())\n                .limit(n)\n                .map(e -> customerRepo.findById(e.getKey()))\n                .filter(Objects::nonNull)\n                .collect(Collectors.toList());\n    }\n\n    // 2. ARPU (Average Revenue Per User) by plan\n    @Override\n    public Map<Long, Double> getARPUByPlan(LocalDate start, LocalDate end) {\n        List<Invoice> invoices = invoiceRepo.findByDateRange(start, end);\n        return invoices.stream()\n                .collect(Collectors.groupingBy(\n                        Invoice::getPlanId,\n                        Collectors.averagingDouble(Invoice::getTotalAmount)\n                ));\n    }\n\n    // 3. Overage distribution (count, total, average overage per plan)\n    @Override\n    public Map<Long, OverageStats> getOverageDistribution(LocalDate start, LocalDate end) {\n        // This requires overage info, which is not present in UsageRecord.\n        // Placeholder: returns empty map.\n        return new HashMap<>();\n    }\n\n    // 4. Credit risk detection: customers with invoices unpaid > 60 days\n    @Override\n    public List<Customer> getCreditRiskCustomers() {\n        LocalDate now = LocalDate.now();\n        return invoiceRepo.findAll().stream()\n                .filter(inv -> !inv.isPaid() && ChronoUnit.DAYS.between(inv.getIssueDate(), now) > 60)\n                .map(Invoice::getCustomerId)\n                .distinct()\n                .map(customerRepo::findById)\n                .filter(Objects::nonNull)\n                .collect(Collectors.toList());\n    }\n\n    // 5. Plan recommendation engine: suggest higher plans if a subscriber pays frequent overages\n    @Override\n    public Map<Long, Plan> recommendHigherPlans(int overageThreshold, int months) {\n        // This requires overage info, which is not present in UsageRecord.\n        // Placeholder: returns empty map.\n        return new HashMap<>();\n    }\n}","baseTimestamp":1756641487236,"deltas":[{"timestamp":1756644732254,"changes":[{"type":"DELETE","lineNumber":14,"oldContent":"    private final UsageRecordRepo usageRecordRepo;"},{"type":"DELETE","lineNumber":15,"oldContent":"    private final InvoiceRepo invoiceRepo;"},{"type":"DELETE","lineNumber":16,"oldContent":"    private final CustomerRepo customerRepo;"},{"type":"DELETE","lineNumber":17,"oldContent":"    private final PlanRepo planRepo;"},{"type":"DELETE","lineNumber":18,"oldContent":"    private final SubscriptionRepo subscriptionRepo;"},{"type":"DELETE","lineNumber":19,"oldContent":""},{"type":"DELETE","lineNumber":20,"oldContent":"    public AnalyticsServiceImpl("},{"type":"DELETE","lineNumber":21,"oldContent":"            UsageRecordRepo usageRecordRepo,"},{"type":"DELETE","lineNumber":22,"oldContent":"            InvoiceRepo invoiceRepo,"},{"type":"DELETE","lineNumber":23,"oldContent":"            CustomerRepo customerRepo,"},{"type":"DELETE","lineNumber":24,"oldContent":"            PlanRepo planRepo,"},{"type":"DELETE","lineNumber":25,"oldContent":"            SubscriptionRepo subscriptionRepo) {"},{"type":"DELETE","lineNumber":26,"oldContent":"        this.usageRecordRepo = usageRecordRepo;"},{"type":"DELETE","lineNumber":27,"oldContent":"        this.invoiceRepo = invoiceRepo;"},{"type":"DELETE","lineNumber":28,"oldContent":"        this.customerRepo = customerRepo;"},{"type":"DELETE","lineNumber":29,"oldContent":"        this.planRepo = planRepo;"},{"type":"DELETE","lineNumber":30,"oldContent":"        this.subscriptionRepo = subscriptionRepo;"},{"type":"DELETE","lineNumber":31,"oldContent":"    }"},{"type":"DELETE","lineNumber":32,"oldContent":""},{"type":"DELETE","lineNumber":33,"oldContent":"    // 1. Top N data users in a billing cycle"},{"type":"DELETE","lineNumber":35,"oldContent":"    public List<Customer> getTopNDataUsers(LocalDate start, LocalDate end, int n) {"},{"type":"DELETE","lineNumber":36,"oldContent":"        // Group by subscriptionId, sum data, map to customerId"},{"type":"DELETE","lineNumber":37,"oldContent":"        Map<String, Double> dataBySub = usageRecordRepo.findByDateRange(start, end).stream()"},{"type":"DELETE","lineNumber":38,"oldContent":"                .collect(Collectors.groupingBy("},{"type":"DELETE","lineNumber":39,"oldContent":"                        UsageRecord::getSubscriptionId,"},{"type":"DELETE","lineNumber":40,"oldContent":"                        Collectors.summingDouble(UsageRecord::getData)"},{"type":"DELETE","lineNumber":41,"oldContent":"                ));"},{"type":"DELETE","lineNumber":42,"oldContent":""},{"type":"DELETE","lineNumber":43,"oldContent":"        // Map subscriptionId to customerId, sum if customer has multiple subscriptions"},{"type":"DELETE","lineNumber":44,"oldContent":"        Map<Long, Double> dataByCustomer = new HashMap<>();"},{"type":"DELETE","lineNumber":45,"oldContent":"        for (Map.Entry<String, Double> entry : dataBySub.entrySet()) {"},{"type":"DELETE","lineNumber":46,"oldContent":"            Subscription sub = subscriptionRepo.findById(entry.getKey());"},{"type":"DELETE","lineNumber":47,"oldContent":"            if (sub != null) {"},{"type":"DELETE","lineNumber":48,"oldContent":"                dataByCustomer.merge(sub.getCustomerId(), entry.getValue(), Double::sum);"},{"type":"DELETE","lineNumber":49,"oldContent":"            }"},{"type":"DELETE","lineNumber":50,"oldContent":"        }"},{"type":"DELETE","lineNumber":51,"oldContent":""},{"type":"DELETE","lineNumber":52,"oldContent":"        return dataByCustomer.entrySet().stream()"},{"type":"DELETE","lineNumber":53,"oldContent":"                .sorted(Map.Entry.<Long, Double>comparingByValue().reversed())"},{"type":"INSERT","lineNumber":15,"content":"    public List<Customer> topDataUsers(List<UsageRecord> usage, int n) {"},{"type":"INSERT","lineNumber":16,"content":"        return usage.stream()"},{"type":"INSERT","lineNumber":17,"content":"                .collect(Collectors.groupingBy(UsageRecord::getSubscriptionId,"},{"type":"INSERT","lineNumber":18,"content":"                        Collectors.summingDouble(UsageRecord::getDataGb)))"},{"type":"INSERT","lineNumber":19,"content":"                .entrySet().stream()"},{"type":"INSERT","lineNumber":20,"content":"                .sorted(Map.Entry.<String, Double>comparingByValue().reversed())"},{"type":"DELETE","lineNumber":55,"oldContent":"                .map(e -> customerRepo.findById(e.getKey()))"},{"type":"DELETE","lineNumber":56,"oldContent":"                .filter(Objects::nonNull)"},{"type":"DELETE","lineNumber":57,"oldContent":"                .collect(Collectors.toList());"},{"type":"INSERT","lineNumber":22,"content":"                .map(e -> new Customer(e.getKey(), \"User-\" + e.getKey(), \"demo@mail.com\", null, false))"},{"type":"INSERT","lineNumber":23,"content":"                .toList();"},{"type":"DELETE","lineNumber":60,"oldContent":"    // 2. ARPU (Average Revenue Per User) by plan"},{"type":"DELETE","lineNumber":62,"oldContent":"    public Map<Long, Double> getARPUByPlan(LocalDate start, LocalDate end) {"},{"type":"DELETE","lineNumber":63,"oldContent":"        List<Invoice> invoices = invoiceRepo.findByDateRange(start, end);"},{"type":"INSERT","lineNumber":27,"content":"    public Map<String, Double> arpuByPlan(List<Invoice> invoices) {"},{"type":"DELETE","lineNumber":65,"oldContent":"                .collect(Collectors.groupingBy("},{"type":"DELETE","lineNumber":66,"oldContent":"                        Invoice::getPlanId,"},{"type":"DELETE","lineNumber":67,"oldContent":"                        Collectors.averagingDouble(Invoice::getTotalAmount)"},{"type":"DELETE","lineNumber":68,"oldContent":"                ));"},{"type":"INSERT","lineNumber":29,"content":"                .collect(Collectors.groupingBy(Invoice::getSubscriptionId,"},{"type":"INSERT","lineNumber":30,"content":"                        Collectors.averagingDouble(Invoice::getTotalAmount)));"},{"type":"DELETE","lineNumber":71,"oldContent":"    // 3. Overage distribution (count, total, average overage per plan)"},{"type":"DELETE","lineNumber":73,"oldContent":"    public Map<Long, OverageStats> getOverageDistribution(LocalDate start, LocalDate end) {"},{"type":"DELETE","lineNumber":74,"oldContent":"        // This requires overage info, which is not present in UsageRecord."},{"type":"DELETE","lineNumber":75,"oldContent":"        // Placeholder: returns empty map."},{"type":"DELETE","lineNumber":76,"oldContent":"        return new HashMap<>();"},{"type":"INSERT","lineNumber":34,"content":"    public Map<String, Object> overageDistribution(List<Invoice> invoices) {"},{"type":"INSERT","lineNumber":35,"content":"        DoubleSummaryStatistics stats = invoices.stream()"},{"type":"INSERT","lineNumber":36,"content":"                .collect(Collectors.summarizingDouble(Invoice::getOverageCharges));"},{"type":"INSERT","lineNumber":37,"content":"        return Map.of("},{"type":"INSERT","lineNumber":38,"content":"                \"count\", stats.getCount(),"},{"type":"INSERT","lineNumber":39,"content":"                \"total\", stats.getSum(),"},{"type":"INSERT","lineNumber":40,"content":"                \"average\", stats.getAverage()"},{"type":"INSERT","lineNumber":41,"content":"        );"},{"type":"DELETE","lineNumber":79,"oldContent":"    // 4. Credit risk detection: customers with invoices unpaid > 60 days"},{"type":"DELETE","lineNumber":81,"oldContent":"    public List<Customer> getCreditRiskCustomers() {"},{"type":"DELETE","lineNumber":82,"oldContent":"        LocalDate now = LocalDate.now();"},{"type":"DELETE","lineNumber":83,"oldContent":"        return invoiceRepo.findAll().stream()"},{"type":"DELETE","lineNumber":84,"oldContent":"                .filter(inv -> !inv.isPaid() && ChronoUnit.DAYS.between(inv.getIssueDate(), now) > 60)"},{"type":"DELETE","lineNumber":85,"oldContent":"                .map(Invoice::getCustomerId)"},{"type":"DELETE","lineNumber":86,"oldContent":"                .distinct()"},{"type":"DELETE","lineNumber":87,"oldContent":"                .map(customerRepo::findById)"},{"type":"DELETE","lineNumber":88,"oldContent":"                .filter(Objects::nonNull)"},{"type":"DELETE","lineNumber":89,"oldContent":"                .collect(Collectors.toList());"},{"type":"INSERT","lineNumber":45,"content":"    public List<Customer> detectCreditRisk(List<Invoice> invoices, List<Customer> customers) {"},{"type":"INSERT","lineNumber":46,"content":"        // simple rule: unpaid invoices => credit risk"},{"type":"INSERT","lineNumber":47,"content":"        Set<String> riskySubs = invoices.stream()"},{"type":"INSERT","lineNumber":48,"content":"                .filter(inv -> !inv.isPaid())"},{"type":"INSERT","lineNumber":49,"content":"                .map(Invoice::getSubscriptionId)"},{"type":"INSERT","lineNumber":50,"content":"                .collect(Collectors.toSet());"},{"type":"INSERT","lineNumber":51,"content":"        return customers.stream()"},{"type":"INSERT","lineNumber":52,"content":"                .filter(c -> riskySubs.contains(c.getId()))"},{"type":"INSERT","lineNumber":53,"content":"                .toList();"},{"type":"DELETE","lineNumber":92,"oldContent":"    // 5. Plan recommendation engine: suggest higher plans if a subscriber pays frequent overages"},{"type":"DELETE","lineNumber":94,"oldContent":"    public Map<Long, Plan> recommendHigherPlans(int overageThreshold, int months) {"},{"type":"DELETE","lineNumber":95,"oldContent":"        // This requires overage info, which is not present in UsageRecord."},{"type":"DELETE","lineNumber":96,"oldContent":"        // Placeholder: returns empty map."},{"type":"DELETE","lineNumber":97,"oldContent":"        return new HashMap<>();"},{"type":"INSERT","lineNumber":57,"content":"    public Map<String, String> recommendPlans(List<Invoice> invoices, List<Plan> plans) {"},{"type":"INSERT","lineNumber":58,"content":"        // simple recommendation: if overage > threshold, suggest higher rental plan"},{"type":"INSERT","lineNumber":59,"content":"        Map<String, String> recommendations = new HashMap<>();"},{"type":"INSERT","lineNumber":60,"content":"        invoices.forEach(inv -> {"},{"type":"INSERT","lineNumber":61,"content":"            if (inv.getOverageCharges() > 100) {"},{"type":"INSERT","lineNumber":62,"content":"                Plan higher = plans.stream().max(Comparator.comparingDouble(Plan::getMonthlyRental)).orElse(null);"},{"type":"INSERT","lineNumber":63,"content":"                if (higher != null) recommendations.put(inv.getSubscriptionId(), higher.getName());"},{"type":"INSERT","lineNumber":64,"content":"            }"},{"type":"INSERT","lineNumber":65,"content":"        });"},{"type":"INSERT","lineNumber":66,"content":"        return recommendations;"}]},{"timestamp":1756644746188,"changes":[{"type":"INSERT","lineNumber":0,"content":"package com.telecom.service.impl;"},{"type":"INSERT","lineNumber":1,"content":""},{"type":"INSERT","lineNumber":16,"content":"    @Override"},{"type":"INSERT","lineNumber":23,"content":"                .limit(n)"},{"type":"INSERT","lineNumber":26,"content":"    }"},{"type":"INSERT","lineNumber":27,"content":""},{"type":"INSERT","lineNumber":28,"content":"    @Override"},{"type":"INSERT","lineNumber":30,"content":"        return invoices.stream()"},{"type":"DELETE","lineNumber":25,"oldContent":"    public Map<String, Object> overageDistribution(List<Invoice> invoices) {"},{"type":"INSERT","lineNumber":33,"content":"    }"},{"type":"INSERT","lineNumber":34,"content":""},{"type":"INSERT","lineNumber":36,"content":"    public Map<String, Object> overageDistribution(List<Invoice> invoices) {"},{"type":"INSERT","lineNumber":44,"content":"    }"},{"type":"INSERT","lineNumber":45,"content":""},{"type":"INSERT","lineNumber":46,"content":"    @Override"},{"type":"DELETE","lineNumber":43,"oldContent":"                .limit(n)"},{"type":"INSERT","lineNumber":56,"content":"    }"},{"type":"INSERT","lineNumber":57,"content":""},{"type":"INSERT","lineNumber":58,"content":"    @Override"},{"type":"DELETE","lineNumber":46,"oldContent":"    }"},{"type":"DELETE","lineNumber":48,"oldContent":""},{"type":"DELETE","lineNumber":51,"oldContent":"    @Override"},{"type":"DELETE","lineNumber":55,"oldContent":"        return invoices.stream()"},{"type":"DELETE","lineNumber":59,"oldContent":""},{"type":"DELETE","lineNumber":60,"oldContent":"    @Override"},{"type":"DELETE","lineNumber":61,"oldContent":"    }"},{"type":"DELETE","lineNumber":62,"oldContent":""},{"type":"DELETE","lineNumber":63,"oldContent":"    @Override"},{"type":"DELETE","lineNumber":64,"oldContent":"    }"},{"type":"DELETE","lineNumber":65,"oldContent":""},{"type":"DELETE","lineNumber":66,"oldContent":"    @Override"},{"type":"DELETE","lineNumber":67,"oldContent":"    }"}]},{"timestamp":1756644755408,"changes":[{"type":"MODIFY","lineNumber":2,"content":"java","oldContent":"java"},{"type":"INSERT","lineNumber":16,"content":"    @Override"},{"type":"DELETE","lineNumber":18,"oldContent":"    @Override"},{"type":"MODIFY","lineNumber":20,"content":"                        Collectors.summingDouble(UsageRecord::getData)))","oldContent":"                        Collectors.summingDouble(UsageRecord::getDataGb)))"},{"type":"INSERT","lineNumber":23,"content":"                .limit(n)"},{"type":"INSERT","lineNumber":26,"content":"    }"},{"type":"INSERT","lineNumber":27,"content":""},{"type":"INSERT","lineNumber":28,"content":"    @Override"},{"type":"DELETE","lineNumber":26,"oldContent":"                .limit(n)"},{"type":"INSERT","lineNumber":30,"content":"        return invoices.stream()"},{"type":"DELETE","lineNumber":30,"oldContent":"    @Override"},{"type":"DELETE","lineNumber":32,"oldContent":"        DoubleSummaryStatistics stats = invoices.stream()"},{"type":"INSERT","lineNumber":36,"content":"    public Map<String, Object> overageDistribution(List<Invoice> invoices) {"},{"type":"INSERT","lineNumber":37,"content":"        DoubleSummaryStatistics stats = invoices.stream()"},{"type":"DELETE","lineNumber":36,"oldContent":"        return invoices.stream()"},{"type":"DELETE","lineNumber":40,"oldContent":"    }"},{"type":"INSERT","lineNumber":44,"content":"    }"},{"type":"INSERT","lineNumber":46,"content":"    @Override"},{"type":"DELETE","lineNumber":45,"oldContent":"    public Map<String, Object> overageDistribution(List<Invoice> invoices) {"},{"type":"DELETE","lineNumber":54,"oldContent":"    public Map<String, String> recommendPlans(List<Invoice> invoices, List<Plan> plans) {"},{"type":"DELETE","lineNumber":56,"oldContent":"        // simple recommendation: if overage > threshold, suggest higher rental plan"},{"type":"INSERT","lineNumber":59,"content":"    public Map<String, String> recommendPlans(List<Invoice> invoices, List<Plan> plans) {"},{"type":"INSERT","lineNumber":60,"content":"        // simple recommendation: if overage > threshold, suggest higher rental plan"},{"type":"DELETE","lineNumber":64,"oldContent":"    }"},{"type":"DELETE","lineNumber":66,"oldContent":""},{"type":"DELETE","lineNumber":68,"oldContent":"    @Override"}]},{"timestamp":1756644773727,"changes":[{"type":"DELETE","lineNumber":1,"oldContent":"java"},{"type":"DELETE","lineNumber":2,"oldContent":"java"},{"type":"INSERT","lineNumber":1,"content":""},{"type":"INSERT","lineNumber":2,"content":""},{"type":"DELETE","lineNumber":26,"oldContent":"    public Map<String, Double> arpuByPlan(List<Invoice> invoices) {"},{"type":"MODIFY","lineNumber":29,"content":"    public Map<String, Double> arpuByPlan(List<Invoice> invoices) {","oldContent":"                .collect(Collectors.groupingBy(Invoice::getSubscriptionId,"},{"type":"INSERT","lineNumber":30,"content":"        return invoices.stream()"},{"type":"INSERT","lineNumber":31,"content":"                .collect(Collectors.groupingBy(Invoice::getSubscriptionId,"},{"type":"DELETE","lineNumber":33,"oldContent":"        return invoices.stream()"},{"type":"DELETE","lineNumber":36,"oldContent":"                .collect(Collectors.summarizingDouble(Invoice::getOverageCharges));"},{"type":"DELETE","lineNumber":37,"oldContent":"        return Map.of("},{"type":"INSERT","lineNumber":38,"content":"                .collect(Collectors.summarizingDouble(Invoice::getOverageCharges));"},{"type":"INSERT","lineNumber":39,"content":"        return Map.of("},{"type":"INSERT","lineNumber":44,"content":"    }"},{"type":"INSERT","lineNumber":46,"content":"    @Override"},{"type":"DELETE","lineNumber":46,"oldContent":"    }"},{"type":"DELETE","lineNumber":48,"oldContent":"    @Override"},{"type":"DELETE","lineNumber":59,"oldContent":"        Map<String, String> recommendations = new HashMap<>();"},{"type":"MODIFY","lineNumber":61,"content":"        Map<String, String> recommendations = new HashMap<>();","oldContent":"        invoices.forEach(inv -> {"},{"type":"INSERT","lineNumber":62,"content":"        invoices.forEach(inv -> {"}]},{"timestamp":1756644779145,"changes":[{"type":"DELETE","lineNumber":3,"oldContent":"        package com.telecom.service.impl;"},{"type":"INSERT","lineNumber":4,"content":""},{"type":"INSERT","lineNumber":28,"content":"    @Override"},{"type":"DELETE","lineNumber":30,"oldContent":"    @Override"},{"type":"DELETE","lineNumber":36,"oldContent":"                .collect(Collectors.summarizingDouble(Invoice::getOverageCharges));"},{"type":"MODIFY","lineNumber":38,"content":"                .collect(Collectors.summarizingDouble(Invoice::getOverageCharges));","oldContent":"        return Map.of("},{"type":"INSERT","lineNumber":39,"content":"        return Map.of("},{"type":"MODIFY","lineNumber":47,"content":"    public List<Customer> detectCreditRisk(List<Invoice> invoices, List<Customer> customers) {","oldContent":"    public List<Customer> detectCreditRisk(List<Invoice> invoices, List<Customer> customers) {"},{"type":"INSERT","lineNumber":60,"content":"        // simple recommendation: if overage > threshold, suggest higher rental plan"},{"type":"DELETE","lineNumber":62,"oldContent":"        // simple recommendation: if overage > threshold, suggest higher rental plan"}]}]},"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/repository/interfaces/CustomerRepo.java":{"filePath":"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/repository/interfaces/CustomerRepo.java","baseContent":"package com.telecom.repository.interfaces;\n\npublic interface CustomerRepo {\n    void save(Customer customer);\n    Optional<Customer> findById(String customerId);\n    List<Customer> findAll();\n}\n","baseTimestamp":1756643232122,"deltas":[{"timestamp":1756643236042,"changes":[{"type":"INSERT","lineNumber":2,"content":"import com.telecom.models.Customer;"},{"type":"INSERT","lineNumber":3,"content":""}]},{"timestamp":1756643239492,"changes":[{"type":"DELETE","lineNumber":3,"oldContent":"public interface CustomerRepo {"},{"type":"INSERT","lineNumber":4,"content":"import java.util.Optional;"},{"type":"INSERT","lineNumber":5,"content":""},{"type":"INSERT","lineNumber":6,"content":"public interface CustomerRepo {"}]},{"timestamp":1756643244933,"changes":[{"type":"INSERT","lineNumber":3,"content":""},{"type":"INSERT","lineNumber":4,"content":"import java.util.List;"},{"type":"DELETE","lineNumber":5,"oldContent":""},{"type":"DELETE","lineNumber":6,"oldContent":"    void save(Customer customer);"},{"type":"INSERT","lineNumber":8,"content":"    void save(Customer customer);"}]},{"timestamp":1756643547847,"changes":[{"type":"MODIFY","lineNumber":5,"content":"import java.util.Optional;","oldContent":"import java.util.Optional;"},{"type":"INSERT","lineNumber":11,"content":"    void delete(String id);"}]}]},"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/repository/impl/CustomerRepoImpl.java":{"filePath":"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/repository/impl/CustomerRepoImpl.java","baseContent":"package com.telecom.repository.impl;\n\npublic class CustomerRepoImpl implements CustomerRepo {\n}\n","baseTimestamp":1756643272104,"deltas":[{"timestamp":1756643274954,"changes":[{"type":"INSERT","lineNumber":2,"content":"import com.telecom.repository.interfaces.CustomerRepo;"},{"type":"INSERT","lineNumber":3,"content":""}]},{"timestamp":1756643296305,"changes":[{"type":"INSERT","lineNumber":2,"content":"import com.telecom.models.Customer;"},{"type":"INSERT","lineNumber":4,"content":""},{"type":"INSERT","lineNumber":5,"content":"import java.util.List;"},{"type":"INSERT","lineNumber":6,"content":"import java.util.Optional;"},{"type":"INSERT","lineNumber":7,"content":""},{"type":"INSERT","lineNumber":9,"content":"    @Override"},{"type":"INSERT","lineNumber":10,"content":"    public void save(Customer customer) {"},{"type":"INSERT","lineNumber":11,"content":"        "},{"type":"INSERT","lineNumber":12,"content":"    }"},{"type":"INSERT","lineNumber":14,"content":"    @Override"},{"type":"INSERT","lineNumber":15,"content":"    public Optional<Customer> findById(String customerId) {"},{"type":"INSERT","lineNumber":16,"content":"        return Optional.empty();"},{"type":"INSERT","lineNumber":17,"content":"    }"},{"type":"INSERT","lineNumber":18,"content":""},{"type":"INSERT","lineNumber":19,"content":"    @Override"},{"type":"INSERT","lineNumber":20,"content":"    public List<Customer> findAll() {"},{"type":"INSERT","lineNumber":21,"content":"        return List.of();"},{"type":"INSERT","lineNumber":22,"content":"    }"}]},{"timestamp":1756643313931,"changes":[{"type":"DELETE","lineNumber":4,"oldContent":"public class CustomerRepoImpl implements CustomerRepo {"},{"type":"DELETE","lineNumber":6,"oldContent":""},{"type":"MODIFY","lineNumber":8,"content":"public class CustomerRepoImpl implements CustomerRepo {","oldContent":"}"},{"type":"INSERT","lineNumber":9,"content":"    private Map<String, Customer> db = new HashMap<>();"},{"type":"DELETE","lineNumber":12,"oldContent":"    }"},{"type":"DELETE","lineNumber":13,"oldContent":"        return List.of();"},{"type":"DELETE","lineNumber":15,"oldContent":"    public List<Customer> findAll() {"},{"type":"DELETE","lineNumber":17,"oldContent":"    @Override"},{"type":"DELETE","lineNumber":18,"oldContent":"        "},{"type":"DELETE","lineNumber":19,"oldContent":""},{"type":"INSERT","lineNumber":13,"content":"        db.put(customer.getId(), customer);"},{"type":"DELETE","lineNumber":21,"oldContent":"    }"},{"type":"DELETE","lineNumber":22,"oldContent":"        return Optional.empty();"},{"type":"INSERT","lineNumber":15,"content":""},{"type":"INSERT","lineNumber":18,"content":"        return Optional.ofNullable(db.get(customerId));"},{"type":"INSERT","lineNumber":19,"content":"    }"},{"type":"INSERT","lineNumber":20,"content":""},{"type":"INSERT","lineNumber":21,"content":"    @Override"},{"type":"INSERT","lineNumber":22,"content":"    public List<Customer> findAll() {"},{"type":"INSERT","lineNumber":23,"content":"        return new ArrayList<>(db.values());"},{"type":"INSERT","lineNumber":24,"content":"    }"},{"type":"INSERT","lineNumber":25,"content":"}"},{"type":"INSERT","lineNumber":26,"content":""}]},{"timestamp":1756643324246,"changes":[{"type":"INSERT","lineNumber":6,"content":"import java.util.Map;"},{"type":"INSERT","lineNumber":7,"content":"import java.util.Optional;"},{"type":"INSERT","lineNumber":8,"content":""},{"type":"DELETE","lineNumber":8,"oldContent":"import java.util.Optional;"},{"type":"DELETE","lineNumber":10,"oldContent":""},{"type":"DELETE","lineNumber":11,"oldContent":"        db.put(customer.getId(), customer);"},{"type":"DELETE","lineNumber":13,"oldContent":""},{"type":"DELETE","lineNumber":15,"oldContent":"        return Optional.ofNullable(db.get(customerId));"},{"type":"INSERT","lineNumber":14,"content":"        db.put(customer.getId(), customer);"},{"type":"INSERT","lineNumber":17,"content":"    @Override"},{"type":"INSERT","lineNumber":18,"content":"    public Optional<Customer> findById(String customerId) {"},{"type":"INSERT","lineNumber":19,"content":"        return Optional.ofNullable(db.get(customerId));"},{"type":"INSERT","lineNumber":21,"content":""},{"type":"DELETE","lineNumber":22,"oldContent":"    @Override"},{"type":"DELETE","lineNumber":24,"oldContent":"    public Optional<Customer> findById(String customerId) {"}]},{"timestamp":1756643330442,"changes":[{"type":"INSERT","lineNumber":5,"content":"import java.util.ArrayList;"},{"type":"DELETE","lineNumber":7,"oldContent":"public class CustomerRepoImpl implements CustomerRepo {"},{"type":"INSERT","lineNumber":9,"content":""},{"type":"INSERT","lineNumber":10,"content":"public class CustomerRepoImpl implements CustomerRepo {"},{"type":"DELETE","lineNumber":11,"oldContent":""},{"type":"DELETE","lineNumber":13,"oldContent":"        db.put(customer.getId(), customer);"},{"type":"INSERT","lineNumber":15,"content":"        db.put(customer.getId(), customer);"},{"type":"DELETE","lineNumber":16,"oldContent":"    @Override"},{"type":"INSERT","lineNumber":18,"content":"    @Override"},{"type":"DELETE","lineNumber":19,"oldContent":"    }"},{"type":"INSERT","lineNumber":21,"content":"    }"},{"type":"INSERT","lineNumber":22,"content":""},{"type":"DELETE","lineNumber":23,"oldContent":""}]},{"timestamp":1756643340345,"changes":[{"type":"DELETE","lineNumber":5,"oldContent":"import java.util.ArrayList;"},{"type":"DELETE","lineNumber":6,"oldContent":"import java.util.List;"},{"type":"DELETE","lineNumber":7,"oldContent":"import java.util.Map;"},{"type":"DELETE","lineNumber":8,"oldContent":"import java.util.Optional;"},{"type":"INSERT","lineNumber":5,"content":"import java.util.*;"},{"type":"DELETE","lineNumber":10,"oldContent":"    private Map<String, Customer> db = new HashMap<>();"},{"type":"INSERT","lineNumber":8,"content":"    private Map<String, Customer> db = new HashMap<>();"},{"type":"DELETE","lineNumber":22,"oldContent":"    @Override"},{"type":"INSERT","lineNumber":20,"content":"    @Override"}]},{"timestamp":1756643726377,"changes":[{"type":"DELETE","lineNumber":6,"oldContent":"    private Map<String, Customer> db = new HashMap<>();"},{"type":"INSERT","lineNumber":8,"content":"    private Map<String, Customer> db = new HashMap<>();"},{"type":"DELETE","lineNumber":17,"oldContent":"    @Override"},{"type":"INSERT","lineNumber":20,"content":"    @Override"},{"type":"INSERT","lineNumber":24,"content":""},{"type":"INSERT","lineNumber":25,"content":"    @Override"},{"type":"INSERT","lineNumber":26,"content":"    public void delete(String id) {"},{"type":"INSERT","lineNumber":27,"content":"        "},{"type":"INSERT","lineNumber":28,"content":"    }"}]},{"timestamp":1756643734614,"changes":[{"type":"MODIFY","lineNumber":8,"content":"    private Map<String, Customer> db = new HashMap<>();","oldContent":"    private Map<String, Customer> db = new HashMap<>();"},{"type":"MODIFY","lineNumber":20,"content":"    @Override","oldContent":"    @Override"},{"type":"DELETE","lineNumber":25,"oldContent":"}"},{"type":"MODIFY","lineNumber":27,"content":"        db.remove(id);","oldContent":""},{"type":"DELETE","lineNumber":30,"oldContent":"        "},{"type":"INSERT","lineNumber":29,"content":"}"},{"type":"INSERT","lineNumber":30,"content":""}]}]},"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/repository/impl/PlanRepoImpl.java":{"filePath":"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/repository/impl/PlanRepoImpl.java","baseContent":"package com.telecom.repository.impl;\n\npublic class PlanRepoImpl {\n    void save(Plan plan);\n    Optional<Plan> findById(String id);\n    List<Plan> findAll();\n    void delete(String id);\n}\n","baseTimestamp":1756643561742,"deltas":[{"timestamp":1756643565513,"changes":[{"type":"INSERT","lineNumber":2,"content":"import com.telecom.models.Plan;"},{"type":"INSERT","lineNumber":3,"content":""}]},{"timestamp":1756643568436,"changes":[{"type":"DELETE","lineNumber":3,"oldContent":"public class PlanRepoImpl {"},{"type":"INSERT","lineNumber":4,"content":"import java.util.Optional;"},{"type":"INSERT","lineNumber":5,"content":""},{"type":"INSERT","lineNumber":6,"content":"public class PlanRepoImpl {"}]},{"timestamp":1756643572910,"changes":[{"type":"INSERT","lineNumber":3,"content":""},{"type":"INSERT","lineNumber":4,"content":"import java.util.List;"},{"type":"DELETE","lineNumber":5,"oldContent":""},{"type":"DELETE","lineNumber":6,"oldContent":"    void save(Plan plan);"},{"type":"INSERT","lineNumber":8,"content":"    void save(Plan plan);"}]},{"timestamp":1756643585294,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"import com.telecom.models.Plan;"},{"type":"DELETE","lineNumber":3,"oldContent":""},{"type":"DELETE","lineNumber":4,"oldContent":"import java.util.Optional;"},{"type":"DELETE","lineNumber":5,"oldContent":"import java.util.List;"},{"type":"DELETE","lineNumber":6,"oldContent":""},{"type":"DELETE","lineNumber":8,"oldContent":"    void save(Plan plan);"},{"type":"DELETE","lineNumber":9,"oldContent":"    Optional<Plan> findById(String id);"},{"type":"DELETE","lineNumber":10,"oldContent":"    List<Plan> findAll();"},{"type":"DELETE","lineNumber":11,"oldContent":"    void delete(String id);"}]},{"timestamp":1756643752683,"changes":[{"type":"MODIFY","lineNumber":2,"content":"public class PlanRepoImpl implements PlanRepo {","oldContent":"public class PlanRepoImpl {"},{"type":"INSERT","lineNumber":3,"content":"    private final Map<String, Plan> db = new HashMap<>();"},{"type":"INSERT","lineNumber":4,"content":""},{"type":"INSERT","lineNumber":5,"content":"    @Override"},{"type":"INSERT","lineNumber":6,"content":"    public void save(Plan plan) {"},{"type":"INSERT","lineNumber":7,"content":"        db.put(plan.getId(), plan);"},{"type":"INSERT","lineNumber":8,"content":"    }"},{"type":"INSERT","lineNumber":9,"content":""},{"type":"INSERT","lineNumber":10,"content":"    @Override"},{"type":"INSERT","lineNumber":11,"content":"    public Optional<Plan> findById(String id) {"},{"type":"INSERT","lineNumber":12,"content":"        return Optional.ofNullable(db.get(id));"},{"type":"INSERT","lineNumber":13,"content":"    }"},{"type":"INSERT","lineNumber":14,"content":""},{"type":"INSERT","lineNumber":15,"content":"    @Override"},{"type":"INSERT","lineNumber":16,"content":"    public List<Plan> findAll() {"},{"type":"INSERT","lineNumber":17,"content":"        return new ArrayList<>(db.values());"},{"type":"INSERT","lineNumber":18,"content":"    }"},{"type":"INSERT","lineNumber":19,"content":""},{"type":"INSERT","lineNumber":20,"content":"    @Override"},{"type":"INSERT","lineNumber":21,"content":"    public void delete(String id) {"},{"type":"INSERT","lineNumber":22,"content":"        db.remove(id);"},{"type":"INSERT","lineNumber":23,"content":"    }"}]},{"timestamp":1756643756800,"changes":[{"type":"INSERT","lineNumber":2,"content":"import com.telecom.models.Plan;"},{"type":"INSERT","lineNumber":3,"content":""},{"type":"DELETE","lineNumber":4,"oldContent":"}"},{"type":"DELETE","lineNumber":6,"oldContent":""},{"type":"DELETE","lineNumber":8,"oldContent":"    }"},{"type":"DELETE","lineNumber":10,"oldContent":"        db.remove(id);"},{"type":"DELETE","lineNumber":12,"oldContent":"    public void delete(String id) {"},{"type":"DELETE","lineNumber":14,"oldContent":"    @Override"},{"type":"DELETE","lineNumber":16,"oldContent":""},{"type":"DELETE","lineNumber":18,"oldContent":"    }"},{"type":"DELETE","lineNumber":20,"oldContent":"        return new ArrayList<>(db.values());"},{"type":"INSERT","lineNumber":15,"content":"    }"},{"type":"INSERT","lineNumber":16,"content":""},{"type":"INSERT","lineNumber":17,"content":"    @Override"},{"type":"INSERT","lineNumber":19,"content":"        return new ArrayList<>(db.values());"},{"type":"INSERT","lineNumber":21,"content":""},{"type":"INSERT","lineNumber":23,"content":"    public void delete(String id) {"},{"type":"INSERT","lineNumber":24,"content":"        db.remove(id);"},{"type":"INSERT","lineNumber":25,"content":"    }"},{"type":"INSERT","lineNumber":26,"content":"}"}]},{"timestamp":1756643759167,"changes":[{"type":"DELETE","lineNumber":3,"oldContent":"public class PlanRepoImpl implements PlanRepo {"},{"type":"INSERT","lineNumber":4,"content":"import java.util.Optional;"},{"type":"INSERT","lineNumber":5,"content":""},{"type":"INSERT","lineNumber":6,"content":"public class PlanRepoImpl implements PlanRepo {"},{"type":"DELETE","lineNumber":11,"oldContent":"    }"},{"type":"DELETE","lineNumber":13,"oldContent":""},{"type":"DELETE","lineNumber":15,"oldContent":"    @Override"},{"type":"DELETE","lineNumber":16,"oldContent":"        return new ArrayList<>(db.values());"},{"type":"DELETE","lineNumber":18,"oldContent":""},{"type":"DELETE","lineNumber":20,"oldContent":"    public List<Plan> findAll() {"},{"type":"DELETE","lineNumber":21,"oldContent":"    public void delete(String id) {"},{"type":"DELETE","lineNumber":23,"oldContent":"        db.remove(id);"},{"type":"INSERT","lineNumber":18,"content":""},{"type":"INSERT","lineNumber":20,"content":"    public List<Plan> findAll() {"},{"type":"INSERT","lineNumber":21,"content":"        return new ArrayList<>(db.values());"},{"type":"INSERT","lineNumber":24,"content":"    @Override"},{"type":"INSERT","lineNumber":25,"content":"    public void delete(String id) {"},{"type":"INSERT","lineNumber":26,"content":"        db.remove(id);"},{"type":"INSERT","lineNumber":27,"content":"    }"},{"type":"INSERT","lineNumber":29,"content":""}]},{"timestamp":1756643763253,"changes":[{"type":"INSERT","lineNumber":3,"content":""},{"type":"INSERT","lineNumber":4,"content":"import java.util.ArrayList;"},{"type":"INSERT","lineNumber":5,"content":"import java.util.List;"},{"type":"DELETE","lineNumber":5,"oldContent":""},{"type":"DELETE","lineNumber":6,"oldContent":"    private final Map<String, Plan> db = new HashMap<>();"},{"type":"INSERT","lineNumber":9,"content":"    private final Map<String, Plan> db = new HashMap<>();"},{"type":"DELETE","lineNumber":16,"oldContent":""},{"type":"INSERT","lineNumber":19,"content":"    }"},{"type":"INSERT","lineNumber":20,"content":""},{"type":"INSERT","lineNumber":21,"content":"    @Override"},{"type":"INSERT","lineNumber":25,"content":""},{"type":"DELETE","lineNumber":22,"oldContent":"    @Override"},{"type":"DELETE","lineNumber":24,"oldContent":"    }"},{"type":"DELETE","lineNumber":26,"oldContent":""}]},{"timestamp":1756643765980,"changes":[{"type":"DELETE","lineNumber":4,"oldContent":"import java.util.Optional;"},{"type":"DELETE","lineNumber":6,"oldContent":""},{"type":"DELETE","lineNumber":8,"oldContent":"public class PlanRepoImpl implements PlanRepo {"},{"type":"INSERT","lineNumber":6,"content":"import java.util.Optional;"},{"type":"INSERT","lineNumber":8,"content":"public class PlanRepoImpl implements PlanRepo {"},{"type":"INSERT","lineNumber":10,"content":""},{"type":"DELETE","lineNumber":18,"oldContent":"        return Optional.ofNullable(db.get(id));"},{"type":"DELETE","lineNumber":19,"oldContent":"    public List<Plan> findAll() {"},{"type":"INSERT","lineNumber":18,"content":"        return  Optional.ofNullable(db.get(id));"},{"type":"MODIFY","lineNumber":21,"content":"    @Override","oldContent":"        return new ArrayList<>(db.values());"},{"type":"INSERT","lineNumber":22,"content":"    public List<Plan> findAll() {"},{"type":"INSERT","lineNumber":23,"content":"        return new ArrayList<>(db.values());"},{"type":"INSERT","lineNumber":25,"content":""},{"type":"DELETE","lineNumber":25,"oldContent":"    @Override"},{"type":"DELETE","lineNumber":27,"oldContent":""}]},{"timestamp":1756643787706,"changes":[{"type":"INSERT","lineNumber":3,"content":"import com.telecom.repository.interfaces.PlanRepo;"},{"type":"DELETE","lineNumber":5,"oldContent":"import java.util.Optional;"},{"type":"MODIFY","lineNumber":7,"content":"import java.util.Optional;","oldContent":"public class PlanRepoImpl implements PlanRepo {"},{"type":"MODIFY","lineNumber":9,"content":"public class PlanRepoImpl implements PlanRepo {","oldContent":""},{"type":"INSERT","lineNumber":11,"content":""},{"type":"INSERT","lineNumber":21,"content":""},{"type":"DELETE","lineNumber":22,"oldContent":""},{"type":"DELETE","lineNumber":25,"oldContent":"    @Override"},{"type":"INSERT","lineNumber":27,"content":"    @Override"}]},{"timestamp":1756643790659,"changes":[{"type":"INSERT","lineNumber":6,"content":"import java.util.HashMap;"},{"type":"DELETE","lineNumber":21,"oldContent":"    @Override"},{"type":"INSERT","lineNumber":23,"content":"    @Override"}]},{"timestamp":1756643793734,"changes":[{"type":"DELETE","lineNumber":5,"oldContent":"import java.util.ArrayList;"},{"type":"DELETE","lineNumber":6,"oldContent":"import java.util.HashMap;"},{"type":"DELETE","lineNumber":7,"oldContent":"import java.util.List;"},{"type":"DELETE","lineNumber":8,"oldContent":"import java.util.Optional;"},{"type":"INSERT","lineNumber":5,"content":"import java.util.*;"}]},{"timestamp":1756661151692,"changes":[{"type":"MODIFY","lineNumber":11,"content":"    public Plan save(Plan plan) {","oldContent":"    public void save(Plan plan) {"},{"type":"INSERT","lineNumber":13,"content":"        return plan;"},{"type":"INSERT","lineNumber":30,"content":""},{"type":"INSERT","lineNumber":31,"content":"    @Override"},{"type":"INSERT","lineNumber":32,"content":"    public Plan update(Plan plan) {"},{"type":"INSERT","lineNumber":33,"content":"        db.put(plan.getId(), plan);"},{"type":"INSERT","lineNumber":34,"content":"        return plan;"},{"type":"INSERT","lineNumber":35,"content":"    }"}]}]},"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/repository/interfaces/PlanRepo.java":{"filePath":"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/repository/interfaces/PlanRepo.java","baseContent":"package com.telecom.repository.interfaces;\n\npublic interface PlanRepo {\n    void save(Plan plan);\n    Optional<Plan> findById(String id);\n    List<Plan> findAll();\n    void delete(String id);\n}\n","baseTimestamp":1756643590692,"deltas":[{"timestamp":1756643596028,"changes":[{"type":"INSERT","lineNumber":2,"content":"import com.telecom.models.Plan;"},{"type":"INSERT","lineNumber":3,"content":""}]},{"timestamp":1756643601150,"changes":[{"type":"DELETE","lineNumber":3,"oldContent":"public interface PlanRepo {"},{"type":"INSERT","lineNumber":4,"content":"import java.util.Optional;"},{"type":"INSERT","lineNumber":5,"content":""},{"type":"INSERT","lineNumber":6,"content":"public interface PlanRepo {"}]},{"timestamp":1756643609110,"changes":[{"type":"INSERT","lineNumber":3,"content":""},{"type":"INSERT","lineNumber":4,"content":"import java.util.List;"},{"type":"DELETE","lineNumber":5,"oldContent":""},{"type":"DELETE","lineNumber":6,"oldContent":"    void save(Plan plan);"},{"type":"INSERT","lineNumber":8,"content":"    void save(Plan plan);"}]},{"timestamp":1756661151690,"changes":[{"type":"MODIFY","lineNumber":5,"content":"import java.util.Optional;","oldContent":"import java.util.Optional;"},{"type":"MODIFY","lineNumber":8,"content":"    Plan save(Plan plan);","oldContent":"    void save(Plan plan);"},{"type":"INSERT","lineNumber":12,"content":"    Plan update(Plan plan);"}]}]},"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/repository/interfaces/SubscriptionRepo.java":{"filePath":"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/repository/interfaces/SubscriptionRepo.java","baseContent":"package com.telecom.repository.interfaces;\n\npublic interface SubscriptionRepo {\n    void save(Subscription subscription);\n    Optional<Subscription> findById(String id);\n    List<Subscription> findAll();\n    List<Subscription> findByCustomerId(String customerId);\n    void delete(String id);\n}\n","baseTimestamp":1756643622678,"deltas":[{"timestamp":1756643630423,"changes":[{"type":"INSERT","lineNumber":2,"content":"import com.telecom.models.Subscription;"},{"type":"INSERT","lineNumber":3,"content":""}]},{"timestamp":1756643633653,"changes":[{"type":"DELETE","lineNumber":3,"oldContent":"public interface SubscriptionRepo {"},{"type":"INSERT","lineNumber":4,"content":"import java.util.Optional;"},{"type":"INSERT","lineNumber":5,"content":""},{"type":"INSERT","lineNumber":6,"content":"public interface SubscriptionRepo {"}]},{"timestamp":1756643637245,"changes":[{"type":"INSERT","lineNumber":3,"content":""},{"type":"INSERT","lineNumber":4,"content":"import java.util.List;"},{"type":"DELETE","lineNumber":5,"oldContent":""},{"type":"DELETE","lineNumber":6,"oldContent":"    void save(Subscription subscription);"},{"type":"INSERT","lineNumber":8,"content":"    void save(Subscription subscription);"}]}]},"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/repository/interfaces/InvoiceRepo.java":{"filePath":"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/repository/interfaces/InvoiceRepo.java","baseContent":"package com.telecom.repository.interfaces;\n\npublic interface InvoiceRepo {\n    void save(Invoice invoice);\n    Optional<Invoice> findById(String id);\n    List<Invoice> findAll();\n    List<Invoice> findBySubscriptionId(String subscriptionId);\n    void delete(String id);\n}\n","baseTimestamp":1756643651622,"deltas":[{"timestamp":1756643654910,"changes":[{"type":"INSERT","lineNumber":2,"content":"import com.telecom.models.Invoice;"},{"type":"INSERT","lineNumber":3,"content":""}]},{"timestamp":1756643657652,"changes":[{"type":"DELETE","lineNumber":3,"oldContent":"public interface InvoiceRepo {"},{"type":"INSERT","lineNumber":4,"content":"import java.util.Optional;"},{"type":"INSERT","lineNumber":5,"content":""},{"type":"INSERT","lineNumber":6,"content":"public interface InvoiceRepo {"}]},{"timestamp":1756643661701,"changes":[{"type":"INSERT","lineNumber":3,"content":""},{"type":"INSERT","lineNumber":4,"content":"import java.util.List;"},{"type":"DELETE","lineNumber":5,"oldContent":""},{"type":"DELETE","lineNumber":6,"oldContent":"    void save(Invoice invoice);"},{"type":"INSERT","lineNumber":8,"content":"    void save(Invoice invoice);"}]},{"timestamp":1756661151671,"changes":[{"type":"MODIFY","lineNumber":5,"content":"import java.util.Optional;","oldContent":"import java.util.Optional;"},{"type":"MODIFY","lineNumber":8,"content":"    Invoice save(Invoice invoice);","oldContent":"    void save(Invoice invoice);"},{"type":"INSERT","lineNumber":13,"content":"    Invoice update(Invoice invoice);"}]}]},"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/repository/impl/SubscriptionRepoImpl.java":{"filePath":"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/repository/impl/SubscriptionRepoImpl.java","baseContent":"package com.telecom.repository.impl;\n\npublic class SubscriptionRepoImpl {\n}\n","baseTimestamp":1756643807194,"deltas":[{"timestamp":1756643816264,"changes":[{"type":"MODIFY","lineNumber":2,"content":"public class SubscriptionRepoImpl implements SubscriptionRepo{","oldContent":"public class SubscriptionRepoImpl {"}]},{"timestamp":1756643819113,"changes":[{"type":"MODIFY","lineNumber":2,"content":"import com.telecom.repository.interfaces.SubscriptionRepo;","oldContent":"public class SubscriptionRepoImpl implements SubscriptionRepo{"},{"type":"INSERT","lineNumber":3,"content":""},{"type":"INSERT","lineNumber":4,"content":"public class SubscriptionRepoImpl implements SubscriptionRepo {"}]},{"timestamp":1756643821708,"changes":[{"type":"DELETE","lineNumber":4,"oldContent":"}"},{"type":"INSERT","lineNumber":5,"content":"    "},{"type":"INSERT","lineNumber":6,"content":"}"}]},{"timestamp":1756643830591,"changes":[{"type":"DELETE","lineNumber":4,"oldContent":"    "},{"type":"INSERT","lineNumber":5,"content":"    private final Map<String, Subscription> db = new HashMap<>();"},{"type":"INSERT","lineNumber":6,"content":""},{"type":"INSERT","lineNumber":7,"content":"    @Override"},{"type":"INSERT","lineNumber":8,"content":"    public void save(Subscription subscription) {"},{"type":"INSERT","lineNumber":9,"content":"        db.put(subscription.getId(), subscription);"},{"type":"INSERT","lineNumber":10,"content":"    }"},{"type":"INSERT","lineNumber":11,"content":""},{"type":"INSERT","lineNumber":12,"content":"    @Override"},{"type":"INSERT","lineNumber":13,"content":"    public Optional<Subscription> findById(String id) {"},{"type":"INSERT","lineNumber":14,"content":"        return Optional.ofNullable(db.get(id));"},{"type":"INSERT","lineNumber":15,"content":"    }"},{"type":"INSERT","lineNumber":16,"content":""},{"type":"INSERT","lineNumber":17,"content":"    @Override"},{"type":"INSERT","lineNumber":18,"content":"    public List<Subscription> findAll() {"},{"type":"INSERT","lineNumber":19,"content":"        return new ArrayList<>(db.values());"},{"type":"INSERT","lineNumber":20,"content":"    }"},{"type":"INSERT","lineNumber":21,"content":""},{"type":"INSERT","lineNumber":22,"content":"    @Override"},{"type":"INSERT","lineNumber":23,"content":"    public List<Subscription> findByCustomerId(String customerId) {"},{"type":"INSERT","lineNumber":24,"content":"        List<Subscription> result = new ArrayList<>();"},{"type":"INSERT","lineNumber":25,"content":"        for (Subscription sub : db.values()) {"},{"type":"INSERT","lineNumber":26,"content":"            if (sub.getCustomerId().equals(customerId)) {"},{"type":"INSERT","lineNumber":27,"content":"                result.add(sub);"},{"type":"INSERT","lineNumber":28,"content":"            }"},{"type":"INSERT","lineNumber":29,"content":"        }"},{"type":"INSERT","lineNumber":30,"content":"        return result;"},{"type":"INSERT","lineNumber":31,"content":"    }"},{"type":"INSERT","lineNumber":32,"content":""},{"type":"INSERT","lineNumber":33,"content":"    @Override"},{"type":"INSERT","lineNumber":34,"content":"    public void delete(String id) {"},{"type":"INSERT","lineNumber":35,"content":"        db.remove(id);"},{"type":"INSERT","lineNumber":36,"content":"    }"}]},{"timestamp":1756643845084,"changes":[{"type":"INSERT","lineNumber":2,"content":"import com.telecom.models.Subscription;"},{"type":"DELETE","lineNumber":4,"oldContent":"    private final Map<String, Subscription> db = new HashMap<>();"},{"type":"INSERT","lineNumber":6,"content":"    private final Map<String, Subscription> db = new HashMap<>();"},{"type":"DELETE","lineNumber":7,"oldContent":"}"},{"type":"DELETE","lineNumber":9,"oldContent":""},{"type":"DELETE","lineNumber":11,"oldContent":"    }"},{"type":"DELETE","lineNumber":13,"oldContent":"        db.remove(id);"},{"type":"DELETE","lineNumber":15,"oldContent":"    public void delete(String id) {"},{"type":"DELETE","lineNumber":18,"oldContent":"    @Override"},{"type":"DELETE","lineNumber":19,"oldContent":""},{"type":"DELETE","lineNumber":21,"oldContent":"    }"},{"type":"DELETE","lineNumber":23,"oldContent":"        return result;"},{"type":"DELETE","lineNumber":25,"oldContent":"        }"},{"type":"DELETE","lineNumber":27,"oldContent":"            }"},{"type":"DELETE","lineNumber":29,"oldContent":"                result.add(sub);"},{"type":"DELETE","lineNumber":31,"oldContent":"            if (sub.getCustomerId().equals(customerId)) {"},{"type":"DELETE","lineNumber":33,"oldContent":"        for (Subscription sub : db.values()) {"},{"type":"DELETE","lineNumber":35,"oldContent":"        List<Subscription> result = new ArrayList<>();"},{"type":"INSERT","lineNumber":23,"content":"    @Override"},{"type":"INSERT","lineNumber":25,"content":"        List<Subscription> result = new ArrayList<>();"},{"type":"INSERT","lineNumber":26,"content":"        for (Subscription sub : db.values()) {"},{"type":"INSERT","lineNumber":27,"content":"            if (sub.getCustomerId().equals(customerId)) {"},{"type":"INSERT","lineNumber":28,"content":"                result.add(sub);"},{"type":"INSERT","lineNumber":29,"content":"            }"},{"type":"INSERT","lineNumber":30,"content":"        }"},{"type":"INSERT","lineNumber":31,"content":"        return result;"},{"type":"INSERT","lineNumber":32,"content":"    }"},{"type":"INSERT","lineNumber":33,"content":""},{"type":"INSERT","lineNumber":35,"content":"    public void delete(String id) {"},{"type":"INSERT","lineNumber":36,"content":"        db.remove(id);"},{"type":"INSERT","lineNumber":37,"content":"    }"},{"type":"INSERT","lineNumber":38,"content":"}"},{"type":"INSERT","lineNumber":39,"content":""}]},{"timestamp":1756643849512,"changes":[{"type":"INSERT","lineNumber":5,"content":"import java.util.Map;"},{"type":"INSERT","lineNumber":6,"content":""},{"type":"INSERT","lineNumber":18,"content":"    }"},{"type":"INSERT","lineNumber":19,"content":""},{"type":"INSERT","lineNumber":21,"content":"    public List<Subscription> findAll() {"},{"type":"INSERT","lineNumber":22,"content":"        return new ArrayList<>(db.values());"},{"type":"INSERT","lineNumber":24,"content":""},{"type":"INSERT","lineNumber":25,"content":"    @Override"},{"type":"INSERT","lineNumber":26,"content":"    public List<Subscription> findByCustomerId(String customerId) {"},{"type":"DELETE","lineNumber":20,"oldContent":""},{"type":"DELETE","lineNumber":23,"oldContent":"    @Override"},{"type":"DELETE","lineNumber":26,"oldContent":"    public List<Subscription> findAll() {"},{"type":"DELETE","lineNumber":29,"oldContent":"        return new ArrayList<>(db.values());"},{"type":"DELETE","lineNumber":31,"oldContent":"    }"},{"type":"INSERT","lineNumber":36,"content":"    @Override"},{"type":"DELETE","lineNumber":34,"oldContent":""},{"type":"DELETE","lineNumber":36,"oldContent":"    public List<Subscription> findByCustomerId(String customerId) {"},{"type":"DELETE","lineNumber":38,"oldContent":"    @Override"}]},{"timestamp":1756643851767,"changes":[{"type":"INSERT","lineNumber":5,"content":"import java.util.HashMap;"},{"type":"DELETE","lineNumber":6,"oldContent":"public class SubscriptionRepoImpl implements SubscriptionRepo {"},{"type":"INSERT","lineNumber":8,"content":"public class SubscriptionRepoImpl implements SubscriptionRepo {"},{"type":"INSERT","lineNumber":19,"content":"    }"},{"type":"INSERT","lineNumber":20,"content":""},{"type":"INSERT","lineNumber":22,"content":"    public List<Subscription> findAll() {"},{"type":"INSERT","lineNumber":23,"content":"        return new ArrayList<>(db.values());"},{"type":"DELETE","lineNumber":20,"oldContent":"    }"},{"type":"DELETE","lineNumber":21,"oldContent":"        List<Subscription> result = new ArrayList<>();"},{"type":"INSERT","lineNumber":26,"content":"    @Override"},{"type":"INSERT","lineNumber":27,"content":"    public List<Subscription> findByCustomerId(String customerId) {"},{"type":"INSERT","lineNumber":28,"content":"        List<Subscription> result = new ArrayList<>();"},{"type":"DELETE","lineNumber":24,"oldContent":"    public List<Subscription> findAll() {"},{"type":"DELETE","lineNumber":26,"oldContent":"        return new ArrayList<>(db.values());"},{"type":"DELETE","lineNumber":28,"oldContent":""},{"type":"DELETE","lineNumber":30,"oldContent":"    @Override"},{"type":"DELETE","lineNumber":32,"oldContent":"    public List<Subscription> findByCustomerId(String customerId) {"},{"type":"INSERT","lineNumber":37,"content":"    @Override"},{"type":"DELETE","lineNumber":39,"oldContent":"    @Override"}]},{"timestamp":1756643855729,"changes":[{"type":"INSERT","lineNumber":7,"content":"import java.util.Optional;"},{"type":"DELETE","lineNumber":19,"oldContent":"    @Override"},{"type":"DELETE","lineNumber":21,"oldContent":"    }"},{"type":"INSERT","lineNumber":22,"content":"    @Override"},{"type":"DELETE","lineNumber":24,"oldContent":""},{"type":"DELETE","lineNumber":26,"oldContent":"        for (Subscription sub : db.values()) {"},{"type":"DELETE","lineNumber":27,"oldContent":"            if (sub.getCustomerId().equals(customerId)) {"},{"type":"INSERT","lineNumber":25,"content":"    }"},{"type":"INSERT","lineNumber":26,"content":""},{"type":"MODIFY","lineNumber":30,"content":"        for (Subscription sub : db.values()) {","oldContent":"                result.add(sub);"},{"type":"INSERT","lineNumber":31,"content":"            if (sub.getCustomerId().equals(customerId)) {"},{"type":"INSERT","lineNumber":32,"content":"                result.add(sub);"},{"type":"DELETE","lineNumber":37,"oldContent":"    public void delete(String id) {"},{"type":"INSERT","lineNumber":39,"content":"    public void delete(String id) {"}]},{"timestamp":1756643862050,"changes":[{"type":"INSERT","lineNumber":6,"content":"import java.util.List;"},{"type":"DELETE","lineNumber":21,"oldContent":"    @Override"},{"type":"INSERT","lineNumber":23,"content":"    @Override"},{"type":"DELETE","lineNumber":24,"oldContent":"    }"},{"type":"INSERT","lineNumber":26,"content":"    }"},{"type":"INSERT","lineNumber":30,"content":"        List<Subscription> result = new ArrayList<>();"},{"type":"DELETE","lineNumber":31,"oldContent":"        List<Subscription> result = new ArrayList<>();"}]},{"timestamp":1756643864661,"changes":[{"type":"DELETE","lineNumber":5,"oldContent":"import java.util.HashMap;"},{"type":"DELETE","lineNumber":6,"oldContent":"import java.util.List;"},{"type":"DELETE","lineNumber":7,"oldContent":"import java.util.Map;"},{"type":"DELETE","lineNumber":8,"oldContent":"import java.util.Optional;"},{"type":"INSERT","lineNumber":5,"content":"import java.util.*;"},{"type":"DELETE","lineNumber":30,"oldContent":"        for (Subscription sub : db.values()) {"},{"type":"INSERT","lineNumber":28,"content":"        for (Subscription sub : db.values()) {"}]},{"timestamp":1756644023319,"changes":[{"type":"MODIFY","lineNumber":12,"content":"        db.put(Subscription.getId(), subscription);","oldContent":"        db.put(subscription.getId(), subscription);"},{"type":"DELETE","lineNumber":25,"oldContent":"        for (Subscription sub : db.values()) {"},{"type":"INSERT","lineNumber":28,"content":"        for (Subscription sub : db.values()) {"}]},{"timestamp":1756644027679,"changes":[{"type":"MODIFY","lineNumber":12,"content":"        db.put(subscription.getId(), subscription);","oldContent":"        db.put(Subscription.getId(), subscription);"},{"type":"MODIFY","lineNumber":28,"content":"        for (Subscription sub : db.values()) {","oldContent":"        for (Subscription sub : db.values()) {"}]},{"timestamp":1756644033314,"changes":[{"type":"MODIFY","lineNumber":12,"content":"        db.put(Subscription.getId(), subscription);","oldContent":"        db.put(subscription.getId(), subscription);"},{"type":"INSERT","lineNumber":27,"content":"        List<Subscription> result = new ArrayList<>();"},{"type":"DELETE","lineNumber":28,"oldContent":"        for (Subscription sub : db.values()) {"}]},{"timestamp":1756661151712,"changes":[{"type":"MODIFY","lineNumber":12,"content":"        db.put(subscription.getId(), subscription);","oldContent":"        db.put(Subscription.getId(), subscription);"}]}]},"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/service/interfaces/CustomerService.java":{"filePath":"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/service/interfaces/CustomerService.java","baseContent":"package com.telecom.service.interfaces;\n\npublic interface CustomerService {\n    \n}\n","baseTimestamp":1756644370041,"deltas":[{"timestamp":1756644373663,"changes":[{"type":"MODIFY","lineNumber":3,"content":"    void addCustomer(Customer customer);","oldContent":"    "},{"type":"INSERT","lineNumber":4,"content":"    Customer getCustomer(String id);"},{"type":"INSERT","lineNumber":5,"content":"    List<Customer> getAllCustomers();"}]},{"timestamp":1756644376949,"changes":[{"type":"INSERT","lineNumber":2,"content":"import com.telecom.models.Customer;"},{"type":"INSERT","lineNumber":3,"content":""},{"type":"DELETE","lineNumber":5,"oldContent":"}"},{"type":"INSERT","lineNumber":8,"content":"}"}]},{"timestamp":1756644381247,"changes":[{"type":"DELETE","lineNumber":3,"oldContent":"public interface CustomerService {"},{"type":"INSERT","lineNumber":4,"content":"import java.util.List;"},{"type":"INSERT","lineNumber":5,"content":""},{"type":"INSERT","lineNumber":6,"content":"public interface CustomerService {"},{"type":"DELETE","lineNumber":8,"oldContent":""},{"type":"INSERT","lineNumber":11,"content":""}]}]},"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/service/interfaces/PlanService.java":{"filePath":"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/service/interfaces/PlanService.java","baseContent":"package com.telecom.service.interfaces;\n\npublic interface PlanService {\n    void addPlan(Plan plan);\n    Plan getPlan(String id);\n    List<Plan> getAllPlans();\n}\n","baseTimestamp":1756644391100,"deltas":[{"timestamp":1756644394063,"changes":[{"type":"INSERT","lineNumber":2,"content":"import com.telecom.models.Plan;"},{"type":"INSERT","lineNumber":3,"content":""}]},{"timestamp":1756644398424,"changes":[{"type":"DELETE","lineNumber":3,"oldContent":"public interface PlanService {"},{"type":"INSERT","lineNumber":4,"content":"import java.util.List;"},{"type":"INSERT","lineNumber":5,"content":""},{"type":"INSERT","lineNumber":6,"content":"public interface PlanService {"}]},{"timestamp":1756661151733,"changes":[{"type":"INSERT","lineNumber":3,"content":""},{"type":"DELETE","lineNumber":5,"oldContent":""},{"type":"MODIFY","lineNumber":7,"content":"    Plan addPlan(Plan plan);","oldContent":"    void addPlan(Plan plan);"},{"type":"INSERT","lineNumber":10,"content":"    Plan updatePlan(Plan plan);"},{"type":"INSERT","lineNumber":11,"content":"    void deletePlan(String id);"}]}]},"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/service/interfaces/SubscriptionService.java":{"filePath":"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/service/interfaces/SubscriptionService.java","baseContent":"package com.telecom.service.interfaces;\n\npublic interface SubscriptionService {\n    void addSubscription(Subscription subscription);\n    Subscription getSubscription(String id);\n    List<Subscription> getCustomerSubscriptions(String customerId);\n\n    void requestMNP(String subscriptionId, String targetOperator);\n    void completeMNP(String subscriptionId);\n    void cancelMNP(String subscriptionId);\n    void changePlan(String subscriptionId, String newPlanId);\n}\n","baseTimestamp":1756644412751,"deltas":[{"timestamp":1756644418701,"changes":[{"type":"INSERT","lineNumber":2,"content":"import com.telecom.models.Subscription;"},{"type":"INSERT","lineNumber":3,"content":""}]},{"timestamp":1756644423454,"changes":[{"type":"DELETE","lineNumber":3,"oldContent":"public interface SubscriptionService {"},{"type":"INSERT","lineNumber":4,"content":"import java.util.List;"},{"type":"INSERT","lineNumber":5,"content":""},{"type":"INSERT","lineNumber":6,"content":"public interface SubscriptionService {"}]},{"timestamp":1756666016956,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"import com.telecom.models.Subscription;"},{"type":"INSERT","lineNumber":4,"content":"import com.telecom.models.Subscription;"},{"type":"MODIFY","lineNumber":6,"content":"","oldContent":"    void addSubscription(Subscription subscription);"},{"type":"INSERT","lineNumber":8,"content":"    void addSubscription(Subscription subscription);"}]}]},"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/service/impl/CustomerServiceImpl.java":{"filePath":"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/service/impl/CustomerServiceImpl.java","baseContent":"package com.telecom.service.impl;\n\nimport com.telecom.models.Customer;\nimport com.telecom.service.interfaces.CustomerService;\n\nimport java.util.List;\n\npublic class CustomerServiceImpl implements CustomerService {\n\n    @Override\n    public void addCustomer(Customer customer) {\n        \n    }\n\n    @Override\n    public Customer getCustomer(String id) {\n        return null;\n    }\n\n    @Override\n    public List<Customer> getAllCustomers() {\n        return List.of();\n    }\n}\n","baseTimestamp":1756644512746,"deltas":[{"timestamp":1756644527614,"changes":[{"type":"INSERT","lineNumber":9,"content":"    private final CustomerRepo repo;"},{"type":"INSERT","lineNumber":10,"content":""},{"type":"INSERT","lineNumber":11,"content":"    public CustomerServiceImpl(CustomerRepo repo) {"},{"type":"INSERT","lineNumber":12,"content":"        this.repo = repo;"},{"type":"INSERT","lineNumber":13,"content":"    }"},{"type":"INSERT","lineNumber":14,"content":""},{"type":"DELETE","lineNumber":11,"oldContent":"        "},{"type":"INSERT","lineNumber":17,"content":"        repo.save(customer);"},{"type":"DELETE","lineNumber":16,"oldContent":"        return null;"},{"type":"INSERT","lineNumber":22,"content":"        return repo.findById(id).orElseThrow(() -> new RuntimeException(\"Customer not found\"));"},{"type":"DELETE","lineNumber":21,"oldContent":"        return List.of();"},{"type":"INSERT","lineNumber":27,"content":"        return repo.findAll();"}]},{"timestamp":1756644533302,"changes":[{"type":"INSERT","lineNumber":3,"content":"import com.telecom.repository.interfaces.CustomerRepo;"},{"type":"DELETE","lineNumber":10,"oldContent":"    @Override"},{"type":"DELETE","lineNumber":12,"oldContent":"    public void addCustomer(Customer customer) {"},{"type":"INSERT","lineNumber":15,"content":""},{"type":"INSERT","lineNumber":16,"content":"    @Override"},{"type":"INSERT","lineNumber":17,"content":"    public void addCustomer(Customer customer) {"},{"type":"INSERT","lineNumber":18,"content":"        repo.save(customer);"},{"type":"DELETE","lineNumber":18,"oldContent":""},{"type":"DELETE","lineNumber":21,"oldContent":"        repo.save(customer);"},{"type":"INSERT","lineNumber":23,"content":"        return repo.findById(id).orElseThrow(() -> new RuntimeException(\"Customer not found\"));"},{"type":"DELETE","lineNumber":26,"oldContent":"        return repo.findById(id).orElseThrow(() -> new RuntimeException(\"Customer not found\"));"},{"type":"INSERT","lineNumber":28,"content":"        return repo.findAll();"},{"type":"DELETE","lineNumber":30,"oldContent":"        return repo.findAll();"}]}]},"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/service/impl/PlanServiceImpl.java":{"filePath":"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/service/impl/PlanServiceImpl.java","baseContent":"package com.telecom.service.impl;\n\npublic class PlanServiceImpl implements PlanService {\n    private final PlanRepo repo;\n\n    public PlanServiceImpl(PlanRepo repo) {\n        this.repo = repo;\n    }\n\n    @Override\n    public void addPlan(Plan plan) {\n        repo.save(plan);\n    }\n\n    @Override\n    public Plan getPlan(String id) {\n        return repo.findById(id).orElseThrow(() -> new RuntimeException(\"Plan not found\"));\n    }\n\n    @Override\n    public List<Plan> getAllPlans() {\n        return repo.findAll();\n    }\n}\n","baseTimestamp":1756644558934,"deltas":[{"timestamp":1756644563104,"changes":[{"type":"INSERT","lineNumber":2,"content":"import com.telecom.service.interfaces.PlanService;"},{"type":"INSERT","lineNumber":3,"content":""}]},{"timestamp":1756644566334,"changes":[{"type":"INSERT","lineNumber":2,"content":"import com.telecom.repository.interfaces.PlanRepo;"},{"type":"DELETE","lineNumber":3,"oldContent":"public class PlanServiceImpl implements PlanService {"},{"type":"INSERT","lineNumber":5,"content":"public class PlanServiceImpl implements PlanService {"}]},{"timestamp":1756644572938,"changes":[{"type":"INSERT","lineNumber":2,"content":"import com.telecom.models.Plan;"}]},{"timestamp":1756644581872,"changes":[{"type":"INSERT","lineNumber":6,"content":"import java.util.List;"},{"type":"INSERT","lineNumber":7,"content":""}]},{"timestamp":1756661151446,"changes":[{"type":"MODIFY","lineNumber":8,"content":"public class PlanServiceImpl implements PlanService {","oldContent":"public class PlanServiceImpl implements PlanService {"},{"type":"DELETE","lineNumber":16,"oldContent":"    public void addPlan(Plan plan) {"},{"type":"DELETE","lineNumber":17,"oldContent":"        repo.save(plan);"},{"type":"INSERT","lineNumber":16,"content":"    public Plan addPlan(Plan plan) {"},{"type":"INSERT","lineNumber":17,"content":"        return repo.save(plan);"},{"type":"INSERT","lineNumber":29,"content":""},{"type":"INSERT","lineNumber":30,"content":"    @Override"},{"type":"INSERT","lineNumber":31,"content":"    public Plan updatePlan(Plan plan) {"},{"type":"INSERT","lineNumber":32,"content":"        return repo.update(plan);"},{"type":"INSERT","lineNumber":33,"content":"    }"},{"type":"INSERT","lineNumber":34,"content":""},{"type":"INSERT","lineNumber":35,"content":"    @Override"},{"type":"INSERT","lineNumber":36,"content":"    public void deletePlan(String id) {"},{"type":"INSERT","lineNumber":37,"content":"        repo.delete(id);"},{"type":"INSERT","lineNumber":38,"content":"    }"}]}]},"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/service/impl/SubscriptionServiceImpl.java":{"filePath":"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/service/impl/SubscriptionServiceImpl.java","baseContent":"package com.telecom.service.impl;\n\npublic class SubscriptionServiceImpl implements SubscriptionService {\n    private final SubscriptionRepo repo;\n\n    public SubscriptionServiceImpl(SubscriptionRepo repo) {\n        this.repo = repo;\n    }\n\n    @Override\n    public void addSubscription(Subscription subscription) {\n        repo.save(subscription);\n    }\n\n    @Override\n    public Subscription getSubscription(String id) {\n        return repo.findById(id).orElseThrow(() -> new RuntimeException(\"Subscription not found\"));\n    }\n\n    @Override\n    public List<Subscription> getCustomerSubscriptions(String customerId) {\n        return repo.findByCustomerId(customerId);\n    }\n\n    @Override\n    public void requestMNP(String subscriptionId, String targetOperator) {\n        Subscription sub = getSubscription(subscriptionId);\n        if (sub.isMnpPending()) throw new RuntimeException(\"MNP already pending.\");\n        sub.setMnpPending(true);\n        sub.setMnpRequestDate(LocalDate.now());\n        sub.setTargetOperator(targetOperator);\n        repo.save(sub);\n    }\n\n    @Override\n    public void completeMNP(String subscriptionId) {\n        Subscription sub = getSubscription(subscriptionId);\n        if (!sub.isMnpPending()) throw new RuntimeException(\"No MNP pending.\");\n        sub.setMnpPending(false);\n        sub.setEndDate(LocalDate.now());\n        repo.save(sub);\n    }\n\n    @Override\n    public void cancelMNP(String subscriptionId) {\n        Subscription sub = getSubscription(subscriptionId);\n        sub.setMnpPending(false);\n        sub.setTargetOperator(null);\n        repo.save(sub);\n    }\n\n    @Override\n    public void changePlan(String subscriptionId, String newPlanId) {\n        Subscription sub = getSubscription(subscriptionId);\n        if (sub.isMnpPending()) throw new RuntimeException(\"Cannot change plan during MNP.\");\n        sub.setPlanId(newPlanId);\n        repo.save(sub);\n    }\n}\n","baseTimestamp":1756644595859,"deltas":[{"timestamp":1756644600804,"changes":[{"type":"INSERT","lineNumber":2,"content":"import com.telecom.service.interfaces.SubscriptionService;"},{"type":"INSERT","lineNumber":3,"content":""}]},{"timestamp":1756644626853,"changes":[{"type":"INSERT","lineNumber":2,"content":"import com.telecom.repository.interfaces.SubscriptionRepo;"},{"type":"DELETE","lineNumber":3,"oldContent":"public class SubscriptionServiceImpl implements SubscriptionService {"},{"type":"INSERT","lineNumber":5,"content":"public class SubscriptionServiceImpl implements SubscriptionService {"}]},{"timestamp":1756644631514,"changes":[{"type":"INSERT","lineNumber":2,"content":"import com.telecom.models.Subscription;"}]},{"timestamp":1756644639867,"changes":[{"type":"INSERT","lineNumber":6,"content":"import java.util.List;"},{"type":"INSERT","lineNumber":7,"content":""}]},{"timestamp":1756644644426,"changes":[{"type":"INSERT","lineNumber":6,"content":"import java.time.LocalDate;"},{"type":"DELETE","lineNumber":7,"oldContent":"public class SubscriptionServiceImpl implements SubscriptionService {"},{"type":"INSERT","lineNumber":9,"content":"public class SubscriptionServiceImpl implements SubscriptionService {"}]},{"timestamp":1756707312450,"changes":[{"type":"INSERT","lineNumber":2,"content":"import com.telecom.exceptions.SubscriptionException;"},{"type":"INSERT","lineNumber":3,"content":"import com.telecom.models.Family;"},{"type":"INSERT","lineNumber":6,"content":"import com.telecom.service.interfaces.FamilyService;"},{"type":"INSERT","lineNumber":8,"content":"import lombok.RequiredArgsConstructor;"},{"type":"INSERT","lineNumber":11,"content":"import java.util.ArrayList;"},{"type":"INSERT","lineNumber":13,"content":"import java.util.UUID;"},{"type":"INSERT","lineNumber":15,"content":"@RequiredArgsConstructor"},{"type":"INSERT","lineNumber":18,"content":"    private final FamilyService familyService;"},{"type":"DELETE","lineNumber":12,"oldContent":"    public SubscriptionServiceImpl(SubscriptionRepo repo) {"},{"type":"DELETE","lineNumber":13,"oldContent":"        this.repo = repo;"},{"type":"DELETE","lineNumber":14,"oldContent":"    }"},{"type":"DELETE","lineNumber":17,"oldContent":"    public void addSubscription(Subscription subscription) {"},{"type":"INSERT","lineNumber":22,"content":"    public void addSubscription(Subscription subscription) throws SubscriptionException {"},{"type":"INSERT","lineNumber":37,"content":"    public List<Subscription> getSubscriptionWithMNP() {"},{"type":"INSERT","lineNumber":38,"content":"        return repo.findSubscriptionsWithMNP();"},{"type":"INSERT","lineNumber":39,"content":"    }"},{"type":"INSERT","lineNumber":40,"content":""},{"type":"INSERT","lineNumber":41,"content":"    @Override"},{"type":"DELETE","lineNumber":38,"oldContent":"        repo.save(sub);"},{"type":"INSERT","lineNumber":48,"content":"        repo.update(sub);"},{"type":"DELETE","lineNumber":47,"oldContent":"        repo.save(sub);"},{"type":"INSERT","lineNumber":57,"content":"        repo.update(sub);"},{"type":"DELETE","lineNumber":55,"oldContent":"        repo.save(sub);"},{"type":"INSERT","lineNumber":65,"content":"        repo.update(sub);"},{"type":"DELETE","lineNumber":63,"oldContent":"        repo.save(sub);"},{"type":"INSERT","lineNumber":73,"content":"        String familyId = UUID.randomUUID().toString().substring(0, 3);"},{"type":"INSERT","lineNumber":74,"content":"        familyService.createFamily(Family.builder()"},{"type":"INSERT","lineNumber":75,"content":"                .familyId(\"F\"+familyId)"},{"type":"INSERT","lineNumber":76,"content":"                .build());"},{"type":"INSERT","lineNumber":77,"content":"        familyService.addFamilyMember(familyId, sub.getCustomerId());"},{"type":"INSERT","lineNumber":78,"content":"        sub.setFamilyId(familyId);"},{"type":"INSERT","lineNumber":79,"content":"        repo.update(sub);"}]},{"timestamp":1756710368459,"changes":[{"type":"MODIFY","lineNumber":4,"content":"import com.telecom.models.Subscription;","oldContent":"import com.telecom.models.Subscription;"},{"type":"INSERT","lineNumber":6,"content":"import com.telecom.service.interfaces.FamilyService;"},{"type":"INSERT","lineNumber":8,"content":"import lombok.RequiredArgsConstructor;"},{"type":"DELETE","lineNumber":8,"oldContent":"import com.telecom.service.interfaces.FamilyService;"},{"type":"INSERT","lineNumber":11,"content":"import java.util.ArrayList;"},{"type":"DELETE","lineNumber":11,"oldContent":"import lombok.RequiredArgsConstructor;"},{"type":"INSERT","lineNumber":13,"content":"import java.util.UUID;"},{"type":"INSERT","lineNumber":15,"content":"@RequiredArgsConstructor"},{"type":"DELETE","lineNumber":15,"oldContent":"import java.util.ArrayList;"},{"type":"INSERT","lineNumber":18,"content":"    private final FamilyService familyService;"},{"type":"DELETE","lineNumber":17,"oldContent":"import java.util.UUID;"},{"type":"DELETE","lineNumber":18,"oldContent":"@RequiredArgsConstructor"},{"type":"DELETE","lineNumber":21,"oldContent":"    private final FamilyService familyService;"},{"type":"INSERT","lineNumber":22,"content":"    public void addSubscription(Subscription subscription) throws SubscriptionException {"},{"type":"DELETE","lineNumber":26,"oldContent":"    public void addSubscription(Subscription subscription) throws SubscriptionException {"},{"type":"INSERT","lineNumber":37,"content":"    public List<Subscription> getSubscriptionWithMNP() {"},{"type":"INSERT","lineNumber":38,"content":"        return repo.findSubscriptionsWithMNP();"},{"type":"INSERT","lineNumber":39,"content":"    }"},{"type":"INSERT","lineNumber":40,"content":""},{"type":"INSERT","lineNumber":41,"content":"    @Override"},{"type":"DELETE","lineNumber":42,"oldContent":"    public List<Subscription> getSubscriptionWithMNP() {"},{"type":"DELETE","lineNumber":44,"oldContent":"        return repo.findSubscriptionsWithMNP();"},{"type":"INSERT","lineNumber":48,"content":"        repo.update(sub);"},{"type":"DELETE","lineNumber":46,"oldContent":"    }"},{"type":"DELETE","lineNumber":48,"oldContent":""},{"type":"DELETE","lineNumber":50,"oldContent":"    @Override"},{"type":"DELETE","lineNumber":64,"oldContent":"    }"},{"type":"INSERT","lineNumber":66,"content":"    }"},{"type":"DELETE","lineNumber":72,"oldContent":"    }"},{"type":"INSERT","lineNumber":73,"content":"        String familyId = \"F\" + UUID.randomUUID().toString().substring(0, 3);"},{"type":"INSERT","lineNumber":74,"content":"        familyService.createFamily(Family.builder()"},{"type":"INSERT","lineNumber":75,"content":"                .familyId(familyId)"},{"type":"INSERT","lineNumber":76,"content":"                .customerIds(new ArrayList<>())"},{"type":"INSERT","lineNumber":77,"content":""},{"type":"INSERT","lineNumber":78,"content":"                .build());"},{"type":"INSERT","lineNumber":79,"content":"        familyService.addFamilyMember(familyId, sub.getCustomerId());"},{"type":"INSERT","lineNumber":80,"content":"        sub.setFamilyId(familyId);"},{"type":"INSERT","lineNumber":82,"content":"    }"},{"type":"DELETE","lineNumber":76,"oldContent":"        repo.update(sub);"},{"type":"DELETE","lineNumber":77,"oldContent":"        sub.setFamilyId(familyId);"},{"type":"DELETE","lineNumber":78,"oldContent":"        familyService.addFamilyMember(familyId, sub.getCustomerId());"},{"type":"DELETE","lineNumber":79,"oldContent":"                .build());"},{"type":"DELETE","lineNumber":80,"oldContent":"                .familyId(\"F\"+familyId)"},{"type":"DELETE","lineNumber":81,"oldContent":"        familyService.createFamily(Family.builder()"},{"type":"DELETE","lineNumber":82,"oldContent":"        String familyId = UUID.randomUUID().toString().substring(0, 3);"}]}]},"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/repository/impl/UserRepoImpl.java":{"filePath":"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/repository/impl/UserRepoImpl.java","baseContent":"package com.telecom.repository.impl;\n\nimport com.telecom.models.User;\nimport com.telecom.repository.interfaces.UserRepo;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Optional;\n\npublic class UserRepoImpl implements UserRepo {\n    private final Map<String, User> db = new HashMap<>();\n\n    @Override\n    public void createUser(User user) {\n        db.put(user.getUsername(), user);\n\n    }\n\n    @Override\n    public Optional<User> getUserByUserName(String userName) {\n        if (db.containsKey(userName)) {\n            return Optional.of(db.get(userName));\n        }\n        return Optional.empty();\n    }\n\n    @Override\n    public Optional<User> getUserByCustomerId(String customerId) {\n        for (User user : db.values()) {\n            if (user.getCustomerId().equals(customerId)) {\n                return Optional.of(user);\n            }\n        }\n        return Optional.empty();\n    }\n}\n","baseTimestamp":1756655702962},"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/MainApp.java":{"filePath":"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/MainApp.java","baseContent":"package com.telecom;\n\nimport com.telecom.bootstrap.BootstrapEngine;\nimport com.telecom.presentation.LoginController;\nimport com.telecom.repository.impl.UserRepoImpl;\nimport com.telecom.repository.interfaces.UserRepo;\nimport com.telecom.service.impl.UserServiceImpl;\nimport com.telecom.service.interfaces.UserService;\n\nimport java.util.Scanner;\n\n/**\n * Main Project App - Starting point of the project\n */\npublic class cmdMainApp {\n    public static void main(String[] args) {\n        // Console input\n        Scanner sc = new Scanner(System.in);\n        // Repositories initialization\n        UserRepo userRepo = new UserRepoImpl();\n        // Bootstrap code\n        BootstrapEngine bootstrapEngine = new BootstrapEngine(userRepo);\n        bootstrapEngine.run();\n        // Services initialization\n        UserService userService = new UserServiceImpl(userRepo);\n        // Controllers Initialization\n        LoginController loginController = new LoginController(sc, userService);\n\n        // Test\n\n        try {\n            loginController.login();\n        } catch (Exception e) {\n            System.err.println(e.getMessage());\n        }\n    }\n}\n","baseTimestamp":1756660989397,"deltas":[{"timestamp":1756660993885,"changes":[{"type":"MODIFY","lineNumber":14,"content":"public class MainApp {","oldContent":"public class cmdMainApp {"}]},{"timestamp":1756661151292,"changes":[{"type":"DELETE","lineNumber":3,"oldContent":"import com.telecom.presentation.LoginController;"},{"type":"DELETE","lineNumber":4,"oldContent":"import com.telecom.repository.impl.UserRepoImpl;"},{"type":"DELETE","lineNumber":5,"oldContent":"import com.telecom.repository.interfaces.UserRepo;"},{"type":"DELETE","lineNumber":6,"oldContent":"import com.telecom.service.impl.UserServiceImpl;"},{"type":"DELETE","lineNumber":7,"oldContent":"import com.telecom.service.interfaces.UserService;"},{"type":"INSERT","lineNumber":3,"content":"import com.telecom.models.User;"},{"type":"INSERT","lineNumber":4,"content":"import com.telecom.models.enums.Role;"},{"type":"INSERT","lineNumber":5,"content":"import com.telecom.presentation.*;"},{"type":"INSERT","lineNumber":6,"content":"import com.telecom.repository.impl.*;"},{"type":"INSERT","lineNumber":7,"content":"import com.telecom.repository.interfaces.*;"},{"type":"INSERT","lineNumber":8,"content":"import com.telecom.service.impl.*;"},{"type":"INSERT","lineNumber":9,"content":"import com.telecom.service.interfaces.*;"},{"type":"DELETE","lineNumber":16,"oldContent":"        // Console input"},{"type":"INSERT","lineNumber":18,"content":"        // --- DEPENDENCY INITIALIZATION ---"},{"type":"DELETE","lineNumber":18,"oldContent":"        // Repositories initialization"},{"type":"INSERT","lineNumber":20,"content":""},{"type":"INSERT","lineNumber":21,"content":"        // Repositories"},{"type":"DELETE","lineNumber":20,"oldContent":"        // Bootstrap code"},{"type":"DELETE","lineNumber":21,"oldContent":"        BootstrapEngine bootstrapEngine = new BootstrapEngine(userRepo);"},{"type":"INSERT","lineNumber":23,"content":"        CustomerRepo customerRepo = new CustomerRepoImpl();"},{"type":"INSERT","lineNumber":24,"content":"        PlanRepo planRepo = new PlanRepoImpl();"},{"type":"INSERT","lineNumber":25,"content":"        SubscriptionRepo subscriptionRepo = new SubscriptionRepoImpl();"},{"type":"INSERT","lineNumber":26,"content":"        UsageRecordRepo usageRecordRepo = new UsageRecordRepoImpl();"},{"type":"INSERT","lineNumber":27,"content":"        InvoiceRepo invoiceRepo = new InvoiceRepoImpl();"},{"type":"INSERT","lineNumber":28,"content":"        FamilyRepo familyRepo = new FamilyRepoImpl();"},{"type":"INSERT","lineNumber":29,"content":""},{"type":"INSERT","lineNumber":30,"content":"        // Bootstrap Engine"},{"type":"INSERT","lineNumber":31,"content":"        BootstrapEngine bootstrapEngine = new BootstrapEngine(userRepo, customerRepo, planRepo, subscriptionRepo, usageRecordRepo);"},{"type":"DELETE","lineNumber":23,"oldContent":"        // Services initialization"},{"type":"INSERT","lineNumber":33,"content":""},{"type":"INSERT","lineNumber":34,"content":"        // Services"},{"type":"DELETE","lineNumber":25,"oldContent":"        // Controllers Initialization"},{"type":"INSERT","lineNumber":36,"content":"        CustomerService customerService = new CustomerServiceImpl(customerRepo);"},{"type":"INSERT","lineNumber":37,"content":"        PlanService planService = new PlanServiceImpl(planRepo);"},{"type":"INSERT","lineNumber":38,"content":"        SubscriptionService subscriptionService = new SubscriptionServiceImpl(subscriptionRepo);"},{"type":"INSERT","lineNumber":39,"content":"        BillingService billingService = new BillingServiceImpl(invoiceRepo);"},{"type":"INSERT","lineNumber":40,"content":"        AnalyticsService analyticsService = new AnalyticsServiceImpl();"},{"type":"INSERT","lineNumber":41,"content":"        FamilyService familyService = new FamilyServiceImpl(familyRepo);"},{"type":"INSERT","lineNumber":42,"content":""},{"type":"INSERT","lineNumber":43,"content":"        // Controllers"},{"type":"INSERT","lineNumber":45,"content":"        PlanController planController = new PlanController(sc, planService);"},{"type":"INSERT","lineNumber":46,"content":"        AdminController adminController = new AdminController(sc, planService, customerService, userService, subscriptionService, planController);"},{"type":"INSERT","lineNumber":47,"content":"        CustomerController customerController = new CustomerController(sc, subscriptionService, planService, usageRecordRepo, invoiceRepo, billingService, familyService, customerService, userService);"},{"type":"DELETE","lineNumber":28,"oldContent":"        // Test"},{"type":"INSERT","lineNumber":49,"content":"        // --- APPLICATION START ---"},{"type":"INSERT","lineNumber":50,"content":"        System.out.println(\"\\nWelcome to the Telecom Billing & Analytics System\");"},{"type":"DELETE","lineNumber":30,"oldContent":"        try {"},{"type":"DELETE","lineNumber":31,"oldContent":"            loginController.login();"},{"type":"DELETE","lineNumber":32,"oldContent":"        } catch (Exception e) {"},{"type":"DELETE","lineNumber":33,"oldContent":"            System.err.println(e.getMessage());"},{"type":"INSERT","lineNumber":52,"content":"        while (true) {"},{"type":"INSERT","lineNumber":53,"content":"            try {"},{"type":"INSERT","lineNumber":54,"content":"                User user = loginController.login();"},{"type":"INSERT","lineNumber":55,"content":"                if (user == null) {"},{"type":"INSERT","lineNumber":56,"content":"                    System.out.println(\"Login failed. Exiting.\");"},{"type":"INSERT","lineNumber":57,"content":"                    return;"},{"type":"INSERT","lineNumber":58,"content":"                }"},{"type":"INSERT","lineNumber":59,"content":""},{"type":"INSERT","lineNumber":60,"content":"                // --- ROLE-BASED MENU ---"},{"type":"INSERT","lineNumber":61,"content":"                if (user.getRole() == Role.ADMIN) {"},{"type":"INSERT","lineNumber":62,"content":"                    adminController.showAdminMenu();"},{"type":"INSERT","lineNumber":63,"content":"                } else if (user.getRole() == Role.CUSTOMER) {"},{"type":"INSERT","lineNumber":64,"content":"                    customerController.showCustomerMenu(user);"},{"type":"INSERT","lineNumber":65,"content":"                }"},{"type":"INSERT","lineNumber":66,"content":""},{"type":"INSERT","lineNumber":67,"content":"                System.out.println(\"Logout successful. Goodbye!\");"},{"type":"INSERT","lineNumber":68,"content":"                break; // Exit the loop if logout is successful"},{"type":"INSERT","lineNumber":69,"content":""},{"type":"INSERT","lineNumber":70,"content":"            } catch (Exception e) {"},{"type":"INSERT","lineNumber":71,"content":"                System.err.println(\"An unexpected error occurred: \" + e.getMessage());"},{"type":"INSERT","lineNumber":72,"content":"                System.out.println(\"Please try again.\");"},{"type":"INSERT","lineNumber":73,"content":"                // e.printStackTrace(); // Uncomment for debugging"},{"type":"INSERT","lineNumber":74,"content":"            }"}]},{"timestamp":1756710368495,"changes":[{"type":"MODIFY","lineNumber":10,"content":"","oldContent":""},{"type":"DELETE","lineNumber":18,"oldContent":"        Scanner sc = new Scanner(System.in);"},{"type":"DELETE","lineNumber":20,"oldContent":"        UserRepo userRepo = new UserRepoImpl();"},{"type":"INSERT","lineNumber":19,"content":"        Scanner sc = new Scanner(System.in);"},{"type":"DELETE","lineNumber":23,"oldContent":"        bootstrapEngine.run();"},{"type":"INSERT","lineNumber":22,"content":"        UserRepo userRepo = new UserRepoImpl();"},{"type":"DELETE","lineNumber":26,"oldContent":"        UserService userService = new UserServiceImpl(userRepo);"},{"type":"DELETE","lineNumber":29,"oldContent":"        LoginController loginController = new LoginController(sc, userService);"},{"type":"DELETE","lineNumber":31,"oldContent":""},{"type":"DELETE","lineNumber":34,"oldContent":""},{"type":"INSERT","lineNumber":32,"content":"        bootstrapEngine.run();"},{"type":"DELETE","lineNumber":39,"oldContent":"        }"},{"type":"DELETE","lineNumber":40,"oldContent":"    }"},{"type":"INSERT","lineNumber":35,"content":"        UserService userService = new UserServiceImpl(userRepo);"},{"type":"DELETE","lineNumber":42,"oldContent":"}"},{"type":"DELETE","lineNumber":44,"oldContent":""},{"type":"DELETE","lineNumber":45,"oldContent":"        SubscriptionService subscriptionService = new SubscriptionServiceImpl(subscriptionRepo);"},{"type":"DELETE","lineNumber":46,"oldContent":"            }"},{"type":"INSERT","lineNumber":38,"content":"        FamilyService familyService = new FamilyServiceImpl(familyRepo);"},{"type":"INSERT","lineNumber":39,"content":"        SubscriptionService subscriptionService = new SubscriptionServiceImpl(subscriptionRepo, familyService);"},{"type":"DELETE","lineNumber":48,"oldContent":"                // e.printStackTrace(); // Uncomment for debugging"},{"type":"DELETE","lineNumber":50,"oldContent":"                System.out.println(\"Please try again.\");"},{"type":"DELETE","lineNumber":51,"oldContent":"        FamilyService familyService = new FamilyServiceImpl(familyRepo);"},{"type":"DELETE","lineNumber":52,"oldContent":"                System.err.println(\"An unexpected error occurred: \" + e.getMessage());"},{"type":"DELETE","lineNumber":54,"oldContent":"            } catch (Exception e) {"},{"type":"DELETE","lineNumber":56,"oldContent":""},{"type":"DELETE","lineNumber":57,"oldContent":"                break; // Exit the loop if logout is successful"},{"type":"INSERT","lineNumber":44,"content":"        LoginController loginController = new LoginController(sc, userService);"},{"type":"DELETE","lineNumber":59,"oldContent":"                System.out.println(\"Logout successful. Goodbye!\");"},{"type":"DELETE","lineNumber":60,"oldContent":"        AdminController adminController = new AdminController(sc, planService, customerService, userService, subscriptionService, planController);"},{"type":"DELETE","lineNumber":61,"oldContent":""},{"type":"DELETE","lineNumber":62,"oldContent":"        CustomerController customerController = new CustomerController(sc, subscriptionService, planService, usageRecordRepo, invoiceRepo, billingService, familyService, customerService, userService);"},{"type":"DELETE","lineNumber":63,"oldContent":"                }"},{"type":"DELETE","lineNumber":64,"oldContent":"                    customerController.showCustomerMenu(user);"},{"type":"INSERT","lineNumber":46,"content":"        AnalyticsController analyticsController = new AnalyticsController(sc, analyticsService, usageRecordRepo, invoiceRepo, planRepo);"},{"type":"INSERT","lineNumber":47,"content":"        BillingController billingController = new BillingController(billingService, subscriptionService, planService, usageRecordRepo);"},{"type":"INSERT","lineNumber":48,"content":"        AdminController adminController = new AdminController(sc, planService, customerService, userService, subscriptionService, planController, analyticsController);"},{"type":"INSERT","lineNumber":49,"content":"        SubscriptionController subscriptionController = new SubscriptionController(sc, subscriptionService, planService, familyService);"},{"type":"INSERT","lineNumber":50,"content":"        CustomerController customerController = new CustomerController(sc, subscriptionService, planService, usageRecordRepo, invoiceRepo, familyService, customerService, billingController, subscriptionController, billingService);"},{"type":"DELETE","lineNumber":66,"oldContent":"                } else if (user.getRole() == Role.CUSTOMER) {"},{"type":"DELETE","lineNumber":68,"oldContent":"                    adminController.showAdminMenu();"},{"type":"DELETE","lineNumber":69,"oldContent":"                if (user.getRole() == Role.ADMIN) {"},{"type":"INSERT","lineNumber":53,"content":""},{"type":"DELETE","lineNumber":71,"oldContent":"                // --- ROLE-BASED MENU ---"},{"type":"DELETE","lineNumber":73,"oldContent":""},{"type":"DELETE","lineNumber":75,"oldContent":"                }"},{"type":"DELETE","lineNumber":77,"oldContent":"                    return;"},{"type":"INSERT","lineNumber":59,"content":"                    return;"},{"type":"INSERT","lineNumber":60,"content":"                }"},{"type":"INSERT","lineNumber":61,"content":""},{"type":"INSERT","lineNumber":62,"content":"                // --- ROLE-BASED MENU ---"},{"type":"INSERT","lineNumber":63,"content":"                if (user.getRole() == Role.ADMIN) {"},{"type":"INSERT","lineNumber":64,"content":"                    adminController.showAdminMenu();"},{"type":"INSERT","lineNumber":65,"content":"                } else if (user.getRole() == Role.CUSTOMER) {"},{"type":"INSERT","lineNumber":66,"content":"                    customerController.showCustomerMenu(user);"},{"type":"INSERT","lineNumber":67,"content":"                }"},{"type":"INSERT","lineNumber":68,"content":""},{"type":"INSERT","lineNumber":69,"content":"                System.out.println(\"Logout successful. Goodbye!\");"},{"type":"INSERT","lineNumber":70,"content":""},{"type":"INSERT","lineNumber":71,"content":"            } catch (Exception e) {"},{"type":"INSERT","lineNumber":72,"content":"                System.err.println(\"An unexpected error occurred: \" + e.getMessage());"},{"type":"INSERT","lineNumber":73,"content":"                System.out.println(\"Please try again.\");"},{"type":"INSERT","lineNumber":74,"content":"                // e.printStackTrace(); // Uncomment for debugging"},{"type":"INSERT","lineNumber":75,"content":"            }"},{"type":"INSERT","lineNumber":76,"content":"        }"},{"type":"INSERT","lineNumber":77,"content":"    }"},{"type":"INSERT","lineNumber":78,"content":"}"},{"type":"INSERT","lineNumber":79,"content":""}]}]},"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/presentation/CustomerController.java":{"filePath":"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/presentation/CustomerController.java","baseContent":"package com.telecom.presentation;\n\nimport com.telecom.models.*;\nimport com.telecom.models.enums.Role;\nimport com.telecom.repository.interfaces.InvoiceRepo;\nimport com.telecom.repository.interfaces.UsageRecordRepo;\nimport com.telecom.service.interfaces.*;\nimport lombok.RequiredArgsConstructor;\n\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.util.List;\nimport java.util.Scanner;\n\n/**\n * Console viewer for all Customer-specific operations.\n */\n@RequiredArgsConstructor\npublic class CustomerController {\n    private final Scanner sc;\n    private final SubscriptionService subscriptionService;\n    private final PlanService planService;\n    private final UsageRecordRepo usageRecordRepo;\n    private final InvoiceRepo invoiceRepo;\n    private final BillingService billingService;\n    private final FamilyService familyService;\n    private final CustomerService customerService;\n    private final UserService userService;\n\n    /**\n     * Main menu for Customer users.\n     * @param user The currently authenticated user.\n     */\n    public void showCustomerMenu(User user) {\n        while (true) {\n            System.out.println(\"\\n--- Customer Menu ---\");\n            System.out.println(\"1. View My Subscriptions\");\n            System.out.println(\"2. Add Usage (Simulate)\");\n            System.out.println(\"3. Change Plan\");\n            System.out.println(\"4. View Usage History\");\n            System.out.println(\"5. View My Bills\");\n            System.out.println(\"6. Pay a Bill\");\n            System.out.println(\"7. Add Family Member\");\n            System.out.println(\"0. Logout\");\n            System.out.print(\"Select an option: \");\n            int choice = Integer.parseInt(sc.nextLine());\n\n            switch (choice) {\n                case 1: new SubscriptionController(sc, subscriptionService, planService).showCustomerSubscriptions(user); break;\n                case 2: addUsage(user); break;\n                case 3: changePlan(user); break;\n                case 4: viewUsageHistory(user); break;\n                case 5: viewMyBills(user); break;\n                case 6: payBill(user); break;\n                case 7: addFamilyMember(user); break;\n                case 0: return;\n                default: System.out.println(\"Invalid option. Please try again.\");\n            }\n        }\n    }\n\n    private void addFamilyMember(User currentUser) {\n        System.out.println(\"\\n--- Add a Family Member ---\");\n\n        // Find the current user's family subscription\n        Subscription primarySub = subscriptionService.getCustomerSubscriptions(currentUser.getCustomerId())\n                .stream().filter(s -> s.getFamilyId() != null).findFirst()\n                .orElse(null);\n\n        if (primarySub == null) {\n            System.out.println(\"You do not have a family plan subscription.\");\n            return;\n        }\n\n        System.out.print(\"Enter new member's Customer ID: \");\n        String customerId = sc.nextLine();\n        System.out.print(\"Enter new member's Name: \");\n        String name = sc.nextLine();\n        System.out.print(\"Enter new member's Email: \");\n        String email = sc.nextLine();\n        System.out.print(\"Enter new member's Phone Number: \");\n        String phone = sc.nextLine();\n\n        // Create Customer and User\n        Customer newCustomer = new Customer(customerId, name, email, null, false);\n        customerService.addCustomer(newCustomer);\n        User newUser = User.builder().username(name.toLowerCase() + \"_user\").password(\"password123\").role(Role.CUSTOMER).customerId(customerId).build();\n        userService.createUser(newUser);\n\n        // Add to family\n        familyService.addFamilyMember(primarySub.getFamilyId(), customerId);\n\n        // Create subscription for the new member\n        Subscription newSubscription = Subscription.builder()\n                .id(\"S\" + (int)(Math.random()*1000))\n                .customerId(customerId)\n                .phoneNumber(phone)\n                .planId(primarySub.getPlanId()) // Same plan as primary\n                .familyId(primarySub.getFamilyId())\n                .startDate(LocalDate.now())\n                .build();\n        subscriptionService.addSubscription(newSubscription);\n\n        System.out.println(\"Family member added successfully!\");\n        System.out.printf(\"New user credentials -> Username: %s, Password: %s%n\", newUser.getUsername(), newUser.getPassword());\n    }\n\n    // other methods...\n    private void addUsage(User user) { /* ... */ }\n    private void changePlan(User user) { /* ... */ }\n    private void viewUsageHistory(User user) { /* ... */ }\n    private void viewMyBills(User user) { /* ... */ }\n    private void payBill(User user) { /* ... */ }\n    private void printInvoice(Invoice invoice) { /* ... */ }\n}\n","baseTimestamp":1756661151734,"deltas":[{"timestamp":1756666017020,"changes":[{"type":"DELETE","lineNumber":3,"oldContent":"import com.telecom.models.enums.Role;"},{"type":"INSERT","lineNumber":10,"content":"import java.util.ArrayList;"},{"type":"INSERT","lineNumber":14,"content":"import javax.naming.NameNotFoundException;"},{"type":"INSERT","lineNumber":15,"content":""},{"type":"DELETE","lineNumber":24,"oldContent":"    private final BillingService billingService;"},{"type":"MODIFY","lineNumber":28,"content":"    private final BillingController billingController;","oldContent":"    private final UserService userService;"},{"type":"INSERT","lineNumber":32,"content":"     * "},{"type":"DELETE","lineNumber":35,"oldContent":"            System.out.println(\"\\n--- Customer Menu ---\");"},{"type":"DELETE","lineNumber":36,"oldContent":"            System.out.println(\"1. View My Subscriptions\");"},{"type":"DELETE","lineNumber":37,"oldContent":"            System.out.println(\"2. Add Usage (Simulate)\");"},{"type":"DELETE","lineNumber":38,"oldContent":"            System.out.println(\"3. Change Plan\");"},{"type":"DELETE","lineNumber":39,"oldContent":"            System.out.println(\"4. View Usage History\");"},{"type":"DELETE","lineNumber":40,"oldContent":"            System.out.println(\"5. View My Bills\");"},{"type":"DELETE","lineNumber":41,"oldContent":"            System.out.println(\"6. Pay a Bill\");"},{"type":"DELETE","lineNumber":42,"oldContent":"            System.out.println(\"7. Add Family Member\");"},{"type":"DELETE","lineNumber":43,"oldContent":"            System.out.println(\"0. Logout\");"},{"type":"DELETE","lineNumber":44,"oldContent":"            System.out.print(\"Select an option: \");"},{"type":"DELETE","lineNumber":45,"oldContent":"            int choice = Integer.parseInt(sc.nextLine());"},{"type":"INSERT","lineNumber":37,"content":"            try {"},{"type":"INSERT","lineNumber":38,"content":"                System.out.println(\"\\n--- Customer Menu ---\");"},{"type":"INSERT","lineNumber":39,"content":"                System.out.println(\"1. View My Subscriptions\");"},{"type":"INSERT","lineNumber":40,"content":"                System.out.println(\"2. Add Usage (Simulate)\");"},{"type":"INSERT","lineNumber":41,"content":"                System.out.println(\"3. Change Plan\");"},{"type":"INSERT","lineNumber":42,"content":"                System.out.println(\"4. View Usage History\");"},{"type":"INSERT","lineNumber":43,"content":"                System.out.println(\"5. View My Bills\");"},{"type":"INSERT","lineNumber":44,"content":"                System.out.println(\"6. Pay a Bill\");"},{"type":"INSERT","lineNumber":45,"content":"                System.out.println(\"7. Add Family Member\");"},{"type":"INSERT","lineNumber":46,"content":"                System.out.println(\"8. View My Family Members\");"},{"type":"INSERT","lineNumber":47,"content":"                System.out.println(\"0. Logout\");"},{"type":"INSERT","lineNumber":48,"content":"                System.out.print(\"Select an option: \");"},{"type":"INSERT","lineNumber":49,"content":"                int choice = Integer.parseInt(sc.nextLine());"},{"type":"DELETE","lineNumber":47,"oldContent":"            switch (choice) {"},{"type":"DELETE","lineNumber":48,"oldContent":"                case 1: new SubscriptionController(sc, subscriptionService, planService).showCustomerSubscriptions(user); break;"},{"type":"DELETE","lineNumber":49,"oldContent":"                case 2: addUsage(user); break;"},{"type":"DELETE","lineNumber":50,"oldContent":"                case 3: changePlan(user); break;"},{"type":"DELETE","lineNumber":51,"oldContent":"                case 4: viewUsageHistory(user); break;"},{"type":"DELETE","lineNumber":52,"oldContent":"                case 5: viewMyBills(user); break;"},{"type":"DELETE","lineNumber":53,"oldContent":"                case 6: payBill(user); break;"},{"type":"DELETE","lineNumber":54,"oldContent":"                case 7: addFamilyMember(user); break;"},{"type":"DELETE","lineNumber":55,"oldContent":"                case 0: return;"},{"type":"DELETE","lineNumber":56,"oldContent":"                default: System.out.println(\"Invalid option. Please try again.\");"},{"type":"INSERT","lineNumber":51,"content":"                switch (choice) {"},{"type":"INSERT","lineNumber":52,"content":"                    case 1:"},{"type":"INSERT","lineNumber":53,"content":"                        new SubscriptionController(sc, subscriptionService, planService)"},{"type":"INSERT","lineNumber":54,"content":"                                .showCustomerSubscriptions(user);"},{"type":"INSERT","lineNumber":55,"content":"                        break;"},{"type":"INSERT","lineNumber":56,"content":"                    case 2:"},{"type":"INSERT","lineNumber":57,"content":"                        addUsage(user);"},{"type":"INSERT","lineNumber":58,"content":"                        break;"},{"type":"INSERT","lineNumber":59,"content":"                    case 3:"},{"type":"INSERT","lineNumber":60,"content":"                        changePlan(user);"},{"type":"INSERT","lineNumber":61,"content":"                        break;"},{"type":"INSERT","lineNumber":62,"content":"                    case 4:"},{"type":"INSERT","lineNumber":63,"content":"                        viewUsageHistory(user);"},{"type":"INSERT","lineNumber":64,"content":"                        break;"},{"type":"INSERT","lineNumber":65,"content":"                    case 5:"},{"type":"INSERT","lineNumber":66,"content":"                        viewMyBills(user);"},{"type":"INSERT","lineNumber":67,"content":"                        break;"},{"type":"INSERT","lineNumber":68,"content":"                    case 6:"},{"type":"INSERT","lineNumber":69,"content":"                        payBill(user);"},{"type":"INSERT","lineNumber":70,"content":"                        break;"},{"type":"INSERT","lineNumber":71,"content":"                    case 7:"},{"type":"INSERT","lineNumber":72,"content":"                        addFamilyMember(user);"},{"type":"INSERT","lineNumber":73,"content":"                        break;"},{"type":"INSERT","lineNumber":74,"content":"                    case 8:"},{"type":"INSERT","lineNumber":75,"content":"                        viewMyFamilyMembers(user);"},{"type":"INSERT","lineNumber":76,"content":"                        break;"},{"type":"INSERT","lineNumber":77,"content":"                    case 0:"},{"type":"INSERT","lineNumber":78,"content":"                        return;"},{"type":"INSERT","lineNumber":79,"content":"                    default:"},{"type":"INSERT","lineNumber":80,"content":"                        System.out.println(\"Invalid option. Please try again.\");"},{"type":"INSERT","lineNumber":81,"content":"                }"},{"type":"INSERT","lineNumber":82,"content":"            } catch (NumberFormatException e) {"},{"type":"INSERT","lineNumber":83,"content":"                System.out.println(\"Invalid input. Please enter a number.\");"},{"type":"INSERT","lineNumber":84,"content":"            } catch (Exception e) {"},{"type":"INSERT","lineNumber":85,"content":"                System.out.println(\"An error occurred: \" + e.getMessage());"},{"type":"DELETE","lineNumber":62,"oldContent":"        System.out.println(\"\\n--- Add a Family Member ---\");"},{"type":"INSERT","lineNumber":91,"content":"        try {"},{"type":"INSERT","lineNumber":92,"content":"            System.out.println(\"\\n--- Add a Family Member ---\");"},{"type":"DELETE","lineNumber":64,"oldContent":"        // Find the current user's family subscription"},{"type":"DELETE","lineNumber":65,"oldContent":"        Subscription primarySub = subscriptionService.getCustomerSubscriptions(currentUser.getCustomerId())"},{"type":"DELETE","lineNumber":66,"oldContent":"                .stream().filter(s -> s.getFamilyId() != null).findFirst()"},{"type":"DELETE","lineNumber":67,"oldContent":"                .orElse(null);"},{"type":"INSERT","lineNumber":94,"content":"            // Find the current user's family subscription"},{"type":"INSERT","lineNumber":95,"content":"            Subscription primarySub = subscriptionService.getCustomerSubscriptions(currentUser.getCustomerId())"},{"type":"INSERT","lineNumber":96,"content":"                    .stream().filter(s -> s.getFamilyId() != null).findFirst()"},{"type":"INSERT","lineNumber":97,"content":"                    .orElse(null);"},{"type":"DELETE","lineNumber":69,"oldContent":"        if (primarySub == null) {"},{"type":"DELETE","lineNumber":70,"oldContent":"            System.out.println(\"You do not have a family plan subscription.\");"},{"type":"DELETE","lineNumber":71,"oldContent":"            return;"},{"type":"INSERT","lineNumber":99,"content":"            if (primarySub == null) {"},{"type":"INSERT","lineNumber":100,"content":"                System.out.println(\"You do not have a family plan subscription.\");"},{"type":"INSERT","lineNumber":101,"content":"                return;"},{"type":"INSERT","lineNumber":102,"content":"            }"},{"type":"INSERT","lineNumber":103,"content":""},{"type":"INSERT","lineNumber":104,"content":"            System.out.print(\"Enter the Customer ID of the existing customer to add to your family plan: \");"},{"type":"INSERT","lineNumber":105,"content":"            String customerId = sc.nextLine();"},{"type":"INSERT","lineNumber":106,"content":""},{"type":"INSERT","lineNumber":107,"content":"            // Check if the customer exists"},{"type":"INSERT","lineNumber":108,"content":"            Customer existingCustomer = customerService.getCustomer(customerId);"},{"type":"INSERT","lineNumber":109,"content":"            if (existingCustomer == null) {"},{"type":"INSERT","lineNumber":110,"content":"                System.out.println(\"Customer with ID \" + customerId + \" not found.\");"},{"type":"INSERT","lineNumber":111,"content":"                return;"},{"type":"INSERT","lineNumber":112,"content":"            }"},{"type":"INSERT","lineNumber":113,"content":""},{"type":"INSERT","lineNumber":114,"content":"            // Add to family"},{"type":"INSERT","lineNumber":115,"content":"            familyService.addFamilyMember(primarySub.getFamilyId(), customerId);"},{"type":"INSERT","lineNumber":116,"content":""},{"type":"INSERT","lineNumber":117,"content":"            System.out.print(\"Enter phone number for the new family member's subscription: \");"},{"type":"INSERT","lineNumber":118,"content":"            String phone = sc.nextLine();"},{"type":"INSERT","lineNumber":119,"content":""},{"type":"INSERT","lineNumber":120,"content":"            // Create subscription for the new member"},{"type":"INSERT","lineNumber":121,"content":"            Subscription newSubscription = Subscription.builder()"},{"type":"INSERT","lineNumber":122,"content":"                    .id(\"S\" + (int) (Math.random() * 1000))"},{"type":"INSERT","lineNumber":123,"content":"                    .customerId(customerId)"},{"type":"INSERT","lineNumber":124,"content":"                    .phoneNumber(phone)"},{"type":"INSERT","lineNumber":125,"content":"                    .planId(primarySub.getPlanId()) // Same plan as primary"},{"type":"INSERT","lineNumber":126,"content":"                    .familyId(primarySub.getFamilyId())"},{"type":"INSERT","lineNumber":127,"content":"                    .startDate(LocalDate.now())"},{"type":"INSERT","lineNumber":128,"content":"                    .build();"},{"type":"INSERT","lineNumber":129,"content":"            subscriptionService.addSubscription(newSubscription);"},{"type":"INSERT","lineNumber":130,"content":""},{"type":"INSERT","lineNumber":131,"content":"            System.out.println(\"Family member added successfully!\");"},{"type":"INSERT","lineNumber":132,"content":"        } catch (Exception e) {"},{"type":"INSERT","lineNumber":133,"content":"            System.out.println(\"An error occurred: \" + e.getMessage());"},{"type":"INSERT","lineNumber":135,"content":"    }"},{"type":"DELETE","lineNumber":74,"oldContent":"        System.out.print(\"Enter new member's Customer ID: \");"},{"type":"DELETE","lineNumber":75,"oldContent":"        String customerId = sc.nextLine();"},{"type":"DELETE","lineNumber":76,"oldContent":"        System.out.print(\"Enter new member's Name: \");"},{"type":"DELETE","lineNumber":77,"oldContent":"        String name = sc.nextLine();"},{"type":"DELETE","lineNumber":78,"oldContent":"        System.out.print(\"Enter new member's Email: \");"},{"type":"DELETE","lineNumber":79,"oldContent":"        String email = sc.nextLine();"},{"type":"DELETE","lineNumber":80,"oldContent":"        System.out.print(\"Enter new member's Phone Number: \");"},{"type":"DELETE","lineNumber":81,"oldContent":"        String phone = sc.nextLine();"},{"type":"INSERT","lineNumber":137,"content":"    private void viewMyFamilyMembers(User currentUser) {"},{"type":"INSERT","lineNumber":138,"content":"        try {"},{"type":"INSERT","lineNumber":139,"content":"            System.out.println(\"\\n--- My Family Members ---\");"},{"type":"DELETE","lineNumber":83,"oldContent":"        // Create Customer and User"},{"type":"DELETE","lineNumber":84,"oldContent":"        Customer newCustomer = new Customer(customerId, name, email, null, false);"},{"type":"DELETE","lineNumber":85,"oldContent":"        customerService.addCustomer(newCustomer);"},{"type":"DELETE","lineNumber":86,"oldContent":"        User newUser = User.builder().username(name.toLowerCase() + \"_user\").password(\"password123\").role(Role.CUSTOMER).customerId(customerId).build();"},{"type":"DELETE","lineNumber":87,"oldContent":"        userService.createUser(newUser);"},{"type":"INSERT","lineNumber":141,"content":"            // Find the current user's family subscription"},{"type":"INSERT","lineNumber":142,"content":"            Subscription primarySub = subscriptionService.getCustomerSubscriptions(currentUser.getCustomerId())"},{"type":"INSERT","lineNumber":143,"content":"                    .stream().filter(s -> s.getFamilyId() != null).findFirst()"},{"type":"INSERT","lineNumber":144,"content":"                    .orElse(null);"},{"type":"DELETE","lineNumber":89,"oldContent":"        // Add to family"},{"type":"DELETE","lineNumber":90,"oldContent":"        familyService.addFamilyMember(primarySub.getFamilyId(), customerId);"},{"type":"INSERT","lineNumber":146,"content":"            if (primarySub == null) {"},{"type":"INSERT","lineNumber":147,"content":"                System.out.println(\"You do not have a family plan subscription.\");"},{"type":"INSERT","lineNumber":148,"content":"                return;"},{"type":"INSERT","lineNumber":149,"content":"            }"},{"type":"DELETE","lineNumber":92,"oldContent":"        // Create subscription for the new member"},{"type":"DELETE","lineNumber":93,"oldContent":"        Subscription newSubscription = Subscription.builder()"},{"type":"DELETE","lineNumber":94,"oldContent":"                .id(\"S\" + (int)(Math.random()*1000))"},{"type":"DELETE","lineNumber":95,"oldContent":"                .customerId(customerId)"},{"type":"DELETE","lineNumber":96,"oldContent":"                .phoneNumber(phone)"},{"type":"DELETE","lineNumber":97,"oldContent":"                .planId(primarySub.getPlanId()) // Same plan as primary"},{"type":"DELETE","lineNumber":98,"oldContent":"                .familyId(primarySub.getFamilyId())"},{"type":"DELETE","lineNumber":99,"oldContent":"                .startDate(LocalDate.now())"},{"type":"DELETE","lineNumber":100,"oldContent":"                .build();"},{"type":"DELETE","lineNumber":101,"oldContent":"        subscriptionService.addSubscription(newSubscription);"},{"type":"INSERT","lineNumber":151,"content":"            Family family = familyService.getFamilyById(primarySub.getFamilyId());"},{"type":"INSERT","lineNumber":152,"content":"            if (family == null || family.getCustomerIds().isEmpty()) {"},{"type":"INSERT","lineNumber":153,"content":"                System.out.println(\"No family members found.\");"},{"type":"INSERT","lineNumber":154,"content":"                return;"},{"type":"INSERT","lineNumber":155,"content":"            }"},{"type":"DELETE","lineNumber":103,"oldContent":"        System.out.println(\"Family member added successfully!\");"},{"type":"DELETE","lineNumber":104,"oldContent":"        System.out.printf(\"New user credentials -> Username: %s, Password: %s%n\", newUser.getUsername(), newUser.getPassword());"},{"type":"INSERT","lineNumber":157,"content":"            System.out.println(\"Your Family Members:\");"},{"type":"INSERT","lineNumber":158,"content":"            for (String memberId : family.getCustomerIds()) {"},{"type":"INSERT","lineNumber":159,"content":"                Customer member = customerService.getCustomer(memberId);"},{"type":"INSERT","lineNumber":160,"content":"                if (member != null) {"},{"type":"INSERT","lineNumber":161,"content":"                    System.out.printf(\"- Customer ID: %s, Name: %s, Email: %s%n\","},{"type":"INSERT","lineNumber":162,"content":"                            member.getId(), member.getName(), member.getEmail());"},{"type":"INSERT","lineNumber":163,"content":"                }"},{"type":"INSERT","lineNumber":164,"content":"            }"},{"type":"INSERT","lineNumber":165,"content":"        } catch (Exception e) {"},{"type":"INSERT","lineNumber":166,"content":"            System.out.println(\"An error occurred: \" + e.getMessage());"},{"type":"INSERT","lineNumber":167,"content":"        }"},{"type":"DELETE","lineNumber":108,"oldContent":"    private void addUsage(User user) { /* ... */ }"},{"type":"DELETE","lineNumber":109,"oldContent":"    private void changePlan(User user) { /* ... */ }"},{"type":"DELETE","lineNumber":110,"oldContent":"    private void viewUsageHistory(User user) { /* ... */ }"},{"type":"DELETE","lineNumber":111,"oldContent":"    private void viewMyBills(User user) { /* ... */ }"},{"type":"DELETE","lineNumber":112,"oldContent":"    private void payBill(User user) { /* ... */ }"},{"type":"DELETE","lineNumber":113,"oldContent":"    private void printInvoice(Invoice invoice) { /* ... */ }"},{"type":"INSERT","lineNumber":171,"content":"    private void addUsage(User user) {"},{"type":"INSERT","lineNumber":172,"content":"        try {"},{"type":"INSERT","lineNumber":173,"content":"            System.out.println(\"\\n--- Add Usage (Simulate) ---\");"},{"type":"INSERT","lineNumber":174,"content":""},{"type":"INSERT","lineNumber":175,"content":"            List<Subscription> subscriptions = subscriptionService.getCustomerSubscriptions(user.getCustomerId());"},{"type":"INSERT","lineNumber":176,"content":"            if (subscriptions.isEmpty()) {"},{"type":"INSERT","lineNumber":177,"content":"                System.out.println(\"You have no subscriptions.\");"},{"type":"INSERT","lineNumber":178,"content":"                return;"},{"type":"INSERT","lineNumber":179,"content":"            }"},{"type":"INSERT","lineNumber":180,"content":""},{"type":"INSERT","lineNumber":181,"content":"            System.out.println(\"Your Subscriptions:\");"},{"type":"INSERT","lineNumber":182,"content":"            for (int i = 0; i < subscriptions.size(); i++) {"},{"type":"INSERT","lineNumber":183,"content":"                System.out.printf(\"%d. %s (%s)%n\", i + 1, subscriptions.get(i).getId(),"},{"type":"INSERT","lineNumber":184,"content":"                        subscriptions.get(i).getPhoneNumber());"},{"type":"INSERT","lineNumber":185,"content":"            }"},{"type":"INSERT","lineNumber":186,"content":""},{"type":"INSERT","lineNumber":187,"content":"            System.out.print(\"Select a subscription to add usage to: \");"},{"type":"INSERT","lineNumber":188,"content":"            int subChoice = Integer.parseInt(sc.nextLine());"},{"type":"INSERT","lineNumber":189,"content":"            if (subChoice < 1 || subChoice > subscriptions.size()) {"},{"type":"INSERT","lineNumber":190,"content":"                System.out.println(\"Invalid choice.\");"},{"type":"INSERT","lineNumber":191,"content":"                return;"},{"type":"INSERT","lineNumber":192,"content":"            }"},{"type":"INSERT","lineNumber":193,"content":"            Subscription selectedSub = subscriptions.get(subChoice - 1);"},{"type":"INSERT","lineNumber":194,"content":""},{"type":"INSERT","lineNumber":195,"content":"            System.out.print(\"Enter usage type (1. Data (MB), 2. Voice (Mins), 3. SMS): \");"},{"type":"INSERT","lineNumber":196,"content":"            int usageType = Integer.parseInt(sc.nextLine());"},{"type":"INSERT","lineNumber":197,"content":""},{"type":"INSERT","lineNumber":198,"content":"            System.out.print(\"Enter amount: \");"},{"type":"INSERT","lineNumber":199,"content":"            double amount = Double.parseDouble(sc.nextLine());"},{"type":"INSERT","lineNumber":200,"content":""},{"type":"INSERT","lineNumber":201,"content":"            UsageRecord.UsageRecordBuilder usageBuilder = UsageRecord.builder()"},{"type":"INSERT","lineNumber":202,"content":"                    .subscriptionId(selectedSub.getId())"},{"type":"INSERT","lineNumber":203,"content":"                    .familyId(selectedSub.getFamilyId())"},{"type":"INSERT","lineNumber":204,"content":"                    .timestamp(LocalDateTime.now());"},{"type":"INSERT","lineNumber":205,"content":""},{"type":"INSERT","lineNumber":206,"content":"            switch (usageType) {"},{"type":"INSERT","lineNumber":207,"content":"                case 1:"},{"type":"INSERT","lineNumber":208,"content":"                    usageBuilder.data(amount);"},{"type":"INSERT","lineNumber":209,"content":"                    break;"},{"type":"INSERT","lineNumber":210,"content":"                case 2:"},{"type":"INSERT","lineNumber":211,"content":"                    usageBuilder.voiceMinutes((int) amount);"},{"type":"INSERT","lineNumber":212,"content":"                    break;"},{"type":"INSERT","lineNumber":213,"content":"                case 3:"},{"type":"INSERT","lineNumber":214,"content":"                    usageBuilder.smsCount((int) amount);"},{"type":"INSERT","lineNumber":215,"content":"                    break;"},{"type":"INSERT","lineNumber":216,"content":"                default:"},{"type":"INSERT","lineNumber":217,"content":"                    System.out.println(\"Invalid usage type.\");"},{"type":"INSERT","lineNumber":218,"content":"                    return;"},{"type":"INSERT","lineNumber":219,"content":"            }"},{"type":"INSERT","lineNumber":220,"content":""},{"type":"INSERT","lineNumber":221,"content":"            usageRecordRepo.save(usageBuilder.build());"},{"type":"INSERT","lineNumber":222,"content":"            System.out.println(\"Usage added successfully.\");"},{"type":"INSERT","lineNumber":223,"content":"        } catch (NumberFormatException e) {"},{"type":"INSERT","lineNumber":224,"content":"            System.out.println(\"Invalid input. Please enter a valid number.\");"},{"type":"INSERT","lineNumber":225,"content":"        } catch (Exception e) {"},{"type":"INSERT","lineNumber":226,"content":"            System.out.println(\"An error occurred: \" + e.getMessage());"},{"type":"INSERT","lineNumber":227,"content":"        }"},{"type":"INSERT","lineNumber":228,"content":"    }"},{"type":"INSERT","lineNumber":229,"content":""},{"type":"INSERT","lineNumber":230,"content":"    private void changePlan(User user) {"},{"type":"INSERT","lineNumber":231,"content":"        try {"},{"type":"INSERT","lineNumber":232,"content":"            System.out.println(\"\\n--- Change Plan ---\");"},{"type":"INSERT","lineNumber":233,"content":""},{"type":"INSERT","lineNumber":234,"content":"            List<Subscription> subscriptions = subscriptionService.getCustomerSubscriptions(user.getCustomerId());"},{"type":"INSERT","lineNumber":235,"content":"            if (subscriptions.isEmpty()) {"},{"type":"INSERT","lineNumber":236,"content":"                System.out.println(\"You have no subscriptions.\");"},{"type":"INSERT","lineNumber":237,"content":"                return;"},{"type":"INSERT","lineNumber":238,"content":"            }"},{"type":"INSERT","lineNumber":239,"content":""},{"type":"INSERT","lineNumber":240,"content":"            System.out.println(\"Your Subscriptions:\");"},{"type":"INSERT","lineNumber":241,"content":"            for (int i = 0; i < subscriptions.size(); i++) {"},{"type":"INSERT","lineNumber":242,"content":"                System.out.printf(\"%d. %s (%s)%n\", i + 1, subscriptions.get(i).getId(),"},{"type":"INSERT","lineNumber":243,"content":"                        subscriptions.get(i).getPhoneNumber());"},{"type":"INSERT","lineNumber":244,"content":"            }"},{"type":"INSERT","lineNumber":245,"content":""},{"type":"INSERT","lineNumber":246,"content":"            System.out.print(\"Select a subscription to change the plan for: \");"},{"type":"INSERT","lineNumber":247,"content":"            int subChoice = Integer.parseInt(sc.nextLine());"},{"type":"INSERT","lineNumber":248,"content":"            if (subChoice < 1 || subChoice > subscriptions.size()) {"},{"type":"INSERT","lineNumber":249,"content":"                System.out.println(\"Invalid choice.\");"},{"type":"INSERT","lineNumber":250,"content":"                return;"},{"type":"INSERT","lineNumber":251,"content":"            }"},{"type":"INSERT","lineNumber":252,"content":"            Subscription selectedSub = subscriptions.get(subChoice - 1);"},{"type":"INSERT","lineNumber":253,"content":""},{"type":"INSERT","lineNumber":254,"content":"            new PlanController(sc, planService).showAllPlans();"},{"type":"INSERT","lineNumber":255,"content":""},{"type":"INSERT","lineNumber":256,"content":"            System.out.print(\"Enter the ID of the new plan: \");"},{"type":"INSERT","lineNumber":257,"content":"            String newPlanId = sc.nextLine();"},{"type":"INSERT","lineNumber":258,"content":""},{"type":"INSERT","lineNumber":259,"content":"            Plan newPlan = planService.getPlan(newPlanId);"},{"type":"INSERT","lineNumber":260,"content":"            if (newPlan == null) {"},{"type":"INSERT","lineNumber":261,"content":"                System.out.println(\"Plan not found.\");"},{"type":"INSERT","lineNumber":262,"content":"                return;"},{"type":"INSERT","lineNumber":263,"content":"            }"},{"type":"INSERT","lineNumber":264,"content":""},{"type":"INSERT","lineNumber":265,"content":"            subscriptionService.changePlan(selectedSub.getId(), newPlan.getId());"},{"type":"INSERT","lineNumber":266,"content":""},{"type":"INSERT","lineNumber":267,"content":"            System.out.println(\"Plan changed successfully.\");"},{"type":"INSERT","lineNumber":268,"content":"        } catch (NumberFormatException e) {"},{"type":"INSERT","lineNumber":269,"content":"            System.out.println(\"Invalid input. Please enter a valid number.\");"},{"type":"INSERT","lineNumber":270,"content":"        } catch (Exception e) {"},{"type":"INSERT","lineNumber":271,"content":"            System.out.println(\"An error occurred: \" + e.getMessage());"},{"type":"INSERT","lineNumber":272,"content":"        }"},{"type":"INSERT","lineNumber":273,"content":"    }"},{"type":"INSERT","lineNumber":274,"content":""},{"type":"INSERT","lineNumber":275,"content":"    private void viewUsageHistory(User user) {"},{"type":"INSERT","lineNumber":276,"content":"        try {"},{"type":"INSERT","lineNumber":277,"content":"            System.out.println(\"\\n--- View Usage History ---\");"},{"type":"INSERT","lineNumber":278,"content":""},{"type":"INSERT","lineNumber":279,"content":"            List<Subscription> subscriptions = subscriptionService.getCustomerSubscriptions(user.getCustomerId());"},{"type":"INSERT","lineNumber":280,"content":"            if (subscriptions.isEmpty()) {"},{"type":"INSERT","lineNumber":281,"content":"                System.out.println(\"You have no subscriptions.\");"},{"type":"INSERT","lineNumber":282,"content":"                return;"},{"type":"INSERT","lineNumber":283,"content":"            }"},{"type":"INSERT","lineNumber":284,"content":""},{"type":"INSERT","lineNumber":285,"content":"            System.out.println(\"Your Subscriptions:\");"},{"type":"INSERT","lineNumber":286,"content":"            for (int i = 0; i < subscriptions.size(); i++) {"},{"type":"INSERT","lineNumber":287,"content":"                System.out.printf(\"%d. %s (%s)%n\", i + 1, subscriptions.get(i).getId(),"},{"type":"INSERT","lineNumber":288,"content":"                        subscriptions.get(i).getPhoneNumber());"},{"type":"INSERT","lineNumber":289,"content":"            }"},{"type":"INSERT","lineNumber":290,"content":""},{"type":"INSERT","lineNumber":291,"content":"            System.out.print(\"Select a subscription to view usage history for: \");"},{"type":"INSERT","lineNumber":292,"content":"            int subChoice = Integer.parseInt(sc.nextLine());"},{"type":"INSERT","lineNumber":293,"content":"            if (subChoice < 1 || subChoice > subscriptions.size()) {"},{"type":"INSERT","lineNumber":294,"content":"                System.out.println(\"Invalid choice.\");"},{"type":"INSERT","lineNumber":295,"content":"                return;"},{"type":"INSERT","lineNumber":296,"content":"            }"},{"type":"INSERT","lineNumber":297,"content":"            Subscription selectedSub = subscriptions.get(subChoice - 1);"},{"type":"INSERT","lineNumber":298,"content":""},{"type":"INSERT","lineNumber":299,"content":"            List<UsageRecord> usageRecords = usageRecordRepo.findBySubscriptionId(selectedSub.getId());"},{"type":"INSERT","lineNumber":300,"content":""},{"type":"INSERT","lineNumber":301,"content":"            if (usageRecords.isEmpty()) {"},{"type":"INSERT","lineNumber":302,"content":"                System.out.println(\"No usage history found for this subscription.\");"},{"type":"INSERT","lineNumber":303,"content":"                return;"},{"type":"INSERT","lineNumber":304,"content":"            }"},{"type":"INSERT","lineNumber":305,"content":""},{"type":"INSERT","lineNumber":306,"content":"            System.out.println(\"\\n--- Usage History for \" + selectedSub.getId() + \" ---\");"},{"type":"INSERT","lineNumber":307,"content":"            for (UsageRecord record : usageRecords) {"},{"type":"INSERT","lineNumber":308,"content":"                System.out.printf(\"Timestamp: %s, Data: %.2f MB, Voice: %d mins, SMS: %d%n\","},{"type":"INSERT","lineNumber":309,"content":"                        record.getTimestamp(), record.getData(), record.getVoiceMinutes(), record.getSmsCount());"},{"type":"INSERT","lineNumber":310,"content":"            }"},{"type":"INSERT","lineNumber":311,"content":"        } catch (NumberFormatException e) {"},{"type":"INSERT","lineNumber":312,"content":"            System.out.println(\"Invalid input. Please enter a valid number.\");"},{"type":"INSERT","lineNumber":313,"content":"        } catch (Exception e) {"},{"type":"INSERT","lineNumber":314,"content":"            System.out.println(\"An error occurred: \" + e.getMessage());"},{"type":"INSERT","lineNumber":315,"content":"        }"},{"type":"INSERT","lineNumber":316,"content":"    }"},{"type":"INSERT","lineNumber":317,"content":""},{"type":"INSERT","lineNumber":318,"content":"    private void viewMyBills(User user) {"},{"type":"INSERT","lineNumber":319,"content":"        try {"},{"type":"INSERT","lineNumber":320,"content":"            System.out.println(\"\\n--- View My Bills ---\");"},{"type":"INSERT","lineNumber":321,"content":""},{"type":"INSERT","lineNumber":322,"content":"            List<Subscription> subscriptions = subscriptionService.getCustomerSubscriptions(user.getCustomerId());"},{"type":"INSERT","lineNumber":323,"content":"            if (subscriptions.isEmpty()) {"},{"type":"INSERT","lineNumber":324,"content":"                System.out.println(\"You have no subscriptions.\");"},{"type":"INSERT","lineNumber":325,"content":"                return;"},{"type":"INSERT","lineNumber":326,"content":"            }"},{"type":"INSERT","lineNumber":327,"content":"            List<Invoice> invoices = new ArrayList<>();"},{"type":"INSERT","lineNumber":328,"content":"            for (Subscription sub : subscriptions) {"},{"type":"INSERT","lineNumber":329,"content":"                invoices.addAll(invoiceRepo.findBySubscriptionId(sub.getId()));"},{"type":"INSERT","lineNumber":330,"content":"            }"},{"type":"INSERT","lineNumber":331,"content":""},{"type":"INSERT","lineNumber":332,"content":"            if (invoices.isEmpty()) {"},{"type":"INSERT","lineNumber":333,"content":"                System.out.println(\"No bills found.\");"},{"type":"INSERT","lineNumber":334,"content":"                return;"},{"type":"INSERT","lineNumber":335,"content":"            }"},{"type":"INSERT","lineNumber":336,"content":""},{"type":"INSERT","lineNumber":337,"content":"            for (Invoice invoice : invoices) {"},{"type":"INSERT","lineNumber":338,"content":"                System.out.printf(\"Invoice ID: %s, Due Date: %s, Amount: %.2f, Paid: %s%n\","},{"type":"INSERT","lineNumber":339,"content":"                        invoice.getId(), invoice.getBillingCycle().atEndOfMonth().plusDays(15),"},{"type":"INSERT","lineNumber":340,"content":"                        invoice.getTotalAmount(), invoice.isPaid() ? \"Yes\" : \"No\");"},{"type":"INSERT","lineNumber":341,"content":"            }"},{"type":"INSERT","lineNumber":342,"content":""},{"type":"INSERT","lineNumber":343,"content":"            System.out.print(\"\\nDo you want to see the details of a specific invoice? (yes/no): \");"},{"type":"INSERT","lineNumber":344,"content":"            String choice = sc.nextLine();"},{"type":"INSERT","lineNumber":345,"content":"            if (choice.equalsIgnoreCase(\"yes\")) {"},{"type":"INSERT","lineNumber":346,"content":"                System.out.print(\"Enter the Invoice ID: \");"},{"type":"INSERT","lineNumber":347,"content":"                String invoiceId = sc.nextLine();"},{"type":"INSERT","lineNumber":348,"content":"                Invoice selectedInvoice = invoiceRepo.findById(invoiceId)"},{"type":"INSERT","lineNumber":349,"content":"                        .orElseThrow(() -> new NameNotFoundException(\"Invoice Not Found\"));"},{"type":"INSERT","lineNumber":350,"content":"                if (selectedInvoice != null && subscriptions.stream()"},{"type":"INSERT","lineNumber":351,"content":"                        .anyMatch(sub -> sub.getId().equals(selectedInvoice.getSubscriptionId()))) {"},{"type":"INSERT","lineNumber":352,"content":"                    billingController"},{"type":"INSERT","lineNumber":353,"content":"                            .printInvoice(selectedInvoice);"},{"type":"INSERT","lineNumber":354,"content":"                } else {"},{"type":"INSERT","lineNumber":355,"content":"                    System.out.println(\"Invoice not found or you don't have permission to view it.\");"},{"type":"INSERT","lineNumber":356,"content":"                }"},{"type":"INSERT","lineNumber":357,"content":"            }"},{"type":"INSERT","lineNumber":358,"content":"        } catch (Exception e) {"},{"type":"INSERT","lineNumber":359,"content":"            System.out.println(\"An error occurred: \" + e.getMessage());"},{"type":"INSERT","lineNumber":360,"content":"        }"},{"type":"INSERT","lineNumber":361,"content":"    }"},{"type":"INSERT","lineNumber":362,"content":""},{"type":"INSERT","lineNumber":363,"content":"    private void payBill(User user) {"},{"type":"INSERT","lineNumber":364,"content":"        try {"},{"type":"INSERT","lineNumber":365,"content":"            System.out.println(\"\\n--- Pay a Bill ---\");"},{"type":"INSERT","lineNumber":366,"content":"            billingController"},{"type":"INSERT","lineNumber":367,"content":"                    .runBillingCycle(user);"},{"type":"INSERT","lineNumber":368,"content":"            List<Subscription> subscriptions = subscriptionService.getCustomerSubscriptions(user.getCustomerId());"},{"type":"INSERT","lineNumber":369,"content":""},{"type":"INSERT","lineNumber":370,"content":"            List<Invoice> unpaidInvoices = new ArrayList<>();"},{"type":"INSERT","lineNumber":371,"content":"            for (Subscription sub : subscriptions) {"},{"type":"INSERT","lineNumber":372,"content":"                unpaidInvoices.addAll(invoiceRepo.findBySubscriptionId(sub.getId())"},{"type":"INSERT","lineNumber":373,"content":"                        .stream().filter(inv -> !inv.isPaid()).toList());"},{"type":"INSERT","lineNumber":374,"content":"            }"},{"type":"INSERT","lineNumber":375,"content":""},{"type":"INSERT","lineNumber":376,"content":"            if (unpaidInvoices.size() == 0) {"},{"type":"INSERT","lineNumber":377,"content":"                System.out.println(\"You have no unpaid bills.\");"},{"type":"INSERT","lineNumber":378,"content":"                return;"},{"type":"INSERT","lineNumber":379,"content":"            }"},{"type":"INSERT","lineNumber":380,"content":""},{"type":"INSERT","lineNumber":381,"content":"            System.out.println(\"Your Unpaid Bills:\");"},{"type":"INSERT","lineNumber":382,"content":"            for (Invoice invoice : unpaidInvoices) {"},{"type":"INSERT","lineNumber":383,"content":"                System.out.printf(\"Invoice ID: %s, Due Date: %s, Amount: %.2f%n\","},{"type":"INSERT","lineNumber":384,"content":"                        invoice.getId(), invoice.getBillingCycle().atEndOfMonth().plusDays(15),"},{"type":"INSERT","lineNumber":385,"content":"                        invoice.getTotalAmount());"},{"type":"INSERT","lineNumber":386,"content":"            }"},{"type":"INSERT","lineNumber":387,"content":""},{"type":"INSERT","lineNumber":388,"content":"            System.out.print(\"Enter the Invoice ID to pay: \");"},{"type":"INSERT","lineNumber":389,"content":"            String invoiceId = sc.nextLine();"},{"type":"INSERT","lineNumber":390,"content":""},{"type":"INSERT","lineNumber":391,"content":"            Invoice selectedInvoice = unpaidInvoices.stream()"},{"type":"INSERT","lineNumber":392,"content":"                    .filter(inv -> inv.getId().equals(invoiceId))"},{"type":"INSERT","lineNumber":393,"content":"                    .findFirst()"},{"type":"INSERT","lineNumber":394,"content":"                    .orElse(null);"},{"type":"INSERT","lineNumber":395,"content":""},{"type":"INSERT","lineNumber":396,"content":"            if (selectedInvoice == null) {"},{"type":"INSERT","lineNumber":397,"content":"                System.out.println(\"Invoice not found or it is already paid.\");"},{"type":"INSERT","lineNumber":398,"content":"                return;"},{"type":"INSERT","lineNumber":399,"content":"            }"},{"type":"INSERT","lineNumber":400,"content":""},{"type":"INSERT","lineNumber":401,"content":"            selectedInvoice.setPaid(true);"},{"type":"INSERT","lineNumber":402,"content":"            invoiceRepo.update(selectedInvoice);"},{"type":"INSERT","lineNumber":403,"content":""},{"type":"INSERT","lineNumber":404,"content":"            System.out.println(\"Bill paid successfully.\");"},{"type":"INSERT","lineNumber":405,"content":"        } catch (Exception e) {"},{"type":"INSERT","lineNumber":406,"content":"            System.out.println(\"An error occurred: \" + e.getMessage());"},{"type":"INSERT","lineNumber":407,"content":"        }"},{"type":"INSERT","lineNumber":408,"content":"    }"},{"type":"INSERT","lineNumber":409,"content":""}]},{"timestamp":1756707312299,"changes":[{"type":"INSERT","lineNumber":2,"content":"import com.telecom.exceptions.InvalidChoiceException;"},{"type":"INSERT","lineNumber":3,"content":"import com.telecom.exceptions.PlanNotFoundException;"},{"type":"DELETE","lineNumber":9,"oldContent":"import java.util.ArrayList;"},{"type":"INSERT","lineNumber":12,"content":"import java.util.ArrayList;"},{"type":"DELETE","lineNumber":15,"oldContent":"/**"},{"type":"INSERT","lineNumber":18,"content":"/**"},{"type":"DELETE","lineNumber":28,"oldContent":"    private final UserService userService;"},{"type":"INSERT","lineNumber":31,"content":"    private final SubscriptionController subscriptionController;"},{"type":"INSERT","lineNumber":32,"content":"    private final BillingService billingService;"},{"type":"INSERT","lineNumber":33,"content":""},{"type":"INSERT","lineNumber":36,"content":"     *"},{"type":"DELETE","lineNumber":33,"oldContent":"     * "},{"type":"DELETE","lineNumber":47,"oldContent":""},{"type":"INSERT","lineNumber":51,"content":"                System.out.println(\"9. Initiate a MNP\");"},{"type":"INSERT","lineNumber":52,"content":"                System.out.println(\"10. Add a new Subscription\");"},{"type":"INSERT","lineNumber":56,"content":""},{"type":"DELETE","lineNumber":53,"oldContent":"                        new SubscriptionController(sc, subscriptionService, planService)"},{"type":"DELETE","lineNumber":54,"oldContent":"                                .showCustomerSubscriptions(user);"},{"type":"INSERT","lineNumber":59,"content":"                        subscriptionController.showCustomerSubscriptions(user);"},{"type":"DELETE","lineNumber":58,"oldContent":"            }"},{"type":"DELETE","lineNumber":60,"oldContent":"        }"},{"type":"DELETE","lineNumber":62,"oldContent":"    }"},{"type":"DELETE","lineNumber":64,"oldContent":""},{"type":"DELETE","lineNumber":66,"oldContent":"    private void addFamilyMember(User currentUser) {"},{"type":"DELETE","lineNumber":69,"oldContent":""},{"type":"DELETE","lineNumber":75,"oldContent":""},{"type":"DELETE","lineNumber":80,"oldContent":"        }"},{"type":"MODIFY","lineNumber":82,"content":"                    case 9:","oldContent":""},{"type":"INSERT","lineNumber":83,"content":"                        subscriptionController.initiateMnp(user);"},{"type":"INSERT","lineNumber":84,"content":"                        break;"},{"type":"INSERT","lineNumber":85,"content":"                    case 10:"},{"type":"INSERT","lineNumber":86,"content":"                        subscriptionController.addNewSubscription(user);"},{"type":"INSERT","lineNumber":87,"content":"                        break;"},{"type":"DELETE","lineNumber":92,"oldContent":""},{"type":"INSERT","lineNumber":97,"content":"            }"},{"type":"INSERT","lineNumber":98,"content":"        }"},{"type":"INSERT","lineNumber":99,"content":"    }"},{"type":"INSERT","lineNumber":101,"content":"    private void addFamilyMember(User currentUser) {"},{"type":"DELETE","lineNumber":98,"oldContent":""},{"type":"INSERT","lineNumber":104,"content":""},{"type":"INSERT","lineNumber":109,"content":""},{"type":"DELETE","lineNumber":109,"oldContent":""},{"type":"DELETE","lineNumber":112,"oldContent":"    }"},{"type":"DELETE","lineNumber":114,"oldContent":""},{"type":"DELETE","lineNumber":116,"oldContent":"    // other methods..."},{"type":"DELETE","lineNumber":124,"oldContent":"}"},{"type":"DELETE","lineNumber":127,"oldContent":""},{"type":"DELETE","lineNumber":128,"oldContent":""},{"type":"DELETE","lineNumber":130,"oldContent":"    }"},{"type":"DELETE","lineNumber":132,"oldContent":"        }"},{"type":"DELETE","lineNumber":134,"oldContent":"            System.out.println(\"An error occurred: \" + e.getMessage());"},{"type":"DELETE","lineNumber":136,"oldContent":"        } catch (Exception e) {"},{"type":"DELETE","lineNumber":138,"oldContent":"            System.out.println(\"Bill paid successfully.\");"},{"type":"DELETE","lineNumber":140,"oldContent":""},{"type":"DELETE","lineNumber":142,"oldContent":"            invoiceRepo.update(selectedInvoice);"},{"type":"DELETE","lineNumber":144,"oldContent":"            selectedInvoice.setPaid(true);"},{"type":"DELETE","lineNumber":146,"oldContent":""},{"type":"DELETE","lineNumber":148,"oldContent":"            }"},{"type":"DELETE","lineNumber":150,"oldContent":"                return;"},{"type":"DELETE","lineNumber":152,"oldContent":"                System.out.println(\"Invoice not found or it is already paid.\");"},{"type":"DELETE","lineNumber":154,"oldContent":"            if (selectedInvoice == null) {"},{"type":"DELETE","lineNumber":156,"oldContent":""},{"type":"DELETE","lineNumber":158,"oldContent":"                    .orElse(null);"},{"type":"DELETE","lineNumber":160,"oldContent":"                    .findFirst()"},{"type":"DELETE","lineNumber":162,"oldContent":"                    .filter(inv -> inv.getId().equals(invoiceId))"},{"type":"DELETE","lineNumber":163,"oldContent":"            Invoice selectedInvoice = unpaidInvoices.stream()"},{"type":"INSERT","lineNumber":145,"content":"        }"},{"type":"DELETE","lineNumber":166,"oldContent":"            String invoiceId = sc.nextLine();"},{"type":"DELETE","lineNumber":168,"oldContent":"            System.out.print(\"Enter the Invoice ID to pay: \");"},{"type":"DELETE","lineNumber":170,"oldContent":""},{"type":"DELETE","lineNumber":172,"oldContent":"            }"},{"type":"DELETE","lineNumber":173,"oldContent":"                        invoice.getTotalAmount());"},{"type":"INSERT","lineNumber":151,"content":""},{"type":"DELETE","lineNumber":175,"oldContent":"                        invoice.getId(), invoice.getBillingCycle().atEndOfMonth().plusDays(15),"},{"type":"DELETE","lineNumber":177,"oldContent":"                System.out.printf(\"Invoice ID: %s, Due Date: %s, Amount: %.2f%n\","},{"type":"DELETE","lineNumber":179,"oldContent":"            for (Invoice invoice : unpaidInvoices) {"},{"type":"DELETE","lineNumber":181,"oldContent":"            System.out.println(\"Your Unpaid Bills:\");"},{"type":"DELETE","lineNumber":184,"oldContent":"            }"},{"type":"DELETE","lineNumber":187,"oldContent":"                return;"},{"type":"DELETE","lineNumber":188,"oldContent":"                System.out.println(\"You have no unpaid bills.\");"},{"type":"DELETE","lineNumber":190,"oldContent":"            if (unpaidInvoices.size() == 0) {"},{"type":"DELETE","lineNumber":193,"oldContent":"            }"},{"type":"DELETE","lineNumber":195,"oldContent":"                        .stream().filter(inv -> !inv.isPaid()).toList());"},{"type":"DELETE","lineNumber":197,"oldContent":"                unpaidInvoices.addAll(invoiceRepo.findBySubscriptionId(sub.getId())"},{"type":"DELETE","lineNumber":199,"oldContent":"            for (Subscription sub : subscriptions) {"},{"type":"DELETE","lineNumber":201,"oldContent":"            List<Invoice> unpaidInvoices = new ArrayList<>();"},{"type":"DELETE","lineNumber":204,"oldContent":"            List<Subscription> subscriptions = subscriptionService.getCustomerSubscriptions(user.getCustomerId());"},{"type":"DELETE","lineNumber":206,"oldContent":"                    .runBillingCycle(user);"},{"type":"DELETE","lineNumber":208,"oldContent":"            billingController"},{"type":"DELETE","lineNumber":210,"oldContent":"            System.out.println(\"\\n--- Pay a Bill ---\");"},{"type":"DELETE","lineNumber":212,"oldContent":"        try {"},{"type":"DELETE","lineNumber":214,"oldContent":"    private void payBill(User user) {"},{"type":"DELETE","lineNumber":216,"oldContent":""},{"type":"DELETE","lineNumber":218,"oldContent":"    }"},{"type":"DELETE","lineNumber":220,"oldContent":"        }"},{"type":"DELETE","lineNumber":222,"oldContent":"            System.out.println(\"An error occurred: \" + e.getMessage());"},{"type":"DELETE","lineNumber":224,"oldContent":"        } catch (Exception e) {"},{"type":"DELETE","lineNumber":225,"oldContent":"            }"},{"type":"DELETE","lineNumber":226,"oldContent":"                }"},{"type":"DELETE","lineNumber":227,"oldContent":"                    System.out.println(\"Invoice not found or you don't have permission to view it.\");"},{"type":"INSERT","lineNumber":179,"content":"    }"},{"type":"INSERT","lineNumber":180,"content":""},{"type":"INSERT","lineNumber":181,"content":"    // other methods..."},{"type":"DELETE","lineNumber":229,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":231,"oldContent":"                            .printInvoice(selectedInvoice);"},{"type":"DELETE","lineNumber":233,"oldContent":"                    billingController"},{"type":"DELETE","lineNumber":235,"oldContent":"                        .anyMatch(sub -> sub.getId().equals(selectedInvoice.getSubscriptionId()))) {"},{"type":"DELETE","lineNumber":237,"oldContent":"                if (selectedInvoice != null && subscriptions.stream()"},{"type":"DELETE","lineNumber":239,"oldContent":"                        .orElseThrow(() -> new NameNotFoundException(\"Invoice Not Found\"));"},{"type":"DELETE","lineNumber":241,"oldContent":"                Invoice selectedInvoice = invoiceRepo.findById(invoiceId)"},{"type":"DELETE","lineNumber":243,"oldContent":"                String invoiceId = sc.nextLine();"},{"type":"DELETE","lineNumber":245,"oldContent":"                System.out.print(\"Enter the Invoice ID: \");"},{"type":"DELETE","lineNumber":247,"oldContent":"            if (choice.equalsIgnoreCase(\"yes\")) {"},{"type":"DELETE","lineNumber":249,"oldContent":"            String choice = sc.nextLine();"},{"type":"DELETE","lineNumber":251,"oldContent":"            System.out.print(\"\\nDo you want to see the details of a specific invoice? (yes/no): \");"},{"type":"DELETE","lineNumber":253,"oldContent":""},{"type":"DELETE","lineNumber":256,"oldContent":"            }"},{"type":"DELETE","lineNumber":257,"oldContent":"                        invoice.getTotalAmount(), invoice.isPaid() ? \"Yes\" : \"No\");"},{"type":"DELETE","lineNumber":259,"oldContent":"                        invoice.getId(), invoice.getBillingCycle().atEndOfMonth().plusDays(15),"},{"type":"DELETE","lineNumber":261,"oldContent":"                System.out.printf(\"Invoice ID: %s, Due Date: %s, Amount: %.2f, Paid: %s%n\","},{"type":"DELETE","lineNumber":263,"oldContent":"            for (Invoice invoice : invoices) {"},{"type":"DELETE","lineNumber":265,"oldContent":""},{"type":"DELETE","lineNumber":267,"oldContent":"            }"},{"type":"DELETE","lineNumber":269,"oldContent":"                return;"},{"type":"DELETE","lineNumber":271,"oldContent":"                System.out.println(\"No bills found.\");"},{"type":"DELETE","lineNumber":273,"oldContent":"            if (invoices.isEmpty()) {"},{"type":"DELETE","lineNumber":275,"oldContent":""},{"type":"DELETE","lineNumber":277,"oldContent":"            }"},{"type":"DELETE","lineNumber":279,"oldContent":"                invoices.addAll(invoiceRepo.findBySubscriptionId(sub.getId()));"},{"type":"DELETE","lineNumber":281,"oldContent":"            for (Subscription sub : subscriptions) {"},{"type":"DELETE","lineNumber":283,"oldContent":"            List<Invoice> invoices = new ArrayList<>();"},{"type":"DELETE","lineNumber":285,"oldContent":"            }"},{"type":"DELETE","lineNumber":287,"oldContent":"                return;"},{"type":"DELETE","lineNumber":289,"oldContent":"                System.out.println(\"You have no subscriptions.\");"},{"type":"DELETE","lineNumber":291,"oldContent":"            if (subscriptions.isEmpty()) {"},{"type":"DELETE","lineNumber":293,"oldContent":"            List<Subscription> subscriptions = subscriptionService.getCustomerSubscriptions(user.getCustomerId());"},{"type":"DELETE","lineNumber":296,"oldContent":""},{"type":"DELETE","lineNumber":297,"oldContent":"            System.out.println(\"\\n--- View My Bills ---\");"},{"type":"DELETE","lineNumber":299,"oldContent":"        try {"},{"type":"DELETE","lineNumber":301,"oldContent":"    private void viewMyBills(User user) {"},{"type":"DELETE","lineNumber":303,"oldContent":""},{"type":"DELETE","lineNumber":305,"oldContent":"    }"},{"type":"DELETE","lineNumber":307,"oldContent":"        }"},{"type":"DELETE","lineNumber":309,"oldContent":"            System.out.println(\"An error occurred: \" + e.getMessage());"},{"type":"DELETE","lineNumber":311,"oldContent":"        } catch (Exception e) {"},{"type":"DELETE","lineNumber":313,"oldContent":"            System.out.println(\"Invalid input. Please enter a valid number.\");"},{"type":"DELETE","lineNumber":315,"oldContent":"        } catch (NumberFormatException e) {"},{"type":"DELETE","lineNumber":317,"oldContent":"            }"},{"type":"DELETE","lineNumber":319,"oldContent":"                        record.getTimestamp(), record.getData(), record.getVoiceMinutes(), record.getSmsCount());"},{"type":"DELETE","lineNumber":321,"oldContent":"                System.out.printf(\"Timestamp: %s, Data: %.2f MB, Voice: %d mins, SMS: %d%n\","},{"type":"DELETE","lineNumber":323,"oldContent":"            for (UsageRecord record : usageRecords) {"},{"type":"DELETE","lineNumber":325,"oldContent":"            System.out.println(\"\\n--- Usage History for \" + selectedSub.getId() + \" ---\");"},{"type":"DELETE","lineNumber":327,"oldContent":""},{"type":"DELETE","lineNumber":329,"oldContent":"            }"},{"type":"DELETE","lineNumber":331,"oldContent":"                return;"},{"type":"DELETE","lineNumber":333,"oldContent":"                System.out.println(\"No usage history found for this subscription.\");"},{"type":"DELETE","lineNumber":335,"oldContent":"            if (usageRecords.isEmpty()) {"},{"type":"DELETE","lineNumber":337,"oldContent":""},{"type":"DELETE","lineNumber":339,"oldContent":"            List<UsageRecord> usageRecords = usageRecordRepo.findBySubscriptionId(selectedSub.getId());"},{"type":"DELETE","lineNumber":341,"oldContent":""},{"type":"DELETE","lineNumber":343,"oldContent":"            Subscription selectedSub = subscriptions.get(subChoice - 1);"},{"type":"DELETE","lineNumber":345,"oldContent":"            }"},{"type":"DELETE","lineNumber":347,"oldContent":"                return;"},{"type":"DELETE","lineNumber":349,"oldContent":"                System.out.println(\"Invalid choice.\");"},{"type":"DELETE","lineNumber":351,"oldContent":"            if (subChoice < 1 || subChoice > subscriptions.size()) {"},{"type":"DELETE","lineNumber":353,"oldContent":"            int subChoice = Integer.parseInt(sc.nextLine());"},{"type":"DELETE","lineNumber":355,"oldContent":"            System.out.print(\"Select a subscription to view usage history for: \");"},{"type":"DELETE","lineNumber":357,"oldContent":""},{"type":"DELETE","lineNumber":359,"oldContent":"            }"},{"type":"DELETE","lineNumber":361,"oldContent":"                        subscriptions.get(i).getPhoneNumber());"},{"type":"DELETE","lineNumber":363,"oldContent":"                System.out.printf(\"%d. %s (%s)%n\", i + 1, subscriptions.get(i).getId(),"},{"type":"DELETE","lineNumber":365,"oldContent":"            for (int i = 0; i < subscriptions.size(); i++) {"},{"type":"DELETE","lineNumber":367,"oldContent":"            System.out.println(\"Your Subscriptions:\");"},{"type":"DELETE","lineNumber":369,"oldContent":""},{"type":"DELETE","lineNumber":371,"oldContent":"            }"},{"type":"DELETE","lineNumber":373,"oldContent":"                return;"},{"type":"DELETE","lineNumber":375,"oldContent":"                System.out.println(\"You have no subscriptions.\");"},{"type":"DELETE","lineNumber":377,"oldContent":"            if (subscriptions.isEmpty()) {"},{"type":"DELETE","lineNumber":379,"oldContent":"            List<Subscription> subscriptions = subscriptionService.getCustomerSubscriptions(user.getCustomerId());"},{"type":"DELETE","lineNumber":381,"oldContent":""},{"type":"DELETE","lineNumber":383,"oldContent":"            System.out.println(\"\\n--- View Usage History ---\");"},{"type":"DELETE","lineNumber":384,"oldContent":"                System.out.println(\"Invalid choice.\");"},{"type":"DELETE","lineNumber":385,"oldContent":"        try {"},{"type":"DELETE","lineNumber":386,"oldContent":"                return;"},{"type":"DELETE","lineNumber":387,"oldContent":"    private void viewUsageHistory(User user) {"},{"type":"INSERT","lineNumber":260,"content":"                throw new InvalidChoiceException(\"Invalid choice.\");"},{"type":"DELETE","lineNumber":389,"oldContent":""},{"type":"DELETE","lineNumber":391,"oldContent":"    }"},{"type":"DELETE","lineNumber":393,"oldContent":"        }"},{"type":"DELETE","lineNumber":395,"oldContent":"            System.out.println(\"An error occurred: \" + e.getMessage());"},{"type":"DELETE","lineNumber":397,"oldContent":"        } catch (Exception e) {"},{"type":"DELETE","lineNumber":399,"oldContent":"            System.out.println(\"Invalid input. Please enter a valid number.\");"},{"type":"DELETE","lineNumber":401,"oldContent":"        } catch (NumberFormatException e) {"},{"type":"DELETE","lineNumber":403,"oldContent":"            System.out.println(\"Plan changed successfully.\");"},{"type":"DELETE","lineNumber":405,"oldContent":""},{"type":"INSERT","lineNumber":271,"content":"                throw new PlanNotFoundException(\"Plan not found.\");"},{"type":"INSERT","lineNumber":272,"content":"            }"},{"type":"INSERT","lineNumber":273,"content":""},{"type":"DELETE","lineNumber":408,"oldContent":"                System.out.println(\"Plan not found.\");"},{"type":"INSERT","lineNumber":276,"content":"            System.out.println(\"Plan changed successfully.\");"},{"type":"INSERT","lineNumber":277,"content":"        } catch (NumberFormatException e) {"},{"type":"INSERT","lineNumber":278,"content":"            System.out.println(\"Invalid input. Please enter a valid number.\");"},{"type":"INSERT","lineNumber":279,"content":"        } catch (Exception e) {"},{"type":"INSERT","lineNumber":280,"content":"            System.out.println(\"An error occurred: \" + e.getMessage());"},{"type":"INSERT","lineNumber":281,"content":"        }"},{"type":"INSERT","lineNumber":282,"content":"    }"},{"type":"INSERT","lineNumber":283,"content":""},{"type":"INSERT","lineNumber":284,"content":"    private void viewUsageHistory(User user) {"},{"type":"INSERT","lineNumber":285,"content":"        try {"},{"type":"INSERT","lineNumber":286,"content":"            System.out.println(\"\\n--- View Usage History ---\");"},{"type":"INSERT","lineNumber":287,"content":""},{"type":"INSERT","lineNumber":288,"content":"            List<Subscription> subscriptions = subscriptionService.getCustomerSubscriptions(user.getCustomerId());"},{"type":"INSERT","lineNumber":289,"content":"            if (subscriptions.isEmpty()) {"},{"type":"INSERT","lineNumber":290,"content":"                System.out.println(\"You have no subscriptions.\");"},{"type":"INSERT","lineNumber":293,"content":""},{"type":"INSERT","lineNumber":294,"content":"            System.out.println(\"Your Subscriptions:\");"},{"type":"INSERT","lineNumber":295,"content":"            for (int i = 0; i < subscriptions.size(); i++) {"},{"type":"INSERT","lineNumber":296,"content":"                System.out.printf(\"%d. %s (%s)%n\", i + 1, subscriptions.get(i).getId(),"},{"type":"INSERT","lineNumber":297,"content":"                        subscriptions.get(i).getPhoneNumber());"},{"type":"INSERT","lineNumber":298,"content":"            }"},{"type":"INSERT","lineNumber":299,"content":""},{"type":"INSERT","lineNumber":300,"content":"            System.out.print(\"Select a subscription to view usage history for: \");"},{"type":"INSERT","lineNumber":301,"content":"            int subChoice = Integer.parseInt(sc.nextLine());"},{"type":"INSERT","lineNumber":302,"content":"            if (subChoice < 1 || subChoice > subscriptions.size()) {"},{"type":"INSERT","lineNumber":303,"content":"                System.out.println(\"Invalid choice.\");"},{"type":"INSERT","lineNumber":304,"content":"                return;"},{"type":"INSERT","lineNumber":305,"content":"            }"},{"type":"INSERT","lineNumber":306,"content":"            Subscription selectedSub = subscriptions.get(subChoice - 1);"},{"type":"INSERT","lineNumber":307,"content":""},{"type":"INSERT","lineNumber":308,"content":"            List<UsageRecord> usageRecords = usageRecordRepo.findBySubscriptionId(selectedSub.getId());"},{"type":"INSERT","lineNumber":309,"content":""},{"type":"INSERT","lineNumber":310,"content":"            if (usageRecords.isEmpty()) {"},{"type":"INSERT","lineNumber":311,"content":"                System.out.println(\"No usage history found for this subscription.\");"},{"type":"INSERT","lineNumber":312,"content":"                return;"},{"type":"INSERT","lineNumber":313,"content":"            }"},{"type":"INSERT","lineNumber":314,"content":""},{"type":"INSERT","lineNumber":315,"content":"            System.out.println(\"\\n--- Usage History for \" + selectedSub.getId() + \" ---\");"},{"type":"INSERT","lineNumber":316,"content":"            for (UsageRecord record : usageRecords) {"},{"type":"INSERT","lineNumber":317,"content":"                System.out.printf(\"Timestamp: %s, Data: %.2f MB, Voice: %d mins, SMS: %d%n\","},{"type":"INSERT","lineNumber":318,"content":"                        record.getTimestamp(), record.getData(), record.getVoiceMinutes(), record.getSmsCount());"},{"type":"INSERT","lineNumber":319,"content":"            }"},{"type":"INSERT","lineNumber":320,"content":"        } catch (NumberFormatException e) {"},{"type":"INSERT","lineNumber":321,"content":"            System.out.println(\"Invalid input. Please enter a valid number.\");"},{"type":"INSERT","lineNumber":322,"content":"        } catch (Exception e) {"},{"type":"INSERT","lineNumber":323,"content":"            System.out.println(\"An error occurred: \" + e.getMessage());"},{"type":"INSERT","lineNumber":324,"content":"        }"},{"type":"INSERT","lineNumber":325,"content":"    }"},{"type":"INSERT","lineNumber":326,"content":""},{"type":"INSERT","lineNumber":327,"content":"    private void viewMyBills(User user) {"},{"type":"INSERT","lineNumber":328,"content":"        try {"},{"type":"INSERT","lineNumber":329,"content":"            System.out.println(\"\\n--- View My Bills ---\");"},{"type":"INSERT","lineNumber":330,"content":""},{"type":"INSERT","lineNumber":331,"content":"            List<Subscription> subscriptions = subscriptionService.getCustomerSubscriptions(user.getCustomerId());"},{"type":"INSERT","lineNumber":332,"content":"            if (subscriptions.isEmpty()) {"},{"type":"INSERT","lineNumber":333,"content":"                System.out.println(\"You have no subscriptions.\");"},{"type":"INSERT","lineNumber":334,"content":"                return;"},{"type":"INSERT","lineNumber":335,"content":"            }"},{"type":"INSERT","lineNumber":336,"content":"            List<Invoice> invoices = new ArrayList<>();"},{"type":"INSERT","lineNumber":337,"content":"            for (Subscription sub : subscriptions) {"},{"type":"INSERT","lineNumber":338,"content":"                invoices.addAll(invoiceRepo.findBySubscriptionId(sub.getId()));"},{"type":"INSERT","lineNumber":339,"content":"            }"},{"type":"INSERT","lineNumber":340,"content":""},{"type":"INSERT","lineNumber":341,"content":"            if (invoices.isEmpty()) {"},{"type":"INSERT","lineNumber":342,"content":"                System.out.println(\"No bills found.\");"},{"type":"INSERT","lineNumber":343,"content":"                return;"},{"type":"INSERT","lineNumber":344,"content":"            }"},{"type":"INSERT","lineNumber":345,"content":""},{"type":"INSERT","lineNumber":346,"content":"            for (Invoice invoice : invoices) {"},{"type":"INSERT","lineNumber":347,"content":"                System.out.printf(\"Invoice ID: %s, Due Date: %s, Amount: %.2f, Paid: %s%n\","},{"type":"INSERT","lineNumber":348,"content":"                        invoice.getId(), invoice.getBillingCycle().atEndOfMonth().plusDays(15),"},{"type":"INSERT","lineNumber":349,"content":"                        invoice.getTotalAmount(), invoice.isPaid() ? \"Yes\" : \"No\");"},{"type":"INSERT","lineNumber":350,"content":"            }"},{"type":"INSERT","lineNumber":351,"content":""},{"type":"INSERT","lineNumber":352,"content":"            System.out.print(\"\\nDo you want to see the details of a specific invoice? (yes/no): \");"},{"type":"INSERT","lineNumber":353,"content":"            String choice = sc.nextLine();"},{"type":"INSERT","lineNumber":354,"content":"            if (choice.equalsIgnoreCase(\"yes\")) {"},{"type":"INSERT","lineNumber":355,"content":"                System.out.print(\"Enter the Invoice ID: \");"},{"type":"INSERT","lineNumber":356,"content":"                String invoiceId = sc.nextLine();"},{"type":"INSERT","lineNumber":357,"content":"                Invoice selectedInvoice = invoiceRepo.findById(invoiceId)"},{"type":"INSERT","lineNumber":358,"content":"                        .orElseThrow(() -> new NameNotFoundException(\"Invoice Not Found\"));"},{"type":"INSERT","lineNumber":359,"content":"                if (selectedInvoice != null && subscriptions.stream()"},{"type":"INSERT","lineNumber":360,"content":"                        .anyMatch(sub -> sub.getId().equals(selectedInvoice.getSubscriptionId()))) {"},{"type":"INSERT","lineNumber":361,"content":"                    billingController"},{"type":"INSERT","lineNumber":362,"content":"                            .printInvoice(selectedInvoice);"},{"type":"INSERT","lineNumber":363,"content":"                } else {"},{"type":"INSERT","lineNumber":364,"content":"                    System.out.println(\"Invoice not found or you don't have permission to view it.\");"},{"type":"INSERT","lineNumber":365,"content":"                }"},{"type":"INSERT","lineNumber":366,"content":"            }"},{"type":"INSERT","lineNumber":367,"content":"        } catch (Exception e) {"},{"type":"INSERT","lineNumber":368,"content":"            System.out.println(\"An error occurred: \" + e.getMessage());"},{"type":"INSERT","lineNumber":369,"content":"        }"},{"type":"INSERT","lineNumber":370,"content":"    }"},{"type":"INSERT","lineNumber":371,"content":""},{"type":"INSERT","lineNumber":372,"content":"    private void payBill(User user) {"},{"type":"INSERT","lineNumber":373,"content":"        try {"},{"type":"INSERT","lineNumber":374,"content":"            System.out.println(\"\\n--- Pay a Bill ---\");"},{"type":"INSERT","lineNumber":375,"content":"            billingController"},{"type":"INSERT","lineNumber":376,"content":"                    .runBillingCycle(user);"},{"type":"INSERT","lineNumber":377,"content":"            List<Subscription> subscriptions = subscriptionService.getCustomerSubscriptions(user.getCustomerId());"},{"type":"INSERT","lineNumber":378,"content":""},{"type":"INSERT","lineNumber":379,"content":"            List<Invoice> unpaidInvoices = new ArrayList<>();"},{"type":"INSERT","lineNumber":380,"content":"            for (Subscription sub : subscriptions) {"},{"type":"INSERT","lineNumber":381,"content":"                unpaidInvoices.addAll(invoiceRepo.findBySubscriptionId(sub.getId())"},{"type":"INSERT","lineNumber":382,"content":"                        .stream().filter(inv -> !inv.isPaid()).toList());"},{"type":"INSERT","lineNumber":383,"content":"            }"},{"type":"INSERT","lineNumber":384,"content":""},{"type":"INSERT","lineNumber":385,"content":"            if (unpaidInvoices.isEmpty()) {"},{"type":"INSERT","lineNumber":386,"content":"                System.out.println(\"You have no unpaid bills.\");"},{"type":"INSERT","lineNumber":387,"content":"                return;"},{"type":"INSERT","lineNumber":388,"content":"            }"},{"type":"INSERT","lineNumber":389,"content":""},{"type":"INSERT","lineNumber":390,"content":"            System.out.println(\"Your Unpaid Bills:\");"},{"type":"INSERT","lineNumber":391,"content":"            for (Invoice invoice : unpaidInvoices) {"},{"type":"INSERT","lineNumber":392,"content":"                System.out.printf(\"Invoice ID: %s, Due Date: %s, Amount: %.2f%n\","},{"type":"INSERT","lineNumber":393,"content":"                        invoice.getId(), invoice.getBillingCycle().atEndOfMonth().plusDays(15),"},{"type":"INSERT","lineNumber":394,"content":"                        invoice.getTotalAmount());"},{"type":"INSERT","lineNumber":395,"content":"            }"},{"type":"INSERT","lineNumber":396,"content":""},{"type":"INSERT","lineNumber":397,"content":"            System.out.print(\"Enter the Invoice ID to pay: \");"},{"type":"INSERT","lineNumber":398,"content":"            String invoiceId = sc.nextLine();"},{"type":"INSERT","lineNumber":399,"content":""},{"type":"INSERT","lineNumber":400,"content":"            Invoice selectedInvoice = unpaidInvoices.stream()"},{"type":"INSERT","lineNumber":401,"content":"                    .filter(inv -> inv.getId().equals(invoiceId))"},{"type":"INSERT","lineNumber":402,"content":"                    .findFirst()"},{"type":"INSERT","lineNumber":403,"content":"                    .orElse(null);"},{"type":"INSERT","lineNumber":404,"content":""},{"type":"INSERT","lineNumber":405,"content":"            if (selectedInvoice == null) {"},{"type":"INSERT","lineNumber":406,"content":"                throw new InvalidChoiceException(\"Invoice not found or it is already paid.\");"},{"type":"INSERT","lineNumber":407,"content":"            }"},{"type":"INSERT","lineNumber":408,"content":""},{"type":"INSERT","lineNumber":409,"content":"            billingService.payInvoice(selectedInvoice.getId());"},{"type":"INSERT","lineNumber":410,"content":""},{"type":"INSERT","lineNumber":411,"content":"            System.out.println(\"Bill paid successfully.\");"},{"type":"INSERT","lineNumber":412,"content":"        } catch (Exception e) {"},{"type":"INSERT","lineNumber":413,"content":"            System.out.println(\"An error occurred: \" + e.getMessage());"},{"type":"INSERT","lineNumber":414,"content":"        }"},{"type":"INSERT","lineNumber":415,"content":"    }"},{"type":"INSERT","lineNumber":416,"content":""},{"type":"INSERT","lineNumber":417,"content":"}"},{"type":"INSERT","lineNumber":418,"content":""}]},{"timestamp":1756710368390,"changes":[{"type":"MODIFY","lineNumber":4,"content":"import com.telecom.models.*;","oldContent":"import com.telecom.models.*;"},{"type":"MODIFY","lineNumber":13,"content":"import java.util.List;","oldContent":"import java.util.List;"},{"type":"INSERT","lineNumber":15,"content":"import java.util.concurrent.ThreadLocalRandom;"},{"type":"DELETE","lineNumber":18,"oldContent":" * Console viewer for all Customer-specific operations."},{"type":"INSERT","lineNumber":20,"content":" * Console viewer for all Customer-specific operations."},{"type":"DELETE","lineNumber":31,"oldContent":"    /**"},{"type":"DELETE","lineNumber":33,"oldContent":"     * Main menu for Customer users."},{"type":"MODIFY","lineNumber":35,"content":"    /**","oldContent":"     * @param user The currently authenticated user."},{"type":"INSERT","lineNumber":36,"content":"     * Main menu for Customer users."},{"type":"INSERT","lineNumber":37,"content":"     *"},{"type":"INSERT","lineNumber":38,"content":"     * @param user The currently authenticated user."},{"type":"DELETE","lineNumber":39,"oldContent":"     *"},{"type":"INSERT","lineNumber":52,"content":"                System.out.println(\"9. Initiate a MNP\");"},{"type":"INSERT","lineNumber":53,"content":"                System.out.println(\"10. Add a new Subscription\");"},{"type":"DELETE","lineNumber":54,"oldContent":"                System.out.println(\"9. Initiate a MNP\");"},{"type":"INSERT","lineNumber":57,"content":""},{"type":"DELETE","lineNumber":56,"oldContent":"                System.out.println(\"10. Add a new Subscription\");"},{"type":"INSERT","lineNumber":60,"content":"                        subscriptionController.showCustomerSubscriptions(user);"},{"type":"DELETE","lineNumber":59,"oldContent":""},{"type":"DELETE","lineNumber":62,"oldContent":"                        subscriptionController.showCustomerSubscriptions(user);"},{"type":"INSERT","lineNumber":80,"content":"                    case 8:"},{"type":"INSERT","lineNumber":81,"content":"                        viewMyFamilyMembers(user);"},{"type":"INSERT","lineNumber":82,"content":"                        break;"},{"type":"DELETE","lineNumber":81,"oldContent":"                    case 8:"},{"type":"DELETE","lineNumber":83,"oldContent":"                        viewMyFamilyMembers(user);"},{"type":"DELETE","lineNumber":85,"oldContent":"                        break;"},{"type":"DELETE","lineNumber":87,"oldContent":"                    case 0:"},{"type":"INSERT","lineNumber":89,"content":"                    case 0:"},{"type":"DELETE","lineNumber":97,"oldContent":""},{"type":"DELETE","lineNumber":99,"oldContent":"        try {"},{"type":"INSERT","lineNumber":101,"content":""},{"type":"INSERT","lineNumber":102,"content":"    private void addFamilyMember(User currentUser) {"},{"type":"INSERT","lineNumber":103,"content":"        try {"},{"type":"INSERT","lineNumber":105,"content":""},{"type":"DELETE","lineNumber":104,"oldContent":"    private void addFamilyMember(User currentUser) {"},{"type":"DELETE","lineNumber":114,"oldContent":""},{"type":"DELETE","lineNumber":136,"oldContent":"        }"},{"type":"DELETE","lineNumber":140,"oldContent":""},{"type":"INSERT","lineNumber":146,"content":"        }"},{"type":"INSERT","lineNumber":152,"content":""},{"type":"DELETE","lineNumber":155,"oldContent":"    }"},{"type":"DELETE","lineNumber":156,"oldContent":""},{"type":"DELETE","lineNumber":158,"oldContent":"    // other methods..."},{"type":"INSERT","lineNumber":180,"content":"    }"},{"type":"INSERT","lineNumber":181,"content":""},{"type":"INSERT","lineNumber":182,"content":"    // other methods..."},{"type":"DELETE","lineNumber":198,"oldContent":"                throw new InvalidChoiceException(\"Invalid choice.\");"},{"type":"MODIFY","lineNumber":205,"content":"            Subscription selectedSub = subscriptions.get(subChoice - 1);","oldContent":"                throw new PlanNotFoundException(\"Plan not found.\");"},{"type":"INSERT","lineNumber":206,"content":""},{"type":"INSERT","lineNumber":207,"content":"            // Pick random usage type (1=Data, 2=Voice, 3=SMS)"},{"type":"INSERT","lineNumber":208,"content":"            int usageType = ThreadLocalRandom.current().nextInt(1, 4);"},{"type":"INSERT","lineNumber":209,"content":""},{"type":"INSERT","lineNumber":210,"content":"            // Generate random amount based on type"},{"type":"INSERT","lineNumber":211,"content":"            double amount = switch (usageType) {"},{"type":"INSERT","lineNumber":212,"content":"                case 1 -> // Data in MB"},{"type":"INSERT","lineNumber":213,"content":"                        ThreadLocalRandom.current().nextDouble(50, 2048); // between 50MB and 2GB"},{"type":"INSERT","lineNumber":214,"content":"                case 2 -> // Voice minutes"},{"type":"INSERT","lineNumber":215,"content":"                        ThreadLocalRandom.current().nextInt(1, 300); // between 1 and 300 minutes"},{"type":"INSERT","lineNumber":216,"content":"                case 3 -> // SMS count"},{"type":"INSERT","lineNumber":217,"content":"                        ThreadLocalRandom.current().nextInt(1, 100); // between 1 and 100 SMS"},{"type":"INSERT","lineNumber":218,"content":"                default -> 0;"},{"type":"INSERT","lineNumber":219,"content":"            };"},{"type":"INSERT","lineNumber":220,"content":""},{"type":"INSERT","lineNumber":221,"content":"            // Build usage record"},{"type":"INSERT","lineNumber":222,"content":"            UsageRecord.UsageRecordBuilder usageBuilder = UsageRecord.builder()"},{"type":"INSERT","lineNumber":223,"content":"                    .subscriptionId(selectedSub.getId())"},{"type":"INSERT","lineNumber":224,"content":"                    .familyId(selectedSub.getFamilyId())"},{"type":"INSERT","lineNumber":225,"content":"                    .timestamp(LocalDateTime.now());"},{"type":"INSERT","lineNumber":226,"content":""},{"type":"INSERT","lineNumber":227,"content":"            switch (usageType) {"},{"type":"INSERT","lineNumber":228,"content":"                case 1:"},{"type":"INSERT","lineNumber":229,"content":"                    usageBuilder.data(amount);"},{"type":"INSERT","lineNumber":230,"content":"                    System.out.println(\"Generated Data Usage: \" + amount + \" MB\");"},{"type":"INSERT","lineNumber":231,"content":"                    break;"},{"type":"INSERT","lineNumber":232,"content":"                case 2:"},{"type":"INSERT","lineNumber":233,"content":"                    usageBuilder.voiceMinutes((int) amount);"},{"type":"INSERT","lineNumber":234,"content":"                    System.out.println(\"Generated Voice Usage: \" + (int) amount + \" minutes\");"},{"type":"INSERT","lineNumber":235,"content":"                    break;"},{"type":"INSERT","lineNumber":236,"content":"                case 3:"},{"type":"INSERT","lineNumber":237,"content":"                    usageBuilder.smsCount((int) amount);"},{"type":"INSERT","lineNumber":238,"content":"                    System.out.println(\"Generated SMS Usage: \" + (int) amount + \" messages\");"},{"type":"INSERT","lineNumber":239,"content":"                    break;"},{"type":"INSERT","lineNumber":241,"content":""},{"type":"INSERT","lineNumber":242,"content":"            usageRecordRepo.save(usageBuilder.build());"},{"type":"INSERT","lineNumber":243,"content":"            System.out.println(\"Usage added successfully.\");"},{"type":"INSERT","lineNumber":244,"content":"        } catch (NumberFormatException e) {"},{"type":"INSERT","lineNumber":245,"content":"            System.out.println(\"Invalid input. Please enter a valid number.\");"},{"type":"INSERT","lineNumber":246,"content":"        } catch (Exception e) {"},{"type":"INSERT","lineNumber":247,"content":"            System.out.println(\"An error occurred: \" + e.getMessage());"},{"type":"INSERT","lineNumber":248,"content":"        }"},{"type":"INSERT","lineNumber":249,"content":"    }"},{"type":"INSERT","lineNumber":250,"content":""},{"type":"INSERT","lineNumber":251,"content":"    private void changePlan(User user) {"},{"type":"INSERT","lineNumber":252,"content":"        try {"},{"type":"INSERT","lineNumber":253,"content":"            System.out.println(\"\\n--- Change Plan ---\");"},{"type":"INSERT","lineNumber":254,"content":""},{"type":"INSERT","lineNumber":255,"content":"            List<Subscription> subscriptions = subscriptionService.getCustomerSubscriptions(user.getCustomerId());"},{"type":"INSERT","lineNumber":256,"content":"            if (subscriptions.isEmpty()) {"},{"type":"INSERT","lineNumber":257,"content":"                System.out.println(\"You have no subscriptions.\");"},{"type":"INSERT","lineNumber":258,"content":"                return;"},{"type":"INSERT","lineNumber":259,"content":"            }"},{"type":"INSERT","lineNumber":260,"content":""},{"type":"INSERT","lineNumber":261,"content":"            System.out.println(\"Your Subscriptions:\");"},{"type":"INSERT","lineNumber":262,"content":"            for (int i = 0; i < subscriptions.size(); i++) {"},{"type":"INSERT","lineNumber":263,"content":"                System.out.printf(\"%d. %s (%s)%n\", i + 1, subscriptions.get(i).getId(),"},{"type":"INSERT","lineNumber":264,"content":"                        subscriptions.get(i).getPhoneNumber());"},{"type":"INSERT","lineNumber":265,"content":"            }"},{"type":"INSERT","lineNumber":266,"content":""},{"type":"INSERT","lineNumber":267,"content":"            System.out.print(\"Select a subscription to change the plan for: \");"},{"type":"INSERT","lineNumber":268,"content":"            int subChoice = Integer.parseInt(sc.nextLine());"},{"type":"INSERT","lineNumber":269,"content":"            if (subChoice < 1 || subChoice > subscriptions.size()) {"},{"type":"INSERT","lineNumber":270,"content":"                throw new InvalidChoiceException(\"Invalid choice.\");"},{"type":"INSERT","lineNumber":271,"content":"            }"},{"type":"INSERT","lineNumber":274,"content":"            new PlanController(sc, planService).showAllPlans();"},{"type":"INSERT","lineNumber":276,"content":"            System.out.print(\"Enter the ID of the new plan: \");"},{"type":"INSERT","lineNumber":277,"content":"            String newPlanId = sc.nextLine();"},{"type":"INSERT","lineNumber":278,"content":""},{"type":"INSERT","lineNumber":279,"content":"            Plan newPlan = planService.getPlan(newPlanId);"},{"type":"INSERT","lineNumber":280,"content":"            if (newPlan == null) {"},{"type":"INSERT","lineNumber":281,"content":"                throw new PlanNotFoundException(\"Plan not found.\");"},{"type":"INSERT","lineNumber":282,"content":"            }"},{"type":"INSERT","lineNumber":283,"content":""},{"type":"INSERT","lineNumber":284,"content":"            subscriptionService.changePlan(selectedSub.getId(), newPlan.getId());"},{"type":"INSERT","lineNumber":285,"content":""},{"type":"DELETE","lineNumber":211,"oldContent":"            System.out.print(\"Enter usage type (1. Data (MB), 2. Voice (Mins), 3. SMS): \");"},{"type":"DELETE","lineNumber":214,"oldContent":"            int usageType = Integer.parseInt(sc.nextLine());"},{"type":"DELETE","lineNumber":217,"oldContent":""},{"type":"DELETE","lineNumber":220,"oldContent":"            System.out.print(\"Enter amount: \");"},{"type":"DELETE","lineNumber":223,"oldContent":"            double amount = Double.parseDouble(sc.nextLine());"},{"type":"DELETE","lineNumber":227,"oldContent":""},{"type":"DELETE","lineNumber":229,"oldContent":"            UsageRecord.UsageRecordBuilder usageBuilder = UsageRecord.builder()"},{"type":"DELETE","lineNumber":232,"oldContent":"                    .subscriptionId(selectedSub.getId())"},{"type":"DELETE","lineNumber":233,"oldContent":"                    .familyId(selectedSub.getFamilyId())"},{"type":"INSERT","lineNumber":301,"content":"                return;"},{"type":"INSERT","lineNumber":302,"content":"            }"},{"type":"DELETE","lineNumber":236,"oldContent":"                    .timestamp(LocalDateTime.now());"},{"type":"DELETE","lineNumber":238,"oldContent":""},{"type":"DELETE","lineNumber":242,"oldContent":"            switch (usageType) {"},{"type":"DELETE","lineNumber":245,"oldContent":"                case 1:"},{"type":"DELETE","lineNumber":248,"oldContent":"                    usageBuilder.data(amount);"},{"type":"DELETE","lineNumber":251,"oldContent":"                    break;"},{"type":"DELETE","lineNumber":254,"oldContent":"                case 2:"},{"type":"DELETE","lineNumber":257,"oldContent":"                    usageBuilder.voiceMinutes((int) amount);"},{"type":"DELETE","lineNumber":260,"oldContent":"                    break;"},{"type":"DELETE","lineNumber":263,"oldContent":"                case 3:"},{"type":"DELETE","lineNumber":266,"oldContent":"                    usageBuilder.smsCount((int) amount);"},{"type":"DELETE","lineNumber":269,"oldContent":"                    break;"},{"type":"DELETE","lineNumber":272,"oldContent":"                default:"},{"type":"DELETE","lineNumber":275,"oldContent":"                    System.out.println(\"Invalid usage type.\");"},{"type":"DELETE","lineNumber":278,"oldContent":"                    return;"},{"type":"DELETE","lineNumber":281,"oldContent":"            }"},{"type":"DELETE","lineNumber":284,"oldContent":""},{"type":"DELETE","lineNumber":287,"oldContent":"            usageRecordRepo.save(usageBuilder.build());"},{"type":"DELETE","lineNumber":290,"oldContent":"            System.out.println(\"Usage added successfully.\");"},{"type":"DELETE","lineNumber":293,"oldContent":"        } catch (NumberFormatException e) {"},{"type":"DELETE","lineNumber":296,"oldContent":"            System.out.println(\"Invalid input. Please enter a valid number.\");"},{"type":"DELETE","lineNumber":299,"oldContent":"        } catch (Exception e) {"},{"type":"DELETE","lineNumber":302,"oldContent":"            System.out.println(\"An error occurred: \" + e.getMessage());"},{"type":"DELETE","lineNumber":305,"oldContent":"        }"},{"type":"DELETE","lineNumber":308,"oldContent":"    }"},{"type":"DELETE","lineNumber":312,"oldContent":""},{"type":"DELETE","lineNumber":314,"oldContent":"    private void changePlan(User user) {"},{"type":"DELETE","lineNumber":317,"oldContent":"        try {"},{"type":"DELETE","lineNumber":320,"oldContent":"            System.out.println(\"\\n--- Change Plan ---\");"},{"type":"DELETE","lineNumber":323,"oldContent":""},{"type":"DELETE","lineNumber":326,"oldContent":"            List<Subscription> subscriptions = subscriptionService.getCustomerSubscriptions(user.getCustomerId());"},{"type":"DELETE","lineNumber":329,"oldContent":"            if (subscriptions.isEmpty()) {"},{"type":"DELETE","lineNumber":332,"oldContent":"                System.out.println(\"You have no subscriptions.\");"},{"type":"DELETE","lineNumber":335,"oldContent":"                return;"},{"type":"DELETE","lineNumber":338,"oldContent":"            }"},{"type":"DELETE","lineNumber":341,"oldContent":""},{"type":"DELETE","lineNumber":344,"oldContent":"            System.out.println(\"Your Subscriptions:\");"},{"type":"DELETE","lineNumber":347,"oldContent":"            for (int i = 0; i < subscriptions.size(); i++) {"},{"type":"DELETE","lineNumber":350,"oldContent":"                System.out.printf(\"%d. %s (%s)%n\", i + 1, subscriptions.get(i).getId(),"},{"type":"DELETE","lineNumber":353,"oldContent":"                        subscriptions.get(i).getPhoneNumber());"},{"type":"DELETE","lineNumber":356,"oldContent":"            }"},{"type":"DELETE","lineNumber":359,"oldContent":""},{"type":"DELETE","lineNumber":362,"oldContent":"            System.out.print(\"Select a subscription to change the plan for: \");"},{"type":"DELETE","lineNumber":365,"oldContent":"            int subChoice = Integer.parseInt(sc.nextLine());"},{"type":"DELETE","lineNumber":368,"oldContent":"            if (subChoice < 1 || subChoice > subscriptions.size()) {"},{"type":"DELETE","lineNumber":375,"oldContent":"            }"},{"type":"DELETE","lineNumber":378,"oldContent":"            Subscription selectedSub = subscriptions.get(subChoice - 1);"},{"type":"DELETE","lineNumber":381,"oldContent":""},{"type":"DELETE","lineNumber":384,"oldContent":"            new PlanController(sc, planService).showAllPlans();"},{"type":"DELETE","lineNumber":387,"oldContent":""},{"type":"DELETE","lineNumber":390,"oldContent":"            System.out.print(\"Enter the ID of the new plan: \");"},{"type":"DELETE","lineNumber":393,"oldContent":"            String newPlanId = sc.nextLine();"},{"type":"DELETE","lineNumber":396,"oldContent":""},{"type":"DELETE","lineNumber":399,"oldContent":"            Plan newPlan = planService.getPlan(newPlanId);"},{"type":"DELETE","lineNumber":402,"oldContent":"            if (newPlan == null) {"},{"type":"DELETE","lineNumber":404,"oldContent":"            subscriptionService.changePlan(selectedSub.getId(), newPlan.getId());"},{"type":"DELETE","lineNumber":408,"oldContent":""},{"type":"DELETE","lineNumber":409,"oldContent":"                return;"},{"type":"DELETE","lineNumber":411,"oldContent":"            }"},{"type":"DELETE","lineNumber":413,"oldContent":""},{"type":"DELETE","lineNumber":415,"oldContent":"}"},{"type":"DELETE","lineNumber":417,"oldContent":""},{"type":"INSERT","lineNumber":426,"content":""},{"type":"INSERT","lineNumber":427,"content":"}"},{"type":"INSERT","lineNumber":428,"content":""}]},{"timestamp":1756715312384,"changes":[{"type":"INSERT","lineNumber":3,"content":"import com.telecom.exceptions.PlanNotFoundException;"},{"type":"DELETE","lineNumber":4,"oldContent":"import com.telecom.models.*;"},{"type":"INSERT","lineNumber":12,"content":"import java.time.format.DateTimeFormatter;"},{"type":"INSERT","lineNumber":13,"content":"import java.util.ArrayList;"},{"type":"DELETE","lineNumber":13,"oldContent":"import java.util.List;"},{"type":"INSERT","lineNumber":35,"content":""},{"type":"DELETE","lineNumber":36,"oldContent":""},{"type":"DELETE","lineNumber":38,"oldContent":"     */"},{"type":"INSERT","lineNumber":40,"content":"     */"},{"type":"DELETE","lineNumber":52,"oldContent":"                System.out.println(\"0. Logout\");"},{"type":"MODIFY","lineNumber":55,"content":"                System.out.println(\"0. Logout\");","oldContent":"                System.out.print(\"Select an option: \");"},{"type":"INSERT","lineNumber":56,"content":"                System.out.print(\"Select an option: \");"},{"type":"DELETE","lineNumber":57,"oldContent":"                switch (choice) {"},{"type":"INSERT","lineNumber":59,"content":"                switch (choice) {"},{"type":"DELETE","lineNumber":60,"oldContent":"                        break;"},{"type":"INSERT","lineNumber":62,"content":"                        break;"},{"type":"DELETE","lineNumber":80,"oldContent":"                    case 9:"},{"type":"DELETE","lineNumber":82,"oldContent":"                        subscriptionController.initiateMnp(user);"},{"type":"INSERT","lineNumber":84,"content":"                    case 9:"},{"type":"INSERT","lineNumber":85,"content":"                        subscriptionController.initiateMnp(user);"},{"type":"DELETE","lineNumber":100,"oldContent":""},{"type":"INSERT","lineNumber":102,"content":""},{"type":"DELETE","lineNumber":103,"oldContent":"            System.out.println(\"\\n--- Add a Family Member ---\");"},{"type":"MODIFY","lineNumber":105,"content":"            System.out.println(\"\\n--- Add a Family Member ---\");","oldContent":"            // Find the current user's family subscription"},{"type":"INSERT","lineNumber":107,"content":"            // Find the current user's family subscription"},{"type":"DELETE","lineNumber":145,"oldContent":"        }"},{"type":"INSERT","lineNumber":147,"content":"        }"},{"type":"DELETE","lineNumber":178,"oldContent":"    }"},{"type":"DELETE","lineNumber":180,"oldContent":""},{"type":"INSERT","lineNumber":181,"content":"    }"},{"type":"INSERT","lineNumber":182,"content":""},{"type":"DELETE","lineNumber":207,"oldContent":"            }"},{"type":"DELETE","lineNumber":209,"oldContent":"            Subscription selectedSub = subscriptions.get(subChoice - 1);"},{"type":"DELETE","lineNumber":212,"oldContent":""},{"type":"DELETE","lineNumber":213,"oldContent":""},{"type":"DELETE","lineNumber":215,"oldContent":"            System.out.println(\"Plan changed successfully.\");"},{"type":"DELETE","lineNumber":218,"oldContent":"        } catch (NumberFormatException e) {"},{"type":"DELETE","lineNumber":220,"oldContent":"            System.out.println(\"Invalid input. Please enter a valid number.\");"},{"type":"DELETE","lineNumber":223,"oldContent":"        } catch (Exception e) {"},{"type":"DELETE","lineNumber":225,"oldContent":"            System.out.println(\"An error occurred: \" + e.getMessage());"},{"type":"DELETE","lineNumber":228,"oldContent":"        }"},{"type":"DELETE","lineNumber":230,"oldContent":"    }"},{"type":"DELETE","lineNumber":233,"oldContent":""},{"type":"DELETE","lineNumber":235,"oldContent":"    private void viewUsageHistory(User user) {"},{"type":"DELETE","lineNumber":238,"oldContent":"        try {"},{"type":"DELETE","lineNumber":240,"oldContent":"            System.out.println(\"\\n--- View Usage History ---\");"},{"type":"DELETE","lineNumber":242,"oldContent":""},{"type":"DELETE","lineNumber":245,"oldContent":"            List<Subscription> subscriptions = subscriptionService.getCustomerSubscriptions(user.getCustomerId());"},{"type":"DELETE","lineNumber":248,"oldContent":"            if (subscriptions.isEmpty()) {"},{"type":"DELETE","lineNumber":250,"oldContent":"                System.out.println(\"You have no subscriptions.\");"},{"type":"DELETE","lineNumber":254,"oldContent":""},{"type":"DELETE","lineNumber":256,"oldContent":"            System.out.println(\"Your Subscriptions:\");"},{"type":"DELETE","lineNumber":259,"oldContent":"            for (int i = 0; i < subscriptions.size(); i++) {"},{"type":"DELETE","lineNumber":262,"oldContent":"                System.out.printf(\"%d. %s (%s)%n\", i + 1, subscriptions.get(i).getId(),"},{"type":"DELETE","lineNumber":263,"oldContent":"                        subscriptions.get(i).getPhoneNumber());"},{"type":"DELETE","lineNumber":264,"oldContent":""},{"type":"INSERT","lineNumber":242,"content":""},{"type":"DELETE","lineNumber":268,"oldContent":""},{"type":"DELETE","lineNumber":270,"oldContent":"            System.out.print(\"Select a subscription to view usage history for: \");"},{"type":"DELETE","lineNumber":273,"oldContent":"            int subChoice = Integer.parseInt(sc.nextLine());"},{"type":"DELETE","lineNumber":275,"oldContent":"            if (subChoice < 1 || subChoice > subscriptions.size()) {"},{"type":"DELETE","lineNumber":278,"oldContent":"                System.out.println(\"Invalid choice.\");"},{"type":"DELETE","lineNumber":280,"oldContent":"                return;"},{"type":"DELETE","lineNumber":283,"oldContent":"            }"},{"type":"DELETE","lineNumber":285,"oldContent":"            Subscription selectedSub = subscriptions.get(subChoice - 1);"},{"type":"DELETE","lineNumber":288,"oldContent":""},{"type":"DELETE","lineNumber":290,"oldContent":"            List<UsageRecord> usageRecords = usageRecordRepo.findBySubscriptionId(selectedSub.getId());"},{"type":"DELETE","lineNumber":293,"oldContent":""},{"type":"DELETE","lineNumber":295,"oldContent":"            if (usageRecords.isEmpty()) {"},{"type":"DELETE","lineNumber":298,"oldContent":"                System.out.println(\"No usage history found for this subscription.\");"},{"type":"DELETE","lineNumber":300,"oldContent":"                return;"},{"type":"DELETE","lineNumber":304,"oldContent":"            }"},{"type":"DELETE","lineNumber":306,"oldContent":""},{"type":"DELETE","lineNumber":308,"oldContent":"            System.out.println(\"\\n--- Usage History for \" + selectedSub.getId() + \" ---\");"},{"type":"DELETE","lineNumber":310,"oldContent":"            for (UsageRecord record : usageRecords) {"},{"type":"DELETE","lineNumber":313,"oldContent":"                System.out.printf(\"Timestamp: %s, Data: %.2f MB, Voice: %d mins, SMS: %d%n\","},{"type":"DELETE","lineNumber":315,"oldContent":"                        record.getTimestamp(), record.getData(), record.getVoiceMinutes(), record.getSmsCount());"},{"type":"DELETE","lineNumber":316,"oldContent":"            }"},{"type":"INSERT","lineNumber":273,"content":"            Subscription selectedSub = subscriptions.get(subChoice - 1);"},{"type":"INSERT","lineNumber":274,"content":""},{"type":"DELETE","lineNumber":318,"oldContent":"        } catch (NumberFormatException e) {"},{"type":"INSERT","lineNumber":276,"content":""},{"type":"DELETE","lineNumber":320,"oldContent":"            System.out.println(\"Invalid input. Please enter a valid number.\");"},{"type":"DELETE","lineNumber":322,"oldContent":"        } catch (Exception e) {"},{"type":"DELETE","lineNumber":325,"oldContent":"            System.out.println(\"An error occurred: \" + e.getMessage());"},{"type":"DELETE","lineNumber":327,"oldContent":"        }"},{"type":"INSERT","lineNumber":284,"content":""},{"type":"INSERT","lineNumber":285,"content":"            subscriptionService.changePlan(selectedSub.getId(), newPlan.getId());"},{"type":"INSERT","lineNumber":286,"content":""},{"type":"INSERT","lineNumber":287,"content":"            System.out.println(\"Plan changed successfully.\");"},{"type":"INSERT","lineNumber":288,"content":"        } catch (NumberFormatException e) {"},{"type":"INSERT","lineNumber":289,"content":"            System.out.println(\"Invalid input. Please enter a valid number.\");"},{"type":"INSERT","lineNumber":290,"content":"        } catch (Exception e) {"},{"type":"INSERT","lineNumber":291,"content":"            System.out.println(\"An error occurred: \" + e.getMessage());"},{"type":"INSERT","lineNumber":292,"content":"        }"},{"type":"INSERT","lineNumber":295,"content":"    private void viewUsageHistory(User user) {"},{"type":"INSERT","lineNumber":296,"content":"        try {"},{"type":"INSERT","lineNumber":297,"content":"            System.out.println(\"\\n--- View Usage History ---\");"},{"type":"DELETE","lineNumber":333,"oldContent":"            subscriptionService.changePlan(selectedSub.getId(), newPlan.getId());"},{"type":"INSERT","lineNumber":299,"content":"            List<Subscription> subscriptions = subscriptionService.getCustomerSubscriptions(user.getCustomerId());"},{"type":"INSERT","lineNumber":300,"content":"            if (subscriptions.isEmpty()) {"},{"type":"INSERT","lineNumber":301,"content":"                System.out.println(\"You have no subscriptions.\");"},{"type":"INSERT","lineNumber":302,"content":"                return;"},{"type":"INSERT","lineNumber":303,"content":"            }"},{"type":"INSERT","lineNumber":305,"content":"            System.out.println(\"Your Subscriptions:\");"},{"type":"INSERT","lineNumber":306,"content":"            for (int i = 0; i < subscriptions.size(); i++) {"},{"type":"INSERT","lineNumber":307,"content":"                System.out.printf(\"%d. %s (%s)%n\", i + 1, subscriptions.get(i).getId(),"},{"type":"INSERT","lineNumber":308,"content":"                        subscriptions.get(i).getPhoneNumber());"},{"type":"INSERT","lineNumber":309,"content":"            }"},{"type":"INSERT","lineNumber":310,"content":""},{"type":"INSERT","lineNumber":311,"content":"            System.out.print(\"Select a subscription to view usage history for: \");"},{"type":"INSERT","lineNumber":312,"content":"            int subChoice = Integer.parseInt(sc.nextLine());"},{"type":"INSERT","lineNumber":313,"content":"            if (subChoice < 1 || subChoice > subscriptions.size()) {"},{"type":"INSERT","lineNumber":314,"content":"                System.out.println(\"Invalid choice.\");"},{"type":"INSERT","lineNumber":315,"content":"                return;"},{"type":"INSERT","lineNumber":316,"content":"            }"},{"type":"INSERT","lineNumber":317,"content":"            Subscription selectedSub = subscriptions.get(subChoice - 1);"},{"type":"INSERT","lineNumber":318,"content":""},{"type":"INSERT","lineNumber":319,"content":"            List<UsageRecord> usageRecords = usageRecordRepo.findBySubscriptionId(selectedSub.getId());"},{"type":"INSERT","lineNumber":320,"content":""},{"type":"INSERT","lineNumber":321,"content":"            if (usageRecords.isEmpty()) {"},{"type":"INSERT","lineNumber":322,"content":"                System.out.println(\"No usage history found for this subscription.\");"},{"type":"INSERT","lineNumber":323,"content":"                return;"},{"type":"INSERT","lineNumber":324,"content":"            }"},{"type":"INSERT","lineNumber":325,"content":""},{"type":"INSERT","lineNumber":326,"content":"            System.out.println(\"\\n--- Usage History for \" + selectedSub.getId() + \" ---\");"},{"type":"INSERT","lineNumber":327,"content":"            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm:ss\");"},{"type":"INSERT","lineNumber":328,"content":""},{"type":"INSERT","lineNumber":329,"content":"            for (UsageRecord record : usageRecords) {"},{"type":"INSERT","lineNumber":330,"content":"                String formattedTime = record.getTimestamp().format(formatter);"},{"type":"INSERT","lineNumber":331,"content":""},{"type":"INSERT","lineNumber":332,"content":"                System.out.printf(\"Timestamp: %s, Data: %.2f MB, Voice: %d mins, SMS: %d%n\","},{"type":"INSERT","lineNumber":333,"content":"                        formattedTime, record.getData(), record.getVoiceMinutes(), record.getSmsCount());"},{"type":"INSERT","lineNumber":334,"content":"            }"},{"type":"INSERT","lineNumber":335,"content":""},{"type":"INSERT","lineNumber":336,"content":"        } catch (NumberFormatException e) {"},{"type":"INSERT","lineNumber":337,"content":"            System.out.println(\"Invalid input. Please enter a valid number.\");"},{"type":"INSERT","lineNumber":338,"content":"        } catch (Exception e) {"},{"type":"INSERT","lineNumber":339,"content":"            System.out.println(\"An error occurred: \" + e.getMessage());"},{"type":"INSERT","lineNumber":340,"content":"        }"},{"type":"INSERT","lineNumber":341,"content":"    }"},{"type":"INSERT","lineNumber":342,"content":""},{"type":"DELETE","lineNumber":346,"oldContent":"                return;"},{"type":"DELETE","lineNumber":349,"oldContent":"            }"}]}]},"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/repository/impl/InvoiceRepoImpl.java":{"filePath":"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/repository/impl/InvoiceRepoImpl.java","baseContent":"package com.telecom.repository.impl;\n\nimport com.telecom.models.Invoice;\nimport com.telecom.repository.interfaces.InvoiceRepo;\n\nimport java.util.*;\nimport java.util.stream.Collectors;\n\npublic class InvoiceRepoImpl implements InvoiceRepo {\n\n    private final Map<String, Invoice> db = new HashMap<>();\n\n    @Override\n    public Invoice save(Invoice invoice) {\n        if (invoice.getId() == null) {\n            invoice.setId(UUID.randomUUID().toString()); // Generate an ID if one doesn't exist\n        }\n        db.put(invoice.getId(), invoice);\n        return invoice;\n    }\n\n    @Override\n    public Optional<Invoice> findById(String id) {\n        return Optional.ofNullable(db.get(id));\n    }\n\n    @Override\n    public List<Invoice> findAll() {\n        return new ArrayList<>(db.values());\n    }\n\n    @Override\n    public List<Invoice> findBySubscriptionId(String subscriptionId) {\n        return db.values().stream()\n                .filter(invoice -> subscriptionId.equals(invoice.getSubscriptionId()))\n                .collect(Collectors.toList());\n    }\n\n    @Override\n    public void delete(String id) {\n        db.remove(id);\n    }\n\n    @Override\n    public Invoice update(Invoice invoice) {\n        db.put(invoice.getId(), invoice);\n        return invoice;\n    }\n}","baseTimestamp":1756661151729,"deltas":[{"timestamp":1756707312290,"changes":[{"type":"MODIFY","lineNumber":15,"content":"            invoice.setId(\"I\"+UUID.randomUUID().toString().substring(0,3)); // Generate an ID if one doesn't exist","oldContent":"            invoice.setId(UUID.randomUUID().toString()); // Generate an ID if one doesn't exist"}]}]},"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/presentation/AdminController.java":{"filePath":"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/presentation/AdminController.java","baseContent":"package com.telecom.presentation;\n\nimport com.telecom.models.Customer;\nimport com.telecom.models.Plan;\nimport com.telecom.models.Subscription;\nimport com.telecom.models.User;\nimport com.telecom.models.enums.Role;\nimport com.telecom.service.interfaces.CustomerService;\nimport com.telecom.service.interfaces.PlanService;\nimport com.telecom.service.interfaces.SubscriptionService;\nimport com.telecom.service.interfaces.UserService;\nimport lombok.RequiredArgsConstructor;\n\nimport java.time.LocalDate;\nimport java.util.List;\nimport java.util.Scanner;\n\n/**\n * Console viewer for all Administrator-specific operations.\n */\n@RequiredArgsConstructor\npublic class AdminController {\n    private final Scanner sc;\n    private final PlanService planService;\n    private final CustomerService customerService;\n    private final UserService userService;\n    private final SubscriptionService subscriptionService;\n    private final PlanController planController;\n    private final AnalyticsController analyticsController;\n\n    /**\n     * Main menu for Admin users.\n     */\n    public void showAdminMenu() {\n        while (true) {\n            try {\n                System.out.println(\"\\n--- Admin Menu ---\");\n                System.out.println(\"1. Manage Plans\");\n                System.out.println(\"2. Create New Customer\");\n                System.out.println(\"3. View All Customers\");\n                System.out.println(\"4. View Customer Details\");\n                System.out.println(\"5. View Analytics\");\n                System.out.println(\"0. Logout\");\n                System.out.print(\"Select an option: \");\n                int choice = Integer.parseInt(sc.nextLine());\n\n                switch (choice) {\n                    case 1: managePlans(); break;\n                    case 2: createNewCustomer(); break;\n                    case 3: viewAllCustomers(); break;\n                    case 4: viewCustomerDetails(); break;\n                    case 5: analyticsController.showAnalyticsMenu(); break;\n                    case 0: return;\n                    default: System.out.println(\"Invalid option. Please try again.\");\n                }\n            } catch (NumberFormatException e) {\n                System.out.println(\"Invalid input. Please enter a number.\");\n            } catch (Exception e) {\n                System.out.println(\"An error occurred: \" + e.getMessage());\n            }\n        }\n    }\n\n    private void viewCustomerDetails() {\n        System.out.println(\"\\n--- View Customer Details ---\");\n        System.out.print(\"Enter customer ID: \");\n        String customerId = sc.nextLine();\n\n        Customer customer = customerService.getCustomer(customerId);\n        if (customer == null) {\n            System.out.println(\"Customer not found.\");\n            return;\n        }\n\n        System.out.println(\"Customer Details:\");\n        System.out.printf(\"  ID: %s%n\", customer.getId());\n        System.out.printf(\"  Name: %s%n\", customer.getName());\n        System.out.printf(\"  Email: %s%n\", customer.getEmail());\n\n        List<Subscription> subscriptions = subscriptionService.getCustomerSubscriptions(customerId);\n        if (subscriptions.isEmpty()) {\n            System.out.println(\"  No subscriptions found for this customer.\");\n        } else {\n            System.out.println(\"  Subscriptions:\");\n            for (Subscription sub : subscriptions) {\n                Plan plan = planService.getPlan(sub.getPlanId());\n                System.out.printf(\"    - Subscription ID: %s%n\", sub.getId());\n                System.out.printf(\"      Phone Number: %s%n\", sub.getPhoneNumber());\n                System.out.printf(\"      Plan: %s (%.2f/month)%n\", plan.getName(), plan.getMonthlyRental());\n                System.out.printf(\"      Start Date: %s%n\", sub.getStartDate());\n            }\n        }\n    }\n\n    private void viewAllCustomers() {\n        System.out.println(\"\\n--- All Customers ---\");\n        List<Customer> customers = customerService.getAllCustomers();\n        for (Customer customer : customers) {\n            System.out.printf(\"ID: %s, Name: %s, Email: %s%n\",\n                    customer.getId(), customer.getName(), customer.getEmail());\n        }\n    }\n\n    /**\n     * Menu for managing plans (Add, View, Update, Delete).\n     */\n    private void managePlans() {\n        while (true) {\n            try {\n                System.out.println(\"\\n--- Plan Management ---\");\n                System.out.println(\"1. View All Plans\");\n                System.out.println(\"2. Add New Plan\");\n                System.out.println(\"3. Update Plan\");\n                System.out.println(\"4. Delete Plan\");\n                System.out.println(\"0. Back to Admin Menu\");\n                System.out.print(\"Select an option: \");\n                int choice = Integer.parseInt(sc.nextLine());\n\n                switch (choice) {\n                    case 1: planController.showAllPlans(); break;\n                    case 2: planController.addNewPlan(); break;\n                    case 3: planController.updateExistingPlan(); break;\n                    case 4: planController.deleteExistingPlan(); break;\n                    case 0: return;\n                    default: System.out.println(\"Invalid option. Please try again.\");\n                }\n            } catch (NumberFormatException e) {\n                System.out.println(\"Invalid input. Please enter a number.\");\n            } catch (Exception e) {\n                System.out.println(\"An error occurred: \" + e.getMessage());\n            }\n        }\n    }\n\n    /**\n     * CLI to create a new customer and a corresponding user account.\n     */\n    private void createNewCustomer() {\n        try {\n            System.out.println(\"\\n--- Create New Customer ---\");\n            System.out.print(\"Enter Customer ID: \");\n            String customerId = sc.nextLine();\n            System.out.print(\"Enter Customer Name: \");\n            String name = sc.nextLine();\n            System.out.print(\"Enter Customer Email: \");\n            String email = sc.nextLine();\n            System.out.print(\"Enter Customer Referrer: \");\n            String referrer = sc.nextLine();\n\n            Customer newCustomer = new Customer(customerId, name, email, referrer.isEmpty() ? null : referrer, false);\n            customerService.addCustomer(newCustomer);\n\n            // Auto-generate a user account for the new customer\n            String username = name.toLowerCase().replaceAll(\"\\\\s\", \"\") + \"_user\";\n            String password = \"password123\"; // Default password\n            User newUser = User.builder()\n                    .username(username)\n                    .password(password)\n                    .role(Role.CUSTOMER)\n                    .customerId(customerId)\n                    .build();\n            userService.createUser(newUser);\n\n            System.out.println(\"Customer created successfully!\");\n            System.out.println(\"--- New User Credentials ---\");\n            System.out.printf(\"  Username: %s%n\", username);\n            System.out.printf(\"  Password: %s%n\", password);\n            System.out.println(\"--------------------------\");\n\n            // Assign a plan to the new customer\n            while (true) {\n                try {\n                    System.out.println(\"\\n--- Assign a Plan to the New Customer ---\");\n                    planController.showAllPlans();\n                    System.out.print(\"Enter the ID of the plan to assign: \");\n                    String planId = sc.nextLine();\n                    System.out.print(\"Enter phone number for the subscription: \");\n                    String phoneNumber = sc.nextLine();\n\n                    Subscription newSubscription = Subscription.builder()\n                            .id(\"S\" + (int) (Math.random() * 1000))\n                            .customerId(customerId)\n                            .phoneNumber(phoneNumber)\n                            .planId(planId)\n                            .startDate(LocalDate.now())\n                            .build();\n                    subscriptionService.addSubscription(newSubscription);\n\n                    System.out.println(\"Subscription added successfully!\");\n                    break; // Exit the loop if successful\n                } catch (Exception e) {\n                    System.out.println(\"An error occurred while assigning the plan: \" + e.getMessage());\n                    System.out.println(\"Please try again.\");\n                }\n            }\n        } catch (Exception e) {\n            System.out.println(\"An error occurred while creating the customer: \" + e.getMessage());\n        }\n    }\n}\n","baseTimestamp":1756666016980,"deltas":[{"timestamp":1756707312290,"changes":[{"type":"INSERT","lineNumber":2,"content":"import com.telecom.exceptions.InvalidChoiceException;"},{"type":"INSERT","lineNumber":16,"content":"import java.util.Objects;"},{"type":"INSERT","lineNumber":44,"content":"                System.out.println(\"6. Complete The MNP\");"},{"type":"DELETE","lineNumber":47,"oldContent":"                    case 1: managePlans(); break;"},{"type":"DELETE","lineNumber":48,"oldContent":"                    case 2: createNewCustomer(); break;"},{"type":"DELETE","lineNumber":49,"oldContent":"                    case 3: viewAllCustomers(); break;"},{"type":"DELETE","lineNumber":50,"oldContent":"                    case 4: viewCustomerDetails(); break;"},{"type":"DELETE","lineNumber":51,"oldContent":"                    case 5: analyticsController.showAnalyticsMenu(); break;"},{"type":"DELETE","lineNumber":52,"oldContent":"                    case 0: return;"},{"type":"DELETE","lineNumber":53,"oldContent":"                    default: System.out.println(\"Invalid option. Please try again.\");"},{"type":"INSERT","lineNumber":50,"content":"                    case 1:"},{"type":"INSERT","lineNumber":51,"content":"                        managePlans();"},{"type":"INSERT","lineNumber":52,"content":"                        break;"},{"type":"INSERT","lineNumber":53,"content":"                    case 2:"},{"type":"INSERT","lineNumber":54,"content":"                        createNewCustomer();"},{"type":"INSERT","lineNumber":55,"content":"                        break;"},{"type":"INSERT","lineNumber":56,"content":"                    case 3:"},{"type":"INSERT","lineNumber":57,"content":"                        viewAllCustomers();"},{"type":"INSERT","lineNumber":58,"content":"                        break;"},{"type":"INSERT","lineNumber":59,"content":"                    case 4:"},{"type":"INSERT","lineNumber":60,"content":"                        viewCustomerDetails();"},{"type":"INSERT","lineNumber":61,"content":"                        break;"},{"type":"INSERT","lineNumber":62,"content":"                    case 5:"},{"type":"INSERT","lineNumber":63,"content":"                        analyticsController.showAnalyticsMenu();"},{"type":"INSERT","lineNumber":64,"content":"                        break;"},{"type":"INSERT","lineNumber":65,"content":"                    case 6:"},{"type":"INSERT","lineNumber":66,"content":"                        checkMNPRequest();"},{"type":"INSERT","lineNumber":67,"content":"                        break;"},{"type":"INSERT","lineNumber":68,"content":"                    case 0:"},{"type":"INSERT","lineNumber":69,"content":"                        return;"},{"type":"INSERT","lineNumber":70,"content":"                    default:"},{"type":"INSERT","lineNumber":71,"content":"                        System.out.println(\"Invalid option. Please try again.\");"},{"type":"INSERT","lineNumber":81,"content":"    private void checkMNPRequest() {"},{"type":"INSERT","lineNumber":82,"content":"        System.out.println(\"\\n --- Subscriptions with MNP ---\");"},{"type":"INSERT","lineNumber":83,"content":"        List<Subscription> subscriptionsWithMNP = subscriptionService.getSubscriptionWithMNP();"},{"type":"INSERT","lineNumber":84,"content":"        for (Subscription sub : subscriptionsWithMNP) {"},{"type":"INSERT","lineNumber":85,"content":"            Plan plan = planService.getPlan(sub.getPlanId());"},{"type":"INSERT","lineNumber":86,"content":"            System.out.printf(\"    - Subscription ID: %s%n\", sub.getId());"},{"type":"INSERT","lineNumber":87,"content":"            System.out.printf(\"      Phone Number: %s%n\", sub.getPhoneNumber());"},{"type":"INSERT","lineNumber":88,"content":"            System.out.printf(\"      Plan: %s (%.2f/month)%n\", plan.getName(), plan.getMonthlyRental());"},{"type":"INSERT","lineNumber":89,"content":"            System.out.printf(\"      Start Date: %s%n\", sub.getStartDate());"},{"type":"INSERT","lineNumber":90,"content":"            System.out.printf(\"      Customer Id: %s\\n\", sub.getCustomerId());"},{"type":"INSERT","lineNumber":91,"content":"        }"},{"type":"INSERT","lineNumber":92,"content":"        System.out.print(\"Select the Subscription: \");"},{"type":"INSERT","lineNumber":93,"content":"        String subscriptionId = sc.nextLine();"},{"type":"INSERT","lineNumber":94,"content":"        if (subscriptionsWithMNP.stream().noneMatch(s -> Objects.equals(s.getId(), subscriptionId))) {"},{"type":"INSERT","lineNumber":95,"content":"            throw new InvalidChoiceException(\"Subscription with selected Id Not Found\");"},{"type":"INSERT","lineNumber":96,"content":"        }"},{"type":"INSERT","lineNumber":97,"content":"        System.out.print(\"\\nDo you want to Complete this request or Cancel this request: (T/F)\");"},{"type":"INSERT","lineNumber":98,"content":"        String choice = sc.nextLine();"},{"type":"INSERT","lineNumber":99,"content":""},{"type":"INSERT","lineNumber":100,"content":"        if (choice.equals(\"T\")) {"},{"type":"INSERT","lineNumber":101,"content":"            subscriptionService.completeMNP(subscriptionId);"},{"type":"INSERT","lineNumber":102,"content":"            System.out.println(\"Subscription MNP request Completed\");"},{"type":"INSERT","lineNumber":103,"content":"        } else if (choice.equals(\"F\")) {"},{"type":"INSERT","lineNumber":104,"content":"            subscriptionService.cancelMNP(subscriptionId);"},{"type":"INSERT","lineNumber":105,"content":"            System.out.println(\"Subscription MNP request Cancelled\");"},{"type":"INSERT","lineNumber":106,"content":""},{"type":"INSERT","lineNumber":107,"content":"        } else {"},{"type":"INSERT","lineNumber":108,"content":"            throw new InvalidChoiceException(\"Invalid Choice\");"},{"type":"INSERT","lineNumber":109,"content":""},{"type":"INSERT","lineNumber":110,"content":"        }"},{"type":"INSERT","lineNumber":111,"content":""},{"type":"INSERT","lineNumber":112,"content":""},{"type":"INSERT","lineNumber":113,"content":"    }"},{"type":"INSERT","lineNumber":114,"content":""},{"type":"DELETE","lineNumber":119,"oldContent":"                    case 1: planController.showAllPlans(); break;"},{"type":"DELETE","lineNumber":120,"oldContent":"                    case 2: planController.addNewPlan(); break;"},{"type":"DELETE","lineNumber":121,"oldContent":"                    case 3: planController.updateExistingPlan(); break;"},{"type":"DELETE","lineNumber":122,"oldContent":"                    case 4: planController.deleteExistingPlan(); break;"},{"type":"DELETE","lineNumber":123,"oldContent":"                    case 0: return;"},{"type":"DELETE","lineNumber":124,"oldContent":"                    default: System.out.println(\"Invalid option. Please try again.\");"},{"type":"INSERT","lineNumber":171,"content":"                    case 1:"},{"type":"INSERT","lineNumber":172,"content":"                        planController.showAllPlans();"},{"type":"INSERT","lineNumber":173,"content":"                        break;"},{"type":"INSERT","lineNumber":174,"content":"                    case 2:"},{"type":"INSERT","lineNumber":175,"content":"                        planController.addNewPlan();"},{"type":"INSERT","lineNumber":176,"content":"                        break;"},{"type":"INSERT","lineNumber":177,"content":"                    case 3:"},{"type":"INSERT","lineNumber":178,"content":"                        planController.updateExistingPlan();"},{"type":"INSERT","lineNumber":179,"content":"                        break;"},{"type":"INSERT","lineNumber":180,"content":"                    case 4:"},{"type":"INSERT","lineNumber":181,"content":"                        planController.deleteExistingPlan();"},{"type":"INSERT","lineNumber":182,"content":"                        break;"},{"type":"INSERT","lineNumber":183,"content":"                    case 0:"},{"type":"INSERT","lineNumber":184,"content":"                        return;"},{"type":"INSERT","lineNumber":185,"content":"                    default:"},{"type":"INSERT","lineNumber":186,"content":"                        System.out.println(\"Invalid option. Please try again.\");"},{"type":"DELETE","lineNumber":127,"oldContent":"                System.out.println(\"Invalid input. Please enter a number.\");"},{"type":"INSERT","lineNumber":189,"content":"                throw new InvalidChoiceException(\"Invalid input. Please enter a valid number.\");"},{"type":"DELETE","lineNumber":129,"oldContent":"                System.out.println(\"An error occurred: \" + e.getMessage());"},{"type":"INSERT","lineNumber":191,"content":"                System.err.println(\"An error occurred: \" + e.getMessage());"},{"type":"DELETE","lineNumber":191,"oldContent":"                    System.out.println(\"An error occurred while assigning the plan: \" + e.getMessage());"},{"type":"INSERT","lineNumber":253,"content":"                    System.err.println(\"An error occurred while assigning the plan: \" + e.getMessage());"}]},{"timestamp":1756710368358,"changes":[{"type":"MODIFY","lineNumber":17,"content":"import java.util.Scanner;","oldContent":"import java.util.Scanner;"},{"type":"INSERT","lineNumber":18,"content":"import java.util.UUID;"},{"type":"INSERT","lineNumber":45,"content":"                System.out.println(\"6. Complete The MNP\");"},{"type":"DELETE","lineNumber":46,"oldContent":"                System.out.println(\"6. Complete The MNP\");"},{"type":"DELETE","lineNumber":55,"oldContent":"                }"},{"type":"DELETE","lineNumber":57,"oldContent":"            } catch (NumberFormatException e) {"},{"type":"DELETE","lineNumber":59,"oldContent":"                System.out.println(\"Invalid input. Please enter a number.\");"},{"type":"DELETE","lineNumber":61,"oldContent":"            } catch (Exception e) {"},{"type":"DELETE","lineNumber":63,"oldContent":"                System.out.println(\"An error occurred: \" + e.getMessage());"},{"type":"DELETE","lineNumber":65,"oldContent":"            }"},{"type":"DELETE","lineNumber":67,"oldContent":"        }"},{"type":"DELETE","lineNumber":69,"oldContent":"    }"},{"type":"DELETE","lineNumber":71,"oldContent":""},{"type":"DELETE","lineNumber":73,"oldContent":"    private void viewCustomerDetails() {"},{"type":"DELETE","lineNumber":75,"oldContent":"        System.out.println(\"\\n--- View Customer Details ---\");"},{"type":"DELETE","lineNumber":77,"oldContent":"        System.out.print(\"Enter customer ID: \");"},{"type":"DELETE","lineNumber":79,"oldContent":"        String customerId = sc.nextLine();"},{"type":"DELETE","lineNumber":81,"oldContent":""},{"type":"DELETE","lineNumber":83,"oldContent":"        Customer customer = customerService.getCustomer(customerId);"},{"type":"DELETE","lineNumber":85,"oldContent":"        if (customer == null) {"},{"type":"DELETE","lineNumber":87,"oldContent":"            System.out.println(\"Customer not found.\");"},{"type":"INSERT","lineNumber":73,"content":"                }"},{"type":"INSERT","lineNumber":74,"content":"            } catch (NumberFormatException e) {"},{"type":"INSERT","lineNumber":75,"content":"                System.out.println(\"Invalid input. Please enter a number.\");"},{"type":"INSERT","lineNumber":76,"content":"            } catch (Exception e) {"},{"type":"INSERT","lineNumber":77,"content":"                System.out.println(\"An error occurred: \" + e.getMessage());"},{"type":"INSERT","lineNumber":78,"content":"            }"},{"type":"INSERT","lineNumber":79,"content":"        }"},{"type":"INSERT","lineNumber":80,"content":"    }"},{"type":"INSERT","lineNumber":81,"content":""},{"type":"INSERT","lineNumber":82,"content":"    private void checkMNPRequest() {"},{"type":"INSERT","lineNumber":83,"content":"        System.out.println(\"\\n --- Subscriptions with MNP ---\");"},{"type":"INSERT","lineNumber":84,"content":"        List<Subscription> subscriptionsWithMNP = subscriptionService.getSubscriptionWithMNP();"},{"type":"INSERT","lineNumber":85,"content":"        for (Subscription sub : subscriptionsWithMNP) {"},{"type":"INSERT","lineNumber":86,"content":"            Plan plan = planService.getPlan(sub.getPlanId());"},{"type":"INSERT","lineNumber":87,"content":"            System.out.printf(\"    - Subscription ID: %s%n\", sub.getId());"},{"type":"INSERT","lineNumber":88,"content":"            System.out.printf(\"      Phone Number: %s%n\", sub.getPhoneNumber());"},{"type":"INSERT","lineNumber":89,"content":"            System.out.printf(\"      Plan: %s (%.2f/month)%n\", plan.getName(), plan.getMonthlyRental());"},{"type":"INSERT","lineNumber":90,"content":"            System.out.printf(\"      Start Date: %s%n\", sub.getStartDate());"},{"type":"INSERT","lineNumber":91,"content":"            System.out.printf(\"      Customer Id: %s\\n\", sub.getCustomerId());"},{"type":"INSERT","lineNumber":92,"content":"        }"},{"type":"INSERT","lineNumber":93,"content":"        System.out.print(\"Select the Subscription: \");"},{"type":"INSERT","lineNumber":94,"content":"        String subscriptionId = sc.nextLine();"},{"type":"INSERT","lineNumber":95,"content":"        if (subscriptionsWithMNP.stream().noneMatch(s -> Objects.equals(s.getId(), subscriptionId))) {"},{"type":"INSERT","lineNumber":96,"content":"            throw new InvalidChoiceException(\"Subscription with selected Id Not Found\");"},{"type":"INSERT","lineNumber":97,"content":"        }"},{"type":"INSERT","lineNumber":98,"content":"        System.out.print(\"\\nDo you want to Complete this request or Cancel this request: (T/F)\");"},{"type":"INSERT","lineNumber":99,"content":"        String choice = sc.nextLine();"},{"type":"INSERT","lineNumber":100,"content":""},{"type":"INSERT","lineNumber":101,"content":"        if (choice.equals(\"T\")) {"},{"type":"INSERT","lineNumber":102,"content":"            subscriptionService.completeMNP(subscriptionId);"},{"type":"INSERT","lineNumber":103,"content":"            System.out.println(\"Subscription MNP request Completed\");"},{"type":"INSERT","lineNumber":104,"content":"        } else if (choice.equals(\"F\")) {"},{"type":"INSERT","lineNumber":105,"content":"            subscriptionService.cancelMNP(subscriptionId);"},{"type":"INSERT","lineNumber":106,"content":"            System.out.println(\"Subscription MNP request Cancelled\");"},{"type":"INSERT","lineNumber":107,"content":""},{"type":"INSERT","lineNumber":108,"content":"        } else {"},{"type":"INSERT","lineNumber":109,"content":"            throw new InvalidChoiceException(\"Invalid Choice\");"},{"type":"INSERT","lineNumber":110,"content":""},{"type":"INSERT","lineNumber":111,"content":"        }"},{"type":"INSERT","lineNumber":112,"content":""},{"type":"INSERT","lineNumber":113,"content":""},{"type":"INSERT","lineNumber":114,"content":"    }"},{"type":"INSERT","lineNumber":115,"content":""},{"type":"INSERT","lineNumber":116,"content":"    private void viewCustomerDetails() {"},{"type":"INSERT","lineNumber":117,"content":"        System.out.println(\"\\n--- View Customer Details ---\");"},{"type":"INSERT","lineNumber":118,"content":"        System.out.print(\"Enter customer ID: \");"},{"type":"INSERT","lineNumber":119,"content":"        String customerId = sc.nextLine();"},{"type":"INSERT","lineNumber":120,"content":""},{"type":"INSERT","lineNumber":121,"content":"        Customer customer = customerService.getCustomer(customerId);"},{"type":"INSERT","lineNumber":122,"content":"        if (customer == null) {"},{"type":"INSERT","lineNumber":123,"content":"            System.out.println(\"Customer not found.\");"},{"type":"DELETE","lineNumber":99,"oldContent":"    private void checkMNPRequest() {"},{"type":"DELETE","lineNumber":101,"oldContent":"        System.out.println(\"\\n --- Subscriptions with MNP ---\");"},{"type":"DELETE","lineNumber":103,"oldContent":"        List<Subscription> subscriptionsWithMNP = subscriptionService.getSubscriptionWithMNP();"},{"type":"DELETE","lineNumber":105,"oldContent":"        for (Subscription sub : subscriptionsWithMNP) {"},{"type":"DELETE","lineNumber":107,"oldContent":"            Plan plan = planService.getPlan(sub.getPlanId());"},{"type":"DELETE","lineNumber":109,"oldContent":"            System.out.printf(\"    - Subscription ID: %s%n\", sub.getId());"},{"type":"DELETE","lineNumber":111,"oldContent":"            System.out.printf(\"      Phone Number: %s%n\", sub.getPhoneNumber());"},{"type":"DELETE","lineNumber":113,"oldContent":"            System.out.printf(\"      Plan: %s (%.2f/month)%n\", plan.getName(), plan.getMonthlyRental());"},{"type":"DELETE","lineNumber":115,"oldContent":"            System.out.printf(\"      Start Date: %s%n\", sub.getStartDate());"},{"type":"DELETE","lineNumber":117,"oldContent":"            System.out.printf(\"      Customer Id: %s\\n\", sub.getCustomerId());"},{"type":"DELETE","lineNumber":120,"oldContent":"        }"},{"type":"DELETE","lineNumber":121,"oldContent":"        System.out.print(\"Select the Subscription: \");"},{"type":"DELETE","lineNumber":123,"oldContent":"        String subscriptionId = sc.nextLine();"},{"type":"DELETE","lineNumber":125,"oldContent":"        if (subscriptionsWithMNP.stream().noneMatch(s -> Objects.equals(s.getId(), subscriptionId))) {"},{"type":"DELETE","lineNumber":127,"oldContent":"            throw new InvalidChoiceException(\"Subscription with selected Id Not Found\");"},{"type":"DELETE","lineNumber":129,"oldContent":"        }"},{"type":"DELETE","lineNumber":131,"oldContent":"        System.out.print(\"\\nDo you want to Complete this request or Cancel this request: (T/F)\");"},{"type":"DELETE","lineNumber":133,"oldContent":"        String choice = sc.nextLine();"},{"type":"DELETE","lineNumber":135,"oldContent":""},{"type":"DELETE","lineNumber":137,"oldContent":"        if (choice.equals(\"T\")) {"},{"type":"DELETE","lineNumber":139,"oldContent":"            subscriptionService.completeMNP(subscriptionId);"},{"type":"DELETE","lineNumber":141,"oldContent":"            System.out.println(\"Subscription MNP request Completed\");"},{"type":"DELETE","lineNumber":143,"oldContent":"        } else if (choice.equals(\"F\")) {"},{"type":"DELETE","lineNumber":145,"oldContent":"            subscriptionService.cancelMNP(subscriptionId);"},{"type":"DELETE","lineNumber":147,"oldContent":"            System.out.println(\"Subscription MNP request Cancelled\");"},{"type":"DELETE","lineNumber":149,"oldContent":""},{"type":"DELETE","lineNumber":151,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":153,"oldContent":"            throw new InvalidChoiceException(\"Invalid Choice\");"},{"type":"DELETE","lineNumber":155,"oldContent":""},{"type":"DELETE","lineNumber":157,"oldContent":"        }"},{"type":"DELETE","lineNumber":159,"oldContent":""},{"type":"DELETE","lineNumber":161,"oldContent":""},{"type":"DELETE","lineNumber":163,"oldContent":"    }"},{"type":"DELETE","lineNumber":165,"oldContent":""},{"type":"INSERT","lineNumber":172,"content":"                    case 1:"},{"type":"INSERT","lineNumber":173,"content":"                        planController.showAllPlans();"},{"type":"INSERT","lineNumber":174,"content":"                        break;"},{"type":"INSERT","lineNumber":175,"content":"                    case 2:"},{"type":"INSERT","lineNumber":176,"content":"                        planController.addNewPlan();"},{"type":"INSERT","lineNumber":177,"content":"                        break;"},{"type":"INSERT","lineNumber":178,"content":"                    case 3:"},{"type":"INSERT","lineNumber":179,"content":"                        planController.updateExistingPlan();"},{"type":"INSERT","lineNumber":180,"content":"                        break;"},{"type":"INSERT","lineNumber":181,"content":"                    case 4:"},{"type":"INSERT","lineNumber":182,"content":"                        planController.deleteExistingPlan();"},{"type":"INSERT","lineNumber":183,"content":"                        break;"},{"type":"INSERT","lineNumber":184,"content":"                    case 0:"},{"type":"INSERT","lineNumber":185,"content":"                        return;"},{"type":"INSERT","lineNumber":186,"content":"                    default:"},{"type":"INSERT","lineNumber":187,"content":"                        System.out.println(\"Invalid option. Please try again.\");"},{"type":"INSERT","lineNumber":190,"content":"                throw new InvalidChoiceException(\"Invalid input. Please enter a valid number.\");"},{"type":"INSERT","lineNumber":192,"content":"                System.err.println(\"An error occurred: \" + e.getMessage());"},{"type":"DELETE","lineNumber":184,"oldContent":"            System.out.print(\"Enter Customer ID: \");"},{"type":"DELETE","lineNumber":185,"oldContent":"            String customerId = sc.nextLine();"},{"type":"INSERT","lineNumber":203,"content":""},{"type":"INSERT","lineNumber":204,"content":"            String customerId = \"I\"+UUID.randomUUID().toString().substring(0,3);"},{"type":"DELETE","lineNumber":215,"oldContent":"                    case 1:"},{"type":"DELETE","lineNumber":217,"oldContent":"                        planController.showAllPlans();"},{"type":"DELETE","lineNumber":219,"oldContent":"                        break;"},{"type":"DELETE","lineNumber":221,"oldContent":"                    case 2:"},{"type":"DELETE","lineNumber":223,"oldContent":"                        planController.addNewPlan();"},{"type":"DELETE","lineNumber":225,"oldContent":"                        break;"},{"type":"DELETE","lineNumber":227,"oldContent":"                    case 3:"},{"type":"DELETE","lineNumber":229,"oldContent":"                        planController.updateExistingPlan();"},{"type":"DELETE","lineNumber":231,"oldContent":"                        break;"},{"type":"DELETE","lineNumber":233,"oldContent":"                    case 4:"},{"type":"DELETE","lineNumber":235,"oldContent":"                        planController.deleteExistingPlan();"},{"type":"DELETE","lineNumber":237,"oldContent":"                        break;"},{"type":"DELETE","lineNumber":239,"oldContent":"                    case 0:"},{"type":"DELETE","lineNumber":241,"oldContent":"                        return;"},{"type":"DELETE","lineNumber":243,"oldContent":"                    default:"},{"type":"DELETE","lineNumber":245,"oldContent":"                        System.out.println(\"Invalid option. Please try again.\");"},{"type":"DELETE","lineNumber":249,"oldContent":"                throw new InvalidChoiceException(\"Invalid input. Please enter a valid number.\");"},{"type":"DELETE","lineNumber":252,"oldContent":"                System.err.println(\"An error occurred: \" + e.getMessage());"},{"type":"INSERT","lineNumber":254,"content":"                    System.err.println(\"An error occurred while assigning the plan: \" + e.getMessage());"},{"type":"DELETE","lineNumber":262,"oldContent":"                    System.err.println(\"An error occurred while assigning the plan: \" + e.getMessage());"}]}]},"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/service/interfaces/FamilyService.java":{"filePath":"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/service/interfaces/FamilyService.java","baseContent":"package com.telecom.service.interfaces;\n\nimport com.telecom.models.Family;\n\npublic interface FamilyService {\n    Family addFamilyMember(String familyId, String customerId);\n\n    Family getFamilyById(String familyId);  \n}\n","baseTimestamp":1756666016964},"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/presentation/AnalyticsController.java":{"filePath":"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/presentation/AnalyticsController.java","baseContent":"package com.telecom.presentation;\n\nimport com.telecom.models.Customer;\nimport com.telecom.models.Invoice;\nimport com.telecom.models.Plan;\nimport com.telecom.models.UsageRecord;\nimport com.telecom.repository.interfaces.InvoiceRepo;\nimport com.telecom.repository.interfaces.PlanRepo;\nimport com.telecom.repository.interfaces.UsageRecordRepo;\nimport com.telecom.service.interfaces.AnalyticsService;\nimport lombok.RequiredArgsConstructor;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Scanner;\n\n/**\n * Console viewer for all analytics and reporting operations.\n */\n@RequiredArgsConstructor\npublic class AnalyticsController {\n    private final Scanner sc;\n    private final AnalyticsService analyticsService;\n    private final UsageRecordRepo usageRecordRepo;\n    private final InvoiceRepo invoiceRepo;\n    private final PlanRepo planRepo;\n\n    /**\n     * Shows the main menu for analytics reports.\n     */\n    public void showAnalyticsMenu() {\n        while (true) {\n            System.out.println(\"\\n--- Analytics & Reports ---\");\n            System.out.println(\"1. Top N Data Users\");\n            System.out.println(\"2. Average Revenue Per User (ARPU) by Plan\");\n            System.out.println(\"3. Overage Charge Distribution\");\n            System.out.println(\"4. Credit Risk Detection\");\n            System.out.println(\"5. Plan Recommendation\");\n            System.out.println(\"0. Back to Main Menu\");\n            System.out.print(\"Select an option: \");\n            int choice = Integer.parseInt(sc.nextLine());\n\n            switch (choice) {\n                case 1: displayTopNDataUsers(); break;\n                case 2: displayArpuByPlan(); break;\n                case 3: displayOverageDistribution(); break;\n                case 4: displayCreditRisk(); break;\n                case 5: displayPlanRecommendation(); break;\n                case 0: return;\n                default: System.out.println(\"Invalid option. Please try again.\");\n            }\n        }\n    }\n\n    private void displayTopNDataUsers() {\n        System.out.print(\"Enter N: \");\n        int n = Integer.parseInt(sc.nextLine());\n        List<UsageRecord> usage = usageRecordRepo.findAll();\n        List<Customer> topUsers = analyticsService.topDataUsers(usage, n);\n        System.out.println(\"\\n--- Top \" + n + \" Data Users ---\");\n        topUsers.forEach(c -> System.out.printf(\"Customer ID: %s%n\", c.getId()));\n    }\n\n    private void displayArpuByPlan() {\n        List<Invoice> invoices = invoiceRepo.findAll();\n        Map<String, Double> arpu = analyticsService.arpuByPlan(invoices);\n        if (arpu.isEmpty()){\n            System.out.println(\"No Data found.\");\n        }\n        System.out.println(\"\\n--- Average Revenue Per User (ARPU) by Plan ---\");\n        arpu.forEach((planId, avg) -> System.out.printf(\"Plan ID %s: $%.2f%n\", planId, avg));\n    }\n\n    private void displayOverageDistribution() {\n        List<Invoice> invoices = invoiceRepo.findAll();\n        Map<String, Object> dist = analyticsService.overageDistribution(invoices);\n        System.out.println(\"\\n--- Overage Charge Distribution ---\");\n        System.out.printf(\"Total Invoices with Overage: %d%n\", dist.get(\"count\"));\n        System.out.printf(\"Total Overage Amount: $%.2f%n\", dist.get(\"total\"));\n        System.out.printf(\"Average Overage Amount: $%.2f%n\", dist.get(\"average\"));\n    }\n\n    private void displayCreditRisk() {\n        // This is a simplified example. A real implementation would need a Customer repository.\n        System.out.println(\"\\n--- Credit Risk Detection ---\");\n        System.out.println(\"NOTE: This is a simplified report.\");\n        List<Invoice> invoices = invoiceRepo.findAll();\n        // The service method expects a list of customers, which we don't have a repo for yet.\n        // We will pass an empty list for now.\n        List<Customer> riskyCustomers = analyticsService.detectCreditRisk(invoices, List.of());\n        if (riskyCustomers.isEmpty()) {\n            System.out.println(\"No customers with unpaid invoices found.\");\n        } else {\n            riskyCustomers.forEach(c -> System.out.printf(\"Customer ID %s is a potential credit risk.%n\", c.getId()));\n        }\n    }\n\n    private void displayPlanRecommendation() {\n        List<Invoice> invoices = invoiceRepo.findAll();\n        List<Plan> plans = planRepo.findAll();\n        Map<String, String> recommendations = analyticsService.recommendPlans(invoices, plans);\n        System.out.println(\"\\n--- Plan Upgrade Recommendations ---\");\n        if (recommendations.isEmpty()) {\n            System.out.println(\"No plan recommendations at this time.\");\n        } else {\n            recommendations.forEach((subId, planName) -> \n                System.out.printf(\"Subscription %s should consider upgrading to '%s' due to frequent overages.%n\", subId, planName));\n        }\n    }\n}\n","baseTimestamp":1756666017005},"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/service/impl/FamilyServiceImpl.java":{"filePath":"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/service/impl/FamilyServiceImpl.java","baseContent":"package com.telecom.service.impl;\n\nimport com.telecom.models.Family;\nimport com.telecom.repository.interfaces.FamilyRepo;\nimport com.telecom.service.interfaces.FamilyService;\nimport lombok.RequiredArgsConstructor;\n\nimport java.util.ArrayList;\n\n@RequiredArgsConstructor\npublic class FamilyServiceImpl implements FamilyService {\n    private final FamilyRepo familyRepo;\n\n    @Override\n    public Family addFamilyMember(String familyId, String customerId) {\n        Family family = familyRepo.findByFamilyId(familyId).orElse(new Family(familyId, new ArrayList<>()));\n        family.getCustomerIds().add(customerId);\n        return familyRepo.save(family);\n    }\n\n    @Override\n    public Family getFamilyById(String familyId) {\n            return familyRepo.findByFamilyId(familyId).orElse(null);\n        \n    }\n    \n}\n","baseTimestamp":1756666017020},"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/presentation/BillingController.java":{"filePath":"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/presentation/BillingController.java","baseContent":"package com.telecom.presentation;\n\nimport com.telecom.models.*;\nimport com.telecom.repository.interfaces.UsageRecordRepo;\nimport com.telecom.service.interfaces.BillingService;\nimport com.telecom.service.interfaces.PlanService;\nimport com.telecom.service.interfaces.SubscriptionService;\nimport lombok.RequiredArgsConstructor;\n\nimport java.util.List;\nimport java.util.Scanner;\n\n/**\n * Console viewer for all billing and invoice-related operations.\n */\n@RequiredArgsConstructor\npublic class BillingController {\n\n    private final BillingService billingService;\n    private final SubscriptionService subscriptionService;\n    private final PlanService planService;\n    private final UsageRecordRepo usageRecordRepo;\n\n    /**\n     * Main CLI menu for the billing cycle.\n     * \n     * @param user The currently authenticated user.\n     */\n    public void runBillingCycle(User user) {\n        System.out.println(\"\\n--- Run Monthly Billing Cycle ---\");\n\n\n        List<Subscription> subscriptions = subscriptionService.getCustomerSubscriptions(user.getCustomerId());\n        List<UsageRecord> allUsage = usageRecordRepo.findAll(); // Get all usage for the period\n\n        System.out.println(\"\\n--- Generated Invoices ---\");\n        for (Subscription sub : subscriptions) {\n            Plan plan = planService.getPlan(sub.getPlanId());\n            // Filter usage for this specific member\n            List<UsageRecord> memberUsage = allUsage.stream()\n                    .filter(u -> u.getSubscriptionId().equals(sub.getId()))\n                    .toList();\n\n            try {\n                Invoice invoice = billingService.generateInvoice(sub, plan, memberUsage, allUsage);\n                printInvoice(invoice);\n            } catch (Exception e) {\n                System.err.printf(\"Could not generate invoice for subscription %s: %s%n\", sub.getId(), e.getMessage());\n            }\n        }\n\n    }\n\n    /**\n     * Prints a formatted invoice to the console.\n     * \n     * @param invoice The invoice to print.\n     */\n    public void printInvoice(Invoice invoice) {\n        System.out.println(\"-----------------------------------\");\n        System.out.printf(\"Invoice for Subscription ID: %s%n\", invoice.getSubscriptionId());\n        System.out.printf(\"  Base Rental: $%.2f%n\", invoice.getBaseRental());\n        System.out.printf(\"  Overage Charges: $%.2f%n\", invoice.getOverageCharges());\n        if (invoice.getDiscounts() < 0) { // Negative discount is a surcharge\n            System.out.printf(\"  Family Fairness Surcharge: $%.2f%n\", -invoice.getDiscounts());\n        }\n        System.out.printf(\"  Taxes (GST): $%.2f%n\", invoice.getTaxes());\n        System.out.println(\"  ---------------------------------\");\n        System.out.printf(\"  Total Amount: $%.2f%n\", invoice.getTotalAmount());\n        System.out.printf(\"  Status: %s%n\", invoice.isPaid() ? \"Paid\" : \"Unpaid\");\n        System.out.println(\"-----------------------------------\");\n    }\n}\n","baseTimestamp":1756666016981,"deltas":[{"timestamp":1756710368790,"changes":[{"type":"INSERT","lineNumber":9,"content":"import java.time.format.DateTimeFormatter;"},{"type":"MODIFY","lineNumber":26,"content":"     *","oldContent":"     * "},{"type":"MODIFY","lineNumber":56,"content":"     *","oldContent":"     * "},{"type":"INSERT","lineNumber":60,"content":"        System.out.println(\"===================================\");"},{"type":"INSERT","lineNumber":61,"content":"        System.out.println(\"            CUSTOMER INVOICE       \");"},{"type":"INSERT","lineNumber":62,"content":"        System.out.println(\"===================================\");"},{"type":"INSERT","lineNumber":63,"content":""},{"type":"INSERT","lineNumber":64,"content":"        // Header"},{"type":"INSERT","lineNumber":65,"content":"        System.out.printf(\"Invoice ID       : %s%n\", invoice.getId());"},{"type":"INSERT","lineNumber":66,"content":"        System.out.printf(\"Subscription ID  : %s%n\", invoice.getSubscriptionId());"},{"type":"INSERT","lineNumber":67,"content":"        System.out.printf(\"Billing Cycle    : %s%n\","},{"type":"INSERT","lineNumber":68,"content":"                invoice.getBillingCycle().format(DateTimeFormatter.ofPattern(\"MMMM yyyy\")));"},{"type":"DELETE","lineNumber":60,"oldContent":"        System.out.printf(\"Invoice for Subscription ID: %s%n\", invoice.getSubscriptionId());"},{"type":"DELETE","lineNumber":61,"oldContent":"        System.out.printf(\"  Base Rental: $%.2f%n\", invoice.getBaseRental());"},{"type":"DELETE","lineNumber":62,"oldContent":"        System.out.printf(\"  Overage Charges: $%.2f%n\", invoice.getOverageCharges());"},{"type":"DELETE","lineNumber":63,"oldContent":"        if (invoice.getDiscounts() < 0) { // Negative discount is a surcharge"},{"type":"DELETE","lineNumber":64,"oldContent":"            System.out.printf(\"  Family Fairness Surcharge: $%.2f%n\", -invoice.getDiscounts());"},{"type":"INSERT","lineNumber":70,"content":""},{"type":"INSERT","lineNumber":71,"content":"        // Charges Breakdown"},{"type":"INSERT","lineNumber":72,"content":"        System.out.printf(\"Base Rental      : $%.2f%n\", invoice.getBaseRental());"},{"type":"INSERT","lineNumber":73,"content":"        System.out.printf(\"Overage Charges  : $%.2f%n\", invoice.getOverageCharges());"},{"type":"INSERT","lineNumber":74,"content":"        System.out.printf(\"Roaming Charges  : $%.2f%n\", invoice.getRoamingCharges());"},{"type":"INSERT","lineNumber":75,"content":""},{"type":"INSERT","lineNumber":76,"content":"        if (invoice.getDiscounts() < 0) {"},{"type":"INSERT","lineNumber":77,"content":"            System.out.printf(\"Surcharge        : $%.2f%n\", -invoice.getDiscounts());"},{"type":"INSERT","lineNumber":78,"content":"        } else if (invoice.getDiscounts() > 0) {"},{"type":"INSERT","lineNumber":79,"content":"            System.out.printf(\"Discounts        : -$%.2f%n\", invoice.getDiscounts());"},{"type":"DELETE","lineNumber":66,"oldContent":"        System.out.printf(\"  Taxes (GST): $%.2f%n\", invoice.getTaxes());"},{"type":"DELETE","lineNumber":67,"oldContent":"        System.out.println(\"  ---------------------------------\");"},{"type":"DELETE","lineNumber":68,"oldContent":"        System.out.printf(\"  Total Amount: $%.2f%n\", invoice.getTotalAmount());"},{"type":"DELETE","lineNumber":69,"oldContent":"        System.out.printf(\"  Status: %s%n\", invoice.isPaid() ? \"Paid\" : \"Unpaid\");"},{"type":"INSERT","lineNumber":81,"content":""},{"type":"INSERT","lineNumber":82,"content":"        System.out.printf(\"Taxes (GST)      : $%.2f%n\", invoice.getTaxes());"},{"type":"INSERT","lineNumber":83,"content":""},{"type":"INSERT","lineNumber":85,"content":""},{"type":"INSERT","lineNumber":86,"content":"        // Total"},{"type":"INSERT","lineNumber":87,"content":"        System.out.printf(\"TOTAL AMOUNT     : $%.2f%n\", invoice.getTotalAmount());"},{"type":"INSERT","lineNumber":88,"content":"        System.out.printf(\"Status           : %s%n\", invoice.isPaid() ? \"Paid ✅\" : \"Unpaid ❌\");"},{"type":"INSERT","lineNumber":89,"content":""},{"type":"INSERT","lineNumber":90,"content":"        System.out.println(\"===================================\");"},{"type":"INSERT","lineNumber":91,"content":"        System.out.println();"}]}]},"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/presentation/PlanController.java":{"filePath":"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/presentation/PlanController.java","baseContent":"package com.telecom.presentation;\n\nimport com.telecom.exceptions.InvalidChoiceException;\nimport com.telecom.models.Plan;\nimport com.telecom.service.interfaces.PlanService;\nimport lombok.RequiredArgsConstructor;\n\nimport java.util.List;\nimport java.util.Scanner;\n\n/**\n * Console viewer for all plan-based operations\n */\n@RequiredArgsConstructor\npublic class PlanController {\n    private final Scanner sc;\n    private final PlanService planService;\n\n    /**\n     * CLI to display all available plans.\n     */\n    public void showAllPlans() {\n        List<Plan> plans = planService.getAllPlans();\n        System.out.println(\"\\n--- Available Telecom Plans ---\");\n        plans.forEach(plan -> {\n            System.out.printf(\"ID: %s, Name: %s, Rental: $%.2f/month%n\", plan.getId(), plan.getName(), plan.getMonthlyRental());\n            System.out.printf(\"  Data: %.2f MB, Voice: %d mins, SMS: %d%n\", plan.getDataAllowanceMb(), plan.getVoiceAllowanceMin(), plan.getSmsAllowance());\n            if (plan.isFamilyPlan()) {\n                System.out.println(\"  Type: Family Plan\");\n            }\n            System.out.println(\"-----------------------------------\");\n        });\n    }\n\n    /**\n     * CLI to add a new plan.\n     */\n    public void addNewPlan() {\n        try {\n            System.out.println(\"\\n--- Add a New Plan ---\");\n            System.out.print(\"Enter Plan ID: \");\n            String id = sc.nextLine();\n            System.out.print(\"Enter Plan Name: \");\n            String name = sc.nextLine();\n            System.out.print(\"Enter Monthly Rental: \");\n            double rental = Double.parseDouble(sc.nextLine());\n            System.out.print(\"Enter Data Allowance (MB): \");\n            double data = Double.parseDouble(sc.nextLine());\n            System.out.print(\"Enter Voice Allowance (Minutes): \");\n            int voice = Integer.parseInt(sc.nextLine());\n            System.out.print(\"Enter SMS Allowance: \");\n            int sms = Integer.parseInt(sc.nextLine());\n            System.out.print(\"Is this a family plan? (true/false): \");\n            boolean isFamily = Boolean.parseBoolean(sc.nextLine());\n\n            Plan newPlan = Plan.builder()\n                    .id(id)\n                    .name(name)\n                    .monthlyRental(rental)\n                    .dataAllowanceMb(data)\n                    .voiceAllowanceMin(voice)\n                    .smsAllowance(sms)\n                    .isFamilyPlan(isFamily)\n                    // Setting default overage rates and other properties for simplicity\n                    .dataOverageRate(0.15)\n                    .voiceOverageRate(0.1)\n                    .smsOverageRate(0.05)\n                    .build();\n\n            planService.addPlan(newPlan);\n            System.out.println(\"Plan added successfully!\");\n        } catch (NumberFormatException e) {\n            throw new InvalidChoiceException(\"Invalid input. Please enter a valid number.\");\n        }\n    }\n\n    public void updateExistingPlan() {\n        try {\n            System.out.println(\"\\n--- Update a Plan ---\");\n            showAllPlans();\n            System.out.print(\"Enter the ID of the plan to update: \");\n            String id = sc.nextLine();\n            Plan plan = planService.getPlan(id);\n\n            System.out.printf(\"Enter new name (current: %s): \", plan.getName());\n            String newName = sc.nextLine();\n            if (!newName.isEmpty()) {\n                plan.setName(newName);\n            }\n\n            System.out.printf(\"Enter new monthly rental (current: %.2f): \", plan.getMonthlyRental());\n            String newRentalStr = sc.nextLine();\n            if (!newRentalStr.isEmpty()) {\n                plan.setMonthlyRental(Double.parseDouble(newRentalStr));\n            }\n\n            System.out.printf(\"Is this a family plan? (current: %s): \", plan.isFamilyPlan());\n            String isFamilyStr = sc.nextLine();\n            if (!isFamilyStr.isEmpty()) {\n                plan.setFamilyPlan(Boolean.parseBoolean(isFamilyStr));\n            }\n\n            planService.updatePlan(plan);\n            System.out.println(\"Plan updated successfully!\");\n        } catch (NumberFormatException e) {\n            throw new InvalidChoiceException(\"Invalid input. Please enter a valid number.\");\n        }\n    }\n\n    public void deleteExistingPlan() {\n        try {\n            System.out.println(\"\\n--- Delete a Plan ---\");\n            showAllPlans();\n            System.out.print(\"Enter the ID of the plan to delete: \");\n            String id = sc.nextLine();\n\n            planService.deletePlan(id);\n            System.out.println(\"Plan deleted successfully!\");\n        } catch (Exception e) {\n            System.out.println(\"An error occurred: \" + e.getMessage());\n        }\n    }\n}\n","baseTimestamp":1756707312284,"deltas":[{"timestamp":1756710368426,"changes":[{"type":"INSERT","lineNumber":9,"content":"import java.util.UUID;"},{"type":"DELETE","lineNumber":40,"oldContent":"            System.out.print(\"Enter Plan ID: \");"},{"type":"MODIFY","lineNumber":41,"content":"            String id = \"P\" + UUID.randomUUID().toString().substring(0,3);","oldContent":"            String id = sc.nextLine();"}]}]},"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/bootstrap/BootstrapEngine.java":{"filePath":"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/bootstrap/BootstrapEngine.java","baseContent":"package com.telecom.bootstrap;\n\nimport com.telecom.models.*;\nimport com.telecom.models.enums.Role;\nimport com.telecom.repository.interfaces.*;\nimport lombok.RequiredArgsConstructor;\n\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.util.UUID;\nimport java.util.function.Supplier;\n\n/**\n * Initializes the in-memory database with sample data for demonstration.\n */\n@RequiredArgsConstructor\npublic class BootstrapEngine {\n\n    private final UserRepo userRepo;\n    private final CustomerRepo customerRepo;\n    private final PlanRepo planRepo;\n    private final SubscriptionRepo subscriptionRepo;\n    private final UsageRecordRepo usageRecordRepo;\n\n    public void run() {\n        System.out.println(\"Bootstrapping data...\");\n\n        Supplier<String> getUUID = () -> UUID.randomUUID().toString().substring(0, 3);\n\n        // Create Plans\n        Plan individualPlan = Plan.builder().id(\"P\" + getUUID.get()).name(\"Solo Basic\").monthlyRental(30).dataAllowanceMb(5000)\n                .voiceAllowanceMin(200).smsAllowance(100).isFamilyPlan(false).dataOverageRate(0.2).voiceOverageRate(0.1)\n                .smsOverageRate(0.05).build();\n        Plan familyPlan = Plan.builder().id(\"P\" + getUUID.get()).name(\"Family Plus\").monthlyRental(80).dataAllowanceMb(25000)\n                .voiceAllowanceMin(500).smsAllowance(500).isFamilyPlan(true).familyShareCap(0.6).dataOverageRate(0.15)\n                .voiceOverageRate(0.1).smsOverageRate(0.05).build();\n        planRepo.save(individualPlan);\n        planRepo.save(familyPlan);\n\n        // Create Customers and Users\n        Customer cust1 = new Customer(\"C\" + getUUID.get(), \"Alice\", \"alice@email.com\", null, false);\n        Customer cust2 = new Customer(\"C\" + getUUID.get(), \"Bob\", \"bob@email.com\", \"C1\", false);\n        customerRepo.save(cust1);\n        customerRepo.save(cust2);\n\n        User adminUser = User.builder().username(\"admin\").password(\"admin\").role(Role.ADMIN).build();\n        User user1 = User.builder().username(\"alice\").password(\"pass\").role(Role.CUSTOMER).customerId(cust1.getId()).build();\n        User user2 = User.builder().username(\"bob\").password(\"pass\").role(Role.CUSTOMER).customerId(cust2.getId()).build();\n        userRepo.createUser(adminUser);\n        userRepo.createUser(user1);\n        userRepo.createUser(user2);\n\n        // Create Subscriptions\n        String familyId = \"F\" + getUUID.get();\n        Subscription sub1 = Subscription.builder().id(\"S\" + getUUID.get()).customerId(cust1.getId()).planId(individualPlan.getId()).phoneNumber(\"9876543210\")\n                .startDate(LocalDate.now().minusMonths(2)).build();\n        Subscription sub2 = Subscription.builder().id(\"S\" + getUUID.get()).customerId(cust2.getId()).planId(familyPlan.getId()).phoneNumber(\"9876543211\")\n                .familyId(familyId).startDate(LocalDate.now().minusMonths(1)).build();\n        Subscription sub3 = Subscription.builder().id(\"S\" + getUUID.get()).customerId(cust2.getId()).planId(familyPlan.getId()).phoneNumber(\"9876543212\")\n                .familyId(familyId).startDate(LocalDate.now().minusMonths(1)).build();\n        subscriptionRepo.save(sub1);\n        subscriptionRepo.save(sub2);\n        subscriptionRepo.save(sub3);\n\n        // Create Usage Records\n        // Usage for individual plan (S1) - with overage\n        usageRecordRepo.save(\n                new UsageRecord(sub1.getId(), null, LocalDateTime.now().minusDays(10), 6000, 150, 50, false, false, false));\n        // Usage for family plan (S2, S3)\n        // S2 uses a lot of data (triggers fairness surcharge), S3 uses less\n        usageRecordRepo.save(new UsageRecord(sub2.getId(), familyId, LocalDateTime.now().minusDays(5), 20000, 100, 100, false,\n                false, false)); // > 60% of 25000\n        usageRecordRepo.save(\n                new UsageRecord(sub3.getId(), familyId, LocalDateTime.now().minusDays(3), 6000, 50, 50, true, false, true)); // Roaming\n\n        System.out.println(\"Bootstrap completed.\");\n    }\n}","baseTimestamp":1756710368504},"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/presentation/SubscriptionController.java":{"filePath":"C:/Users/subadeveswaran.v/IdeaProjects/telecom-billing-analytics/src/main/java/com/telecom/presentation/SubscriptionController.java","baseContent":"package com.telecom.presentation;\n\nimport com.telecom.models.Family;\nimport com.telecom.models.Plan;\nimport com.telecom.models.Subscription;\nimport com.telecom.models.User;\nimport com.telecom.service.interfaces.FamilyService;\nimport com.telecom.service.interfaces.PlanService;\nimport com.telecom.service.interfaces.SubscriptionService;\nimport lombok.RequiredArgsConstructor;\n\nimport java.time.LocalDate;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.UUID;\n\n/**\n * Console viewer for all subscription-based operations.\n */\n@RequiredArgsConstructor\npublic class SubscriptionController {\n    private final Scanner sc;\n    private final SubscriptionService subscriptionService;\n    private final PlanService planService; // Needed to show plan details\n    private final FamilyService familyService;\n\n    /**\n     * Displays all subscriptions for the logged-in user.\n     *\n     * @param user The currently authenticated user.\n     */\n    public void showCustomerSubscriptions(User user) {\n        List<Subscription> subscriptions = subscriptionService.getCustomerSubscriptions(user.getCustomerId());\n        System.out.println(\"\\n--- Your Subscriptions ---\");\n        if (subscriptions.isEmpty()) {\n            System.out.println(\"You have no active subscriptions.\");\n            return;\n        }\n        subscriptions.forEach(sub -> {\n            Plan plan = planService.getPlan(sub.getPlanId());\n            System.out.printf(\"ID: %s, Phone: %s%n\", sub.getId(), sub.getPhoneNumber());\n            System.out.printf(\"  Plan: %s ($%.2f/month)%n\", plan.getName(), plan.getMonthlyRental());\n            System.out.printf(\"  Status: Active since %s%n\", sub.getStartDate());\n            if (sub.isMnpPending()) {\n                System.out.printf(\"  MNP Status: Port-out pending to %s since %s%n\", sub.getTargetOperator(), sub.getMnpRequestDate());\n            }\n            System.out.println(\"-----------------------------------\");\n        });\n    }\n\n    /**\n     * CLI to add a new subscription for the logged-in user.\n     *\n     * @param user The currently authenticated user.\n     */\n    public void addNewSubscription(User user) {\n        System.out.println(\"\\n--- Add a New Subscription ---\");\n        new PlanController(sc, planService).showAllPlans(); // Show available plans\n        System.out.print(\"Enter Plan ID to subscribe to: \");\n        String planId = sc.nextLine();\n        Plan plan = planService.getPlan(planId);\n        System.out.print(\"Enter new Phone Number: \");\n        String phone = sc.nextLine();\n        String subId = \"S\" + UUID.randomUUID().toString().substring(0, 3);\n        String familyId = null;\n        if (plan.isFamilyPlan()) {\n            familyId = \"F\" + UUID.randomUUID().toString().substring(0, 3);\n            familyService.createFamily(Family.builder()\n                    .customerIds(new ArrayList<>())\n                    .familyId(familyId)\n                    .build());\n            familyService.addFamilyMember(familyId, user.getCustomerId());\n        }\n\n\n        Subscription newSubscription = Subscription.builder()\n                .id(subId)\n                .customerId(user.getCustomerId())\n                .phoneNumber(phone)\n                .planId(planId)\n                .startDate(LocalDate.now())\n                .familyId(familyId)\n                .build();\n\n        subscriptionService.addSubscription(newSubscription);\n        System.out.println(\"Subscription added successfully!\");\n    }\n\n    /**\n     * CLI to initiate an MNP port-out request.\n     *\n     * @param user The currently authenticated user.\n     */\n    public void initiateMnp(User user) {\n        System.out.println(\"\\n--- Mobile Number Portability (MNP) Port-Out ---\");\n        showCustomerSubscriptions(user);\n        System.out.print(\"Enter Subscription ID to port out: \");\n        String subId = sc.nextLine();\n        System.out.print(\"Enter Target Operator Name: \");\n        String operator = sc.nextLine();\n\n        try {\n            subscriptionService.requestMNP(subId, operator);\n            System.out.println(\"MNP request submitted successfully. Your plan cannot be changed until this is resolved.\");\n        } catch (Exception e) {\n            System.err.println(\"Error submitting MNP request: \" + e.getMessage());\n        }\n    }\n}\n","baseTimestamp":1756710369043,"deltas":[{"timestamp":1756713248020,"changes":[{"type":"INSERT","lineNumber":2,"content":"import com.telecom.exceptions.InvalidPhoneNumberFormatException;"},{"type":"INSERT","lineNumber":65,"content":""},{"type":"INSERT","lineNumber":66,"content":"        if (!phone.matches(\"^[6789]\\\\d{9}$\")) {"},{"type":"INSERT","lineNumber":67,"content":"            System.out.println(\"Invalid phone number. Must be 10 digits starting with 7, 8, or 9.\");"},{"type":"INSERT","lineNumber":68,"content":"        } else {"},{"type":"INSERT","lineNumber":69,"content":"            throw new InvalidPhoneNumberFormatException(\"Valid phone number: \" + phone);"},{"type":"INSERT","lineNumber":70,"content":"        }"},{"type":"INSERT","lineNumber":71,"content":""}]},{"timestamp":1756716093905,"changes":[{"type":"DELETE","lineNumber":65,"oldContent":"        String subId = \"S\" + UUID.randomUUID().toString().substring(0, 3);"},{"type":"DELETE","lineNumber":67,"oldContent":"        String familyId = null;"},{"type":"DELETE","lineNumber":69,"oldContent":"        if (plan.isFamilyPlan()) {"},{"type":"DELETE","lineNumber":71,"oldContent":"            familyId = \"F\" + UUID.randomUUID().toString().substring(0, 3);"},{"type":"DELETE","lineNumber":73,"oldContent":"            familyService.createFamily(Family.builder()"},{"type":"DELETE","lineNumber":75,"oldContent":"                    .customerIds(new ArrayList<>())"},{"type":"DELETE","lineNumber":77,"oldContent":"                    .familyId(familyId)"},{"type":"INSERT","lineNumber":72,"content":"        String subId = \"S\" + UUID.randomUUID().toString().substring(0, 3);"},{"type":"INSERT","lineNumber":73,"content":"        String familyId = null;"},{"type":"INSERT","lineNumber":74,"content":"        if (plan.isFamilyPlan()) {"},{"type":"INSERT","lineNumber":75,"content":"            familyId = \"F\" + UUID.randomUUID().toString().substring(0, 3);"},{"type":"INSERT","lineNumber":76,"content":"            familyService.createFamily(Family.builder()"},{"type":"INSERT","lineNumber":77,"content":"                    .customerIds(new ArrayList<>())"},{"type":"INSERT","lineNumber":78,"content":"                    .familyId(familyId)"}]},{"timestamp":1756716098508,"changes":[{"type":"MODIFY","lineNumber":66,"content":"        if (phone.matches(\"^[6789]\\\\d{9}$\")) {","oldContent":"        if (!phone.matches(\"^[6789]\\\\d{9}$\")) {"},{"type":"DELETE","lineNumber":68,"oldContent":"        String subId = \"S\" + UUID.randomUUID().toString().substring(0, 3);"},{"type":"INSERT","lineNumber":69,"content":"            throw new InvalidPhoneNumberFormatException(\"Valid phone number: \" + phone);"},{"type":"INSERT","lineNumber":70,"content":"        }"},{"type":"INSERT","lineNumber":71,"content":""},{"type":"INSERT","lineNumber":72,"content":"        String subId = \"S\" + UUID.randomUUID().toString().substring(0, 3);"},{"type":"DELETE","lineNumber":72,"oldContent":"            throw new InvalidPhoneNumberFormatException(\"Valid phone number: \" + phone);"},{"type":"DELETE","lineNumber":75,"oldContent":"        }"},{"type":"DELETE","lineNumber":78,"oldContent":""}]},{"timestamp":1756716105749,"changes":[{"type":"DELETE","lineNumber":67,"oldContent":"            System.out.println(\"Invalid phone number. Must be 10 digits starting with 7, 8, or 9.\");"},{"type":"MODIFY","lineNumber":67,"content":"            System.out.println(\"Invalid phone number. Must be 10 \");","oldContent":"            throw new InvalidPhoneNumberFormatException(\"Valid phone number: \" + phone);"},{"type":"INSERT","lineNumber":69,"content":"            throw new InvalidPhoneNumberFormatException(\"Valid phone number: \" + phone);"},{"type":"DELETE","lineNumber":71,"oldContent":"        String familyId = null;"},{"type":"MODIFY","lineNumber":73,"content":"        String familyId = null;","oldContent":"        if (plan.isFamilyPlan()) {"},{"type":"INSERT","lineNumber":74,"content":"        if (plan.isFamilyPlan()) {"}]},{"timestamp":1756716122662,"changes":[{"type":"DELETE","lineNumber":67,"oldContent":"            System.out.println(\"Invalid phone number. Must be 10 \");"},{"type":"DELETE","lineNumber":68,"oldContent":"            throw new InvalidPhoneNumberFormatException(\"Valid phone number: \" + phone);"},{"type":"INSERT","lineNumber":67,"content":"            System.out.println(\"The phone number is added successfully !\");"},{"type":"INSERT","lineNumber":69,"content":"            throw new InvalidPhoneNumberFormatException(\"Valid phone number: \" + phone);"},{"type":"INSERT","lineNumber":72,"content":"        String subId = \"S\" + UUID.randomUUID().toString().substring(0, 3);"},{"type":"DELETE","lineNumber":74,"oldContent":"        String subId = \"S\" + UUID.randomUUID().toString().substring(0, 3);"}]}]}}}